HomeKit Accessory
Protocol Specification 
(Non-Commercial Version)

Release R1

Contents

Document Revision History 15

1. Introduction 22
1.1 Requirements, Recommendations, and Permissions 22
1.2 Terminology 23

1.2.1 Accessory, Device, and Product 23
1.2.2 Component 23
1.2.3 Feature 23

2. Core Concepts 24
2.1 Transports 24
2.2 Security 24

2.2.1 Pairing 24
2.2.2 Session Keys 25

2.3 Attributes 25

2.3.1 Accessories 25
2.3.2 Services 25
2.3.3 Characteristics 26
2.3.4 Additional HomeKit Accessory Protocol Requirements 28

2.4 Profiles 28
2.5 Roles 29

2.5.1 HAP Client 29
2.5.2 HAP Accessory Server 29
2.5.3 HAP Accessory Objects 29
2.6 Accessory Attribute Database  30

2.6.1 Instance IDs  30

3. Requirements  32
3.1 Overview  32
3.2 General Requirements  32
3.3 Wi-Fi Requirements  32
3.4 Firmware Updates  33
3.5 Coalescing Requirements  33

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

2

Contents

4. Pairing 34
4.1 Overview 34
4.2 Cryptographic Key Storage 34
4.3 Setup Codes 34

4.3.1 Displaying Setup Codes 34
4.3.2 Invalid Setup Codes 35

4.4 Admins 36
4.5 Device ID 36
4.6 Secure Remote Password (SRP) 36

4.6.1 SRP Modifications 36
4.6.2 SRP Test Vectors 36

4.7 Pair Setup 39

4.7.1 M1: iOS Device -> Accessory -- `SRP Start Request' 39
4.7.2 M2: Accessory -> iOS Device -- `SRP Start Response' 40
4.7.3 M3: iOS Device -> Accessory -- `SRP Verify Request' 41
4.7.4 M4: Accessory -> iOS Device -- `SRP Verify Response' 41
4.7.5 M5: iOS Device -> Accessory -- `Exchange Request' 43
4.7.6 M6: Accessory -> iOS Device -- `Exchange Response' 45

4.8 Pair Verify 47

4.8.1 M1: iOS Device -> Accessory -- `Verify Start Request' 47
4.8.2 M2: Accessory -> iOS Device -- `Verify Start Response' 48
4.8.3 M3: iOS Device -> Accessory -- `Verify Finish Request' 49
4.8.4 M4: Accessory -> iOS Device -- `Verify Finish Response' 50

4.9 Fragmentation and Reassembly 51
4.10 AEAD Algorithm 51
4.11 Add Pairing 51

4.11.1 M1: iOS Device -> Accessory -- `Add Pairing Request' 51
4.11.2 M2: Accessory -> iOS Device -- `Add Pairing Response' 52

4.12 Remove Pairing 53

4.13 List Pairings 55

4.12.1 M1: iOS Device -> Accessory -- `Remove Pairing Request' 54
4.12.2 M2: Accessory -> iOS Device -- `Remove Pairing Response' 54

4.13.1 M1: iOS Device -> Accessory -- `List Pairings Request' 55
4.13.2 M2: Accessory -> iOS Device -- `List Pairings Response' 56

4.14 Pairing over Bluetooth LE 56

4.14.1 Pairing Service 57

4.15 Pairing over IP 59
4.16 Methods, Error Codes, and TLV Values 60

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

3

5.2.1 IP Requirements 62
5.2.2 Bonjour Requirements 62
5.2.3 TCP Requirements 63
5.2.4 HTTP Server Requirements 63
5.2.5 Application Requirements 63
5.2.6 General Requirements 63

5.3 HAP Objects 63

5.3.1 Accessory Objects 63
5.3.2 Service Objects 64
5.3.3 Characteristic Objects 64

5.4 Discovery 68
5.5 Security for IP Accessories 70

5.5.1 Pairing 70
5.5.2 Session Security 70

5.6 IP Accessory Attribute Database 71

5.7 Controlling IP Accessories 79

5.7.1 Handling HTTP Requests 79
5.7.2 Writing Characteristics 80
5.7.3 Reading Characteristics 84
5.7.4 Control Point Characteristics 87
5.7.5 Identify Routine 87
5.7.6 Identify HTTP URL 88

5.8 Notifications 88

5.6.1 Service and Characteristic Types 72
5.6.2 Getting the Accessory Attribute Database 72
5.6.3 Example Accessory Attribute Database in JSON 73

Contents

5. HomeKit Accessory Protocol for IP Accessories 62
5.1 Overview 62
5.2 Requirements 62

5.8.1 Accessory Updates State Number Internally 89
5.8.2 Accessory Sends Events to Controller 89

5.9 HTTP URLs 91
5.10 Testing IP Accessories 92

6. HomeKit Accessory Protocol for Bluetooth LE Accessories 94
6.1 Overview 94
6.2 Accessory Requirements 94
6.3 HAP for Bluetooth LE 94

6.3.1 HAP Transactions and Procedures 94

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

4

Contents

6.3.2 Attribute Database Authentication 95
6.3.3 HAP-BLE PDU Format 95
6.3.4 HAP-BLE PDU Payloads 100
6.3.5 HAP Procedures 104
6.3.6 HAP Status Codes 116
6.3.7 Pair-Resume Procedure 116

6.4 Bluetooth LE 122

6.4.1 General requirements 122
6.4.2 HAP BLE 2.0 Advertisement Format 123
6.4.3 HAP-BLE 2.0 Protocol Information Service 126
6.4.4 Attributes of HAP Services and Characteristics 126
6.4.5 Additional HAP Characteristic Requirements 131
6.4.6 HAP Notifications 133
6.4.7 Security 133
6.4.8 Firmware Update Requirements 135

6.5 Testing Bluetooth LE Accessories  135

7. This chapter has been omitted

8. Apple-defined Characteristics  144
8.1 Overview  144

8.1.1 Overriding Properties  144
8.2 Administrator Only Access  145
8.3 Audio Feedback  145
8.4 Brightness  145
8.5 Cooling Threshold Temperature  146 8.6 
Current Door State  146

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

5

Contents

8.7 Current Heating Cooling State 147
8.8 Current Relative Humidity 148
8.9 Current Temperature 148
8.10 Firmware Revision 149
8.11 Hardware Revision 150
8.12 Heating Threshold Temperature 151
8.13 Hue 151
8.14 Identify 152
8.15 Lock Control Point 152
8.16 Lock Current State 153
8.17 Lock Last Known Action 153
8.18 Lock Management Auto Security Timeout 154
8.19 Lock Target State 155
8.20 Logs 155
8.21 Manufacturer 156
8.22 Model 156
8.23 Motion Detected 156
8.24 Name 157
8.25 Obstruction Detected 157
8.26 On 157
8.27 Outlet In Use 158
8.28 Rotation Direction 158
8.29 Rotation Speed 159
8.30 Saturation 159
8.31 Serial Number 160
8.32 Target Door State 160
8.33 Target Heating Cooling State 161
8.34 Target Relative Humidity 162
8.35 Target Temperature 162
8.36 Temperature Display Units 163
8.37 Version 164
8.38 Air Particulate Density 164
8.39 Air Particulate Size 164
8.40 Security System Current State 165
8.41 Security System Target State 166
8.42 Battery Level 167
8.43 Carbon Monoxide Detected 167
8.44 Contact Sensor State 168
8.45 Current Ambient Light Level 169

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

6

Contents

8.46 Current Horizontal Tilt Angle 169
8.47 Current Position 170
8.48 Current Vertical Tilt Angle 170
8.49 Hold Position 171
8.50 Leak Detected 171
8.51 Occupancy Detected 172
8.52 Position State 173
8.53 Programmable Switch Event 174
8.54 Status Active 174
8.55 Smoke Detected 175
8.56 Status Fault 175
8.57 Status Jammed 176
8.58 Status Low Battery 177
8.59 Status Tampered 178
8.60 Target Horizontal Tilt Angle 178
8.61 Target Position 179
8.62 Target Vertical Tilt Angle 179
8.63 Security System Alarm Type 180
8.64 Charging State 181
8.65 Carbon Monoxide Level 181
8.66 Carbon Monoxide Peak Level 182
8.67 Carbon Dioxide Detected 182
8.68 Carbon Dioxide Level 183
8.69 Carbon Dioxide Peak Level 183
8.70 Air Quality 184
8.71 Streaming Status 185
8.72 Supported Video Stream Configuration 185
8.73 Supported Audio Stream Configuration 188
8.74 Supported RTP Configuration 190
8.75 Setup Endpoints 191
8.76 Selected RTP Stream Configuration 194
8.77 Volume 197
8.78 Mute 197
8.79 Night Vision 198
8.80 Optical Zoom 198
8.81 Digital Zoom 199
8.82 Image Rotation 199
8.83 Image Mirroring 200
8.84 Accessory Flags 201

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

7

Contents

8.85 Lock Physical Controls 201
8.86 Current Air Purifier State 202
8.87 Current Slat State 202
8.88 Slat Type 203
8.89 Filter Life Level 204
8.90 Filter Change Indication 204
8.91 Reset Filter Indication 205
8.92 Target Air Purifier State 205
8.93 Target Fan State 206
8.94 Current Fan State 207
8.95 Active 207
8.96 Swing Mode 208
8.97 Current Tilt Angle 209
8.98 Target Tilt Angle 210
8.99 Ozone Density 210
8.100 Nitrogen Dioxide Density 211
8.101 Sulphur Dioxide Density 211
8.102 PM2.5 Density 211
8.103 PM10 Density 212
8.104 VOC Density 212
8.105 Service Label Index 213
8.106 Service Label Namespace 213
8.107 Color Temperature 214

9. Apple-defined Services 216
9.1 Accessory Information 216
9.2 Fan 216
9.3 Garage Door Opener 217
9.4 Lightbulb 217
9.5 Lock Management 218
9.6 Lock Mechanism 219
9.7 Outlet 219
9.8 Switch 219
9.9 Thermostat 220
9.10 Air Quality Sensor 220
9.11 Security System 221
9.12 Carbon Monoxide Sensor 222
9.13 Contact Sensor 222
9.14 Door 223

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

8

Contents

9.15 Humidity Sensor 224
9.16 Leak Sensor 224
9.17 Light Sensor 225
9.18 Motion Sensor 225
9.19 Occupancy Sensor 226
9.20 Smoke Sensor 226
9.21 Stateless Programmable Switch 227
9.22 Temperature Sensor 228
9.23 Window 228
9.24 Window Covering 229
9.25 Battery Service 230
9.26 Carbon Dioxide Sensor 230
9.27 Camera RTP Stream Management 231
9.28 Microphone 231
9.29 Speaker 232
9.30 Doorbell 232
9.31 Fan v2 233
9.32 Slat 233
9.33 Filter Maintenance 234
9.34 Air Purifier 235
9.35 Service Label 236

10. Apple-defined Profiles 237
10.1 Overview 237
10.2 Lock 237

10.2.1 Lock Mechanism Service 237
10.2.2 Lock Management Service 237

11. IP Cameras 240
11.1 Overview 240
11.2 Requirements 240

11.2.1 Streaming Requirements 240
11.2.2 Optional Requirements 241

11.3 Service Definitions 241

11.3.1 IP Camera 241
11.3.2 Video Doorbell Profile 241

11.4 RTP configuration 242

11.4.1 RTCP Based Feedback 242
11.4.2 RTP Extension for Coordination of Video Orientation 244
11.4.3 Reconfiguring a Streaming Session 244

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

9

Contents

11.5 Image Snapshot 245
11.6 IP Camera Streaming Procedure 246
11.7 Multiple Camera RTP Stream Management 248
11.8 Media Codecs 248

11.8.1 Mandatory Video RTP Service Settings 248
11.8.2 Mandatory Audio RTP service settings 249
11.8.3 Mandatory RTP Profile 249

11.9 Media Transport 250
11.10 Testing IP Cameras 250

12. Appendix 251
12.1 TLVs 251

12.1.1 TLV Rules 251
12.1.2 TLV Examples 252

12.2 Accessory Categories 254

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

10

Figures and Tables

2. Core Concepts 24
Table 2-1

Additional HomeKit Accessory Protocol Requirements 28

4. Pairing 34
Table 4-1
Table 4-2
Table 4-3
Table 4-4
Table 4-5
Table 4-6

Bluetooth LE Feature Flags 58
HTTP Status Codes 59
HTTP URLs 59
Methods 60
Error Codes 60
TLV Values 61

5. HomeKit Accessory Protocol for IP Accessories 62
Table 5-1
Properties of HAP Accessory Objects in JSON 64
Properties of Service Objects in JSON 64
Table 5-2
Properties of Characteristic Objects in JSON 65
Table 5-3
Characteristic Properties 67
Table 5-4
Table 5-5
Characteristic Value Formats 67
Characteristic Units 68
Table 5-6
_hap._tcp Bonjour TXT Record Keys 69
Table 5-7
Table 5-8
Bonjour TXT Record Feature Flags 69
Bonjour TXT Status Flags 70
Table 5-9
Derived Session Key Usage 71
Table 5-10
Table 5-11
HAP Status Code Property 80
HAP Status Codes 80
Table 5-12
Properties of Characteristic Write Objects in JSON 81
Table 5-13
Table 5-14
HAP GET Request URL Parameters 84
HTTP URLs 91
Table 5-15

6. HomeKit Accessory Protocol for Bluetooth LE Accessories 94
Figure 6-1
Figure 6-2
Figure 6-3
Figure 6-4
Figure 6-5

HAP Characteristic Signature Read Procedure 105
HAP Characteristic Write Procedure 106
HAP Characteristic Read Procedure 107
HAP Characteristic Timed Write Procedure (1) 109
HAP Characteristic Timed Write Procedure (2) 110

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

11

Figures and Tables

Figure 6-6
Figure 6-7
Figure 6-8
Figure 6-9
Figure 6-10
Figure 6-11
Figure 6-12
Table 6-1
Table 6-2
Table 6-3
Table 6-4
Table 6-5
Table 6-6
Table 6-7
Table 6-8
Table 6-9
Table 6-10
Table 6-11
Table 6-12
Table 6-13
Table 6-14
Table 6-15
Table 6-16
Table 6-17
Table 6-18
Table 6-19
Table 6-20
Table 6-21
Table 6-22
Table 6-23
Table 6-24
Table 6-25
Table 6-26
Table 6-27
Table 6-28
Table 6-29
Table 6-30
Table 6-31
Table 6-32

HAP Characteristic Write-with-Response Pair Setup Procedure (1) 111
HAP Characteristic Write-with-Response Pair Setup Procedure (2) 112
HAP Characteristic Write-with-Response Pair Verify Procedure 113
HAP Fragmented Writes 114
HAP Fragmented Read 115
Pair Resume Procedure(1) 118
Pair Resume Procedure(2) 119
HAP-BLE PDU Format 95
HAP-BLE PDU Header - Control Field 96
Control Field Bit 7 Values 96
Control Field Bit 1-3 Values 96
Control Field Bit 0 Values 96
HAP-BLE Request Format 97
HAP Opcode Description 97
HAP-BLE Response Format 98
Additional Parameter Types Description 98
HAP PDU Fragmentation Scheme 99
HAP-Characteristic-Signature-Read-Request 100
HAP-Characteristic-Signature-Read-Response 1 100
HAP-Characteristic-Signature-Read-Response 2 100
HAP-Characteristic-Signature-Read-Response (with Valid Values) 1 101
HAP-Characteristic-Signature-Read-Response (with Valid Values) 2 101
HAP-Characteristic-Write-Request 101
HAP-Characteristic-Write-Response 101
HAP-Characteristic-Read-Request 102
HAP-Characteristic-Read-Response 102
HAP-Characteristic-Timed-Write-Request 102
HAP-Characteristic-Timed-Write-Response 102
HAP-Characteristic-Execute-Write-Request 103
HAP-Characteristic-Execute-Write-Response 103
HAP-Service-Signature-Read-Request 103
HAP-Service-Signature-Read-Response 104
HAP Status Codes Description 116
Defines Description 116
Flags Description 123
Manufacturer Specific Data 124
Manufacturer Specific Data - continued 125
Advertising Intervals 125
HAP Pairing Status Flag 125

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

12

Figures and Tables

Table 6-33
Table 6-34
Table 6-35
Table 6-36
Table 6-37
Table 6-38
Table 6-39

Local Name 126
HAP Service Properties 127
HAP Characteristic Description 129
HAP Format to BT SIG Format mapping 129
HAP Unit to BT SIG Unit mapping 130
Bluetooth LE Characteristic Descriptors 131
Derived Key Usage 134

8. Apple-defined Characteristics 144
Table 8-1
Table 8-2
Table 8-3
Table 8-4
Table 8-5
Table 8-6
Table 8-7
Table 8-8
Table 8-9
Table 8-10
Table 8-11
Table 8-12
Table 8-13
Table 8-14
Table 8-15
Table 8-16
Table 8-17
Table 8-18
Table 8-19

Streaming Status 185
Supported Video Stream Configuration 186
Video Codec Configuration 186
Video Codec Parameters 187
Video Attributes 188
Supported Audio Stream Configuration 188
Audio Codecs 189
Audio Codec Parameters 189
Supported RTP Configuration 190
Setup Endpoints 191
Controller Address 192
SRTP Crypto Suite 192
Read Response 193
Selected RTP Stream Configuration 194
Session Control Command 194
Selected Video Parameters 195
Video RTP Parameters 195
Selected Audio Parameters 196
Audio RTP Parameters 196

10. Apple-defined Profiles 237
Table 10-1
Table 10-2

Lock Control Point Characteristic Commands TLV8 Definition 238
Logs Characteristic Response Format TLV8 Definition 238

11. IP Cameras 240
Figure 11-1
Figure 11-2
Table 11-1
Table 11-2
Table 11-3

IP Camera - PLI Handlin 243
IP Camera Streaming Procedure 247
Video Doorbell Secondary Services 241
Video Resolutions 248
Mandatory RTP Time Values 249

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

13

Figures and Tables

12. Appendix 251
Table 12-1
Table 12-2
Table 12-3

TLV8 Structure 251
TLV8 Value Formats 251
Accessory Categories 254

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

14

Document Revision History

Date

Notes

Release R1: 2017-06-07

Initial Release

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

15

THIS PAGE INTENTIONALLY LEFT BLANK.

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

16

THIS PAGE INTENTIONALLY LEFT BLANK.

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

17

THIS PAGE INTENTIONALLY LEFT BLANK.

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

18

THIS PAGE INTENTIONALLY LEFT BLANK.

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

19

THIS PAGE INTENTIONALLY LEFT BLANK.

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

20

THIS PAGE INTENTIONALLY LEFT BLANK.

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

21

1. Introduction

NOTICE OF PROPRIETARY PROPERTY: THIS DOCUMENT AND THE INFORMATION CONTAINED HEREIN IS THE 
PROPRIETARY PROPERTY OF APPLE INC.ACCESS TO AND USE OF THIS DOCUMENT AND THE INFORMATION 
CONTAINED HEREIN IS GOVERNED BY THE TERMS OF THE LIMITED LICENSE TO HOMEKIT ACCESSORY 
PROTOCOL SPECIFICATION (NON-COMMERCIAL VERSION) (THE “AGREEMENT”). 

THIS DOCUMENT IS INTENDED TO BE USED FOR INFORMATIONAL PURPOSES SOLELY TO CREATE HARDWARE 
ACCESSORIES THAT COMMUNICATE WITH APPLE PRODUCTS USING THE HOMEKIT ACCESSORY PROTOCOL, 
FOR THE RECEIVING PARTY’S OWN PERSONAL, NON-COMMERCIAL USE AND ENJOYMENT, AND NOT FOR 
DISTRIBUTION OR SALE. ANY OTHER USE OF THIS DOCUMENT IS STRICTLY PROHIBITED. IF YOU HAVE NOT 
AGREED TO BE BOUND BY THE TERMS OF THE AGREEMENT, YOU MAY NOT ACCESS OR USE THIS DOCUMENT.

Purpose of This Specification
This document describes how to create HomeKit accessories that communicate with Apple products using the 
HomeKit Accessory Protocol for non-commercial purposes. Companies that intend to develop or manufacture 
a HomeKit-enabled accessory that will be distributed or sold must be enrolled in the MFi Program.

1.1 Requirements, Recommendations, and Permissions
The use of the words (cid:78)(cid:86)(cid:84)(cid:85), (cid:78)(cid:86)(cid:84)(cid:85)(cid:1)(cid:79)(cid:80)(cid:85), (cid:83)(cid:70)(cid:82)(cid:86)(cid:74)(cid:83)(cid:70)(cid:69), (cid:84)(cid:73)(cid:66)(cid:77)(cid:77), (cid:84)(cid:73)(cid:66)(cid:77)(cid:77)(cid:1)(cid:79)(cid:80)(cid:85), (cid:84)(cid:73)(cid:80)(cid:86)(cid:77)(cid:69), (cid:84)(cid:73)(cid:80)(cid:86)(cid:77)(cid:69)(cid:1)(cid:79)(cid:80)(cid:85), (cid:83)(cid:70)(cid:68)(cid:80)(cid:78)(cid:78)(cid:70)(cid:79)(cid:69)(cid:70)(cid:69), (cid:79)(cid:80)(cid:85)(cid:1)
(cid:83)(cid:70)(cid:68)(cid:80)(cid:78)(cid:78)(cid:70)(cid:79)(cid:69)(cid:70)(cid:69), (cid:78)(cid:66)(cid:90), (cid:80)(cid:81)(cid:85)(cid:74)(cid:80)(cid:79)(cid:66)(cid:77), and (cid:69)(cid:70)(cid:81)(cid:83)(cid:70)(cid:68)(cid:66)(cid:85)(cid:70)(cid:69) in a statement shall have the following meanings:

● must, shall, or required means the statement is an absolute requirement.
● must not, shall not or prohibited means the statement is an absolute prohibition.

●

●

should or recommended means the full implications must be understood before choosing a different
course.
should not or not recommended means the full implications must be understood before choosing this
course.

● may or optional means the statement is truly optional, and its presence or absence cannot be assumed.
deprecated means the statement is provided for historical purposes only and is equivalent to 'must not'.

●

The absence of requirements, recommendations, or permissions for a specific accessory design in this 
specification must not be interpreted as implied approval of that design.

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

22

1. Introduction
1.2 Terminology

1.2 Terminology

1.2.1 Accessory, Device, and Product
Throughout this specification:

●

●

●

The term device or controller is used to refer to an Apple iPod, iPhone, iPad or Apple!Watch (typically
running iOS or watchOS, Apple’s mobile operating system).
The term accessory is used to refer to any product intended to interface with a device via the means
described in this specification.
The term product is used to refer generically to either a Mac (Apple computers that run macOS) or an
aforementioned device.

1.2.2 Component
An accessory is defined as a collection of functional units called components. Examples of a component include,
but are not limited to, the following:
● Data transport
Power source

●

● Human Interface Device (HID) control set

1.2.3 Feature
All accessories must support one or more accessory interface features. Each feature may have associated
accessory design requirements and recommendations; an accessory must comply with all feature-specific
requirements to properly support the feature. Some features require other features to be implemented.

Accessory design must take into account the possibility that an Apple device may not support all of the
accessory's implemented features and react appropriately.

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

23

2. Core Concepts

The  HomeKit  Accessory  Specification  defines  how  an  Apple  device  communicates  with  an  accessory  using 
HomeKit Accessory Protocol, or HAP. For example, an iOS device uses HAP to discover, explore, and interact with 
HomeKit accessories such as lights, door locks, and garage door openers.

2.1 Transports
HomeKit Accessory Protocol supports two transports: Bluetooth LE and IP. HomeKit accessories may support 
either transport or both transports. The transport-specific protocols are covered in HomeKit Accessory Protocol 
for IP Accessories (page 62) and HomeKit Accessory Protocol for Bluetooth LE Accessories (page 94).

2.2 Security
HomeKit Accessory Protocol sessions are end-to-end encrypted and mutually authenticated. Sessions also 
feature perfect forward secrecy, meaning that a new, unique key is generated for every session. The foundation 
of this security is provided by Pairing.

2.2.1 Pairing
Pairing establishes a cryptographic relationship between an iOS device and an accessory. There are two 
components to Pairing: Pair Setup and Pair Verify.

2.2.1.1 Pair Setup
Pair Setup is a one-time operation that creates a valid pairing between an iOS device and an accessory by 
securely exchanging public keys with an iOS device and an accessory. Pair Setup requires the customer to 
enter an eight-digit Setup Code on their iOS device. The Setup Code is provided by the accessory via a label 
or display.

2.2.1.2 Pair Verify
Pair Verify is performed for every HomeKit Accessory Protocol session. Pair Verify verifies the pairing between 
an iOS device and an accessory and establishes an ephemeral shared secret used to secure the HomeKit 
Accessory Protocol session.

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

24

2. Core Concepts
2.3 Attributes

2.2.2 Session Keys
Encryption and authentication keys are derived from the ephemeral shared secret established during Pair
Verify.

2.3 Attributes
HomeKit Accessory Protocol uses two types of attributes, services and characteristics, to model the capabilities
of an accessory.

2.3.1 Accessories
Accessories are comprised of services and characteristics. An example of an accessory is a ceiling fan with a
light and a mister that sprays cool water.

2.3.2 Services
Services group functionality in order to provide context. In the aforementioned example accessory there are
three services: a fan service to interact with the ceiling fan, a light service to interact with the light, and a mister
service to interact with the spray mister.

2.3.2.1 Service Naming
Not all services provide user-visible or user-interactive functionality. Services which provide either user-visible
or user-interactive functionality must include the Name characteristic, see Name (page 157); all other services
must not include this characteristic. This convention is used by iOS controllers to determine which services to
display to users.

In the aforementioned ceiling fan example, the fan, light, and mister services would all include a Name
characteristic. There may be an additional service providing firmware update capabilities. The characteristics
contained in this service are not meant to be user-visible or user-interactive, thus this service would not contain
a Name characteristic.

Note that the Accessory Information service, see Accessory Information (page 216), is an exception and always
includes the Name characteristic even though it is not typically user-visible or user-interactive.

2.3.2.2 Extending Services
To maintain backward compatibility with earlier clients, any characteristics added in later versions of a service
must be optional. Later versions of a service must not change behaviors defined in previous versions of the
service.

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

25

2. Core Concepts
2.3 Attributes

Suppose the only characteristics defined by the "public.hap.service.lightbulb" service were 'on' and 'brightness'
but an accessory also supports color temperature. The accessory manufacturer would simply define a new,
custom characteristic for color temperature and include it as part of the "public.hap.service.lightbulb" service.

2.3.2.3 Primary Service
Accessories should list one of its services as the primary service. The primary service must match the primary
function of the accessory and must also match with the accessory category. An accessory must expose only
one primary service from its list of available services.

2.3.2.4 Hidden Service
Accessories may specify the services that are to be hidden from users by a generic HomeKit application.
Accessories may expose several services that could be used to configure the accessory or to update firmware
on the accessory, these services should be marked as hidden. When all characteristics in a service are marked
hidden then the service must also be marked as hidden.

2.3.2.5 Linked Service
Linked services allows accessories to specify logical relationship between services. A service can link to one or
more services. A service must not link to itself. Service links have context and meaning only to the first level
of services that it links to. For example if Service A links to Service B, and service B links to Service C, this does
not imply any relation between Service A to Service C. If Service A also relates to Service C then Service A's
linked services must include both Service B and Service C. Linked services allows applications to display logically
grouped accessory controls in the UI.

2.3.3 Characteristics
A characteristic is a feature that represents data or an associated behavior of a service. The characteristic is
defined by a universally unique type, and has additional properties that determine how the value of the
characteristic can be accessed.

●

●

●

The properties of "perms" and "ev", for example, indicate read/write/notify permissions, and event
notifications.
The characteristic may also have other properties that further describe the characteristic. Properties like
"format" describe the format of the characteristic's value such as int or string, "description" contains a
description string, and "minValue", "maxValue", and "minStep" refer to minimum, maximum, and step
limits that also apply to the characteristic's value.
For example, the Lightbulb (page 217) service contains a Brightness (page 145) characteristic of type
"public.hap.characteristic.brightness" with permissions of paired read ("pr") and paired write ("pw"). The '
Brightness (page 145) characteristic may have additional properties describing the value. For example, a

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

26

2. Core Concepts
2.3 Attributes

"format" property can indicate that the value is an int number, and a "unit" property can indicate that the
value is in percentage. Furthermore, other properties can be used to indicate a minimum value of 0,
maximum value of 100, and step value of 1 via the "minValue", "maxValue", and "minStep" properties.

In the aforementioned example accessory the fan service may have the following characteristics:
● On (page 157): This characteristic is a Boolean value that represents the power state of the fan: a true

value indicates the fan is turned on and a false value indicates the fan is turned off.

● Rotation Speed (page 159): This characteristic is an Integer value that represents the percentage of rotation

speed the fan is currently using.

● Rotation Direction (page 158): This characteristic is an Enumerated value that represents the rotation
direction of the fan. A 0 value indicates the fan is rotating clockwise and a 1 value indicates the fan is
rotating counter-clockwise.

The Lightbulb (page 217) may have the following characteristics:
● On (page 157): This characteristic is a Boolean value that represents the power state of the light: a true

value indicates the light is turned on and a false value indicates the light is turned off.

Note that the same On (page 157) characteristic is used in both the fan and the light services. The protocol-level
interaction between an iOS device and an accessory is the same but the different services provide context for
the characteristic.

2.3.3.1 Valid Characteristic Values
Accessory characteristics that support only a sub-set of the Apple Defined enum values can indicate the
supported values as part of the characteristic's metadata.

2.3.3.2 Additional Authorization Data
Certain types of characteristics may support additional authorization data for write requests by default. Additional
authorization data is controller-provided data that the accessory may use to validate that the controller is
authorized to perform a requested operation. The contents of the authorization data are manufacturer specific.
The additional authorization data is provided by a third-party app to iOS and stored by iOS on the controller,
so it must not be required to be unique per write request as the controller will not construct or retrieve unique
authorization data for each request. Additional authorization data may change periodically, e.g. once per
month, or when user permissions change.

The characteristic and service combination that support additional authorization data by default are Target
Door State (page 160) in the Garage Door Opener (page 217) and the Lock Target State (page 155) in the Garage
Door Opener (page 217) and Lock Mechanism (page 219).

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

27

2. Core Concepts
2.4 Profiles

For example, a HomeKit accessory implementing an exterior lock, see Lock Mechanism (page 219), may wish
to allow control of the lock by all primary users of the home at any time. This user group has additional
authorization data 'A'. Another group of secondary users are only allowed control of the lock during specific
times of the day, for instance 9:00 AM to 6:00 PM; this user group has additional authorization data 'B'. When
a primary user's controller writes to the Target Lock State, Lock Target State (page 155), the controller will
include the additional authorization data 'A' along with the write request. The lock can verify that the controller
is authorized to perform the write operation at any time of the day based on the inclusion of additional
authorization data 'A'. However, if, for instance, a secondary user's controller attempts to write to the Target
Lock State at 10:00 PM, this write request will include the additional authorization data 'B', and the accessory
could then reject the write as not authorized at that time based on the inclusion of additional authorization
data 'B'.

2.3.4 Additional HomeKit Accessory Protocol Requirements
The following is a summary of additional HomeKit Accessory Protocol requirements

Table 2-1

Additional HomeKit Accessory Protocol Requirements

Feature

Primary Service

Linked Service

Hidden Service

Valid Values / Valid
Values range

Accessory Flags

Requirement

Description

Optional

Optional

Conditional

Conditional

Conditional

Accessories may choose to indicate a primary service

Mandatory if accessory exposes custom services for
proprietary controls on the accessory, optional
otherwise

Mandatory when a characteristic supports only a subset
of the Apple defined enum values, optional otherwise

Mandatory if accessory requires additional setup or
configuration using the accessory manufacturer’s app

2.4 Profiles
Profiles define the appropriate services and characteristics to be used to provide consistent behavior. For
example, a Light profile uses the Lightbulb (page 217) that requires a On (page 157) characteristic. The Light
profile takes services a step further by mandating that a light must stop illuminating entirely when the On (page
157) is set to a value of false.

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

28

2. Core Concepts
2.5 Roles

2.5 Roles

2.5.1 HAP Client
● Always the controller.

●

Send requests and receive responses from HAP accessory servers.
● Register for and receive notifications from HAP accessory servers.

2.5.2 HAP Accessory Server
An HAP accessory server is a device that supports HomeKit Accessory Protocol and exposes a collection of
accessories to the HAP controller(s). An HAP accessory server represents one endpoint of the pairing relationship
established with HAP Pairing, as described in Pairing (page 34) and exposes at least one HAP accessory object.
● Always the accessory.

●

Expose attributes that can be accessed by HAP clients.

● Accept incoming requests from clients and send responses.

●

Send notifications to registered clients.

2.5.3 HAP Accessory Objects
An HAP accessory object represents a physical accessory on an HAP accessory server. For example, a thermostat
would expose a single HAP accessory object that represents the user-addressable functionality of the thermostat.

2.5.3.1 Required Services
An HAP accessory object must include at least one service, public.hap.service.accessory-information, as defined
in the Apple-defined Profiles (page 237).

2.5.3.2 Bridges
A bridge is a special type of HAP accessory server that bridges HomeKit Accessory Protocol and different
RF/transport protocols, such as ZigBee or Z-Wave. A bridge must expose all the user-addressable functionality
supported by its connected devices as HAP accessory objects to the HAP controller(s). A bridge must ensure
that the instance ID assigned to the HAP accessory objects exposed on behalf of its connected devices do not
change for the lifetime of the server/client pairing.

For example, a bridge that bridges three lights would expose four HAP accessory objects: one HAP accessory
object that represents the bridge itself that may include a "firmware update" service, and three additional HAP
accessory objects that each contain a "lightbulb" service.

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

29

2. Core Concepts
2.6 Accessory Attribute Database

A bridge must not expose more than 100 HAP accessory objects.

Any accessories, regardless of transport, that enable physical access to the home, such as door locks, must not 
be bridged. Accessories that support IP transports, such as Wi-Fi, must not be bridged. Accessories that support 
Bluetooth LE that can be controlled, such as a light bulb, must not be bridged. Accessories that support 
Bluetooth LE that only provide data, such as a temperature sensor, and accessories that support other transports, 
such as a ZigBee light bulb or a proprietary RF sensor, may be bridged.

2.5.3.3 Primary HAP Accessory Object
The HAP accessory object with an instance ID of 1 is considered the primary HAP accessory object. For bridges, 
this must be the bridge itself.

2.5.3.4 Colocation
The services contained within an HAP accessory object must be collocated. For example, a fan with a light on 
it would expose single HAP accessory object with three services: the required "accessory information" service, 
a "fan" service, and a "lightbulb" service. Conversely, a bridge that bridges two independent lights that may 
be in different physical locations must expose an HAP accessory object for each independent light.

2.6 Accessory Attribute Database
The accessory attribute database is a list of HAP Accessory objects, Service objects, and Characteristic objects.

2.6.1 Instance IDs
Instance IDs are numbers with a range of [1, 18446744073709551615]. These numbers are used to uniquely 
identify HAP accessory objects within an HAP accessory server, or uniquely identify services, and characteristics 
within an HAP accessory object. The instance ID for each object must be unique for the lifetime of the server/
client pairing.

2.6.1.1 Accessory Instance IDs
Accessory instance IDs, "aid", are assigned from the same number pool that is global across entire HAP Accessory 
Server. For example, if the first Accessory object has an instance ID of "1" then no other Accessory object can 
have an instance ID of "1" within the Accessory Server.

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

30

2. Core Concepts
2.6 Accessory Attribute Database

2.6.1.2 Service and Characteristic Instance IDs
Service and Characteristic instance IDs, "iid", are assigned from the same number pool that is unique within
each Accessory object. For example, if the first Service object has an instance ID of "1" then no other Service
or Characteristic objects can have an instance ID of "1" within the parent Accessory object. The Accessory
Information service must have a service instance ID of 1.

After a firmware update services and characteristics types that remain unchanged must retain their previous
instance ids, newly added services and characteristics must not reuse instance ids from services and
characteristics that were removed in the firmware update.

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

31

3. Requirements

3.1 Overview
Accessories that support HomeKit Accessory Protocol (HAP) must conform to the following requirements along
with any feature specific requirements contained in their respective chapters.

3.2 General Requirements
An accessory that supports HAP:
● must be able to be setup using Home app out of the box and after every factory reset without requiring

additional steps.

●

Some accessories may require an additional physical step for setup through Accessory Flags (page
201).

● may expose other interfaces, such as a public API.

3.3 Wi-Fi Requirements

● Accessories which use Wi-Fi for HAP communication must be on the same Wi-Fi network as the

iOS device prior to HomeKit pairing.
The method to join the accessory to the Wi-Fi network will vary depending on the
development platform you are using.

●

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

32

3. Requirements
3.4 Firmware Updates

(cid:20)(cid:15)(cid:21)(cid:1)(cid:39)(cid:74)(cid:83)(cid:78)(cid:88)(cid:66)(cid:83)(cid:70)(cid:1)(cid:54)(cid:81)(cid:69)(cid:66)(cid:85)(cid:70)(cid:84)

● Accessories must not allow a firmware image to be downgraded after a successful firmware update.
● Accessories must increment the config(cid:3)number(cid:3)(CN) (For IP accessories refer to Discovery (page 68)

and for Bluetooth accessories refer to Manufacturer Data (page 124))after a firmware update.

● Accessories must maintain the instance ids for services and characteristics that remain unchanged after

a firmware update.

● Accessories must not reuse an instance id from a service or characteristics that was removed by the

current firmware update.

3.5 Coalescing Requirements
An accessory that supports multiple transports (eg. HomeKit Accessory Protocol for IP, HomeKit Accessory 
Protocol for Bluetooth LE) must ensure that the following information is same across the different transports:

●

●

●

The set of accessories and the accessory instance IDs of each of the accessories.
The set of services and the service instance IDs of each of the services with in an accessory.
The set of HAP characteristics and the HAP characteristic instance IDs of each of the characteristics with
in a service.

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

33

4. Pairing

4.1 Overview
This chapter describes the process of cryptographically pairing devices. It has the following features:

●

●

Provides end-to-end security without exposing secret information to external entities.
Secret keys are generated on the accessory and must not leave the accessory where they are used.

● Does not rely on link layer security (i.e. safe to run over open Wi-Fi networks).

●

●

Is transport neutral (e.g. can work over Wi-Fi/IP, Bluetooth, etc.).
Is practical to implement and is efficient even in resource-constrained accessories.

● Keys are revokable without cooperation from the peer.

4.2 Cryptographic Key Storage
Keys must be stored in a secure manner to prevent unauthorized access. Keys must not be accessible in any 
way from outside the device. The recommended mechanism is to generate, store, and operate on keys only 
within a Secure Element. The only operation requiring a secret key is signing and that can be performed inside 
the Secure Element to minimize attacks. Pairing also requires storing the public key of each paired peer. These 
keys, although public, must also be stored securely because they are used to verify pairing relationships. For 
example, insecure storage could allow a pairing to be added without going through the pair setup process or 
deny legitimate use of a pairing. If a device is physically reset, all cryptographic keys must be erased.

4.3 Setup Codes
The Setup Code must conform to the format XXX-XX-XXX where each X is a 0-9 digit and dashes are required. 
For example, "101-48-005" (without quotes). The accessory must generate its SRP verifier with the full Setup 
Code, including dashes.

4.3.1 Displaying Setup Codes
If an accessory can display a random Setup Code, it must conform to the following rules:

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

34

4. Pairing
4.3 Setup Codes

●

●

●

The accessory must generate a new Setup Code each time it is needed.
The accessory must generate Setup Codes from a cryptographically secure random number generator.
Setup codes must not be derived from public information, such as a serial number, manufacturer date,
MAC address, region of origin, etc.

If an accessory cannot display a random Setup Code for any reason then it must conform to the following rules:
● A random Setup Code must be generated for each individual accessory.

●

●

●

The setup code must be cryptographically secure random number generator.
The accessory must have SRP verifier for the Setup Code rather than the raw Setup Code.
Setup codes must not be derived from public information, such as a serial number, date of manufacture,
MAC address, region of origin, etc; this kind of information can often be determined by an attacker.

4.3.2 Invalid Setup Codes
The following Setup Codes must not be used due to their trivial, insecure nature:

●

●

●

●

●

●

●

●

●

●

●

●

000-00-000
111-11-111
222-22-222
333-33-333
444-44-444
555-55-555
666-66-666
777-77-777
888-88-888
999-99-999
123-45-678
876-54-321

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

35

4. Pairing
4.4 Admins

4.4 Admins
Admins are pairings that have the 'admin bit' set. Admins are exclusively authorized to add, remove, and list 
pairings. 

4.5 Device ID
Device(cid:3)ID of the accessory must be a unique random number generated at every factory reset and must 
persist across reboots.

4.6 Secure Remote Password (SRP)

4.6.1 SRP Modifications
Pairing uses Stanford's Secure Remote Password protocol with the following modifications:

● SHA-512 is used as the hash function, replacing SHA-1. If the SRP reference implementation provided by
Stanford is being used then the function that generates the Session Key, K, from the Premaster Secret, S,
must be changed from Mask Generation Function 1, t_mgf1(), to the specified hash function, SHA-512.
The Modulus, N, and Generator, g, are specified by the 3072-bit group of RFC 5054.

●

4.6.2 SRP Test Vectors
The following test vectors demonstrate calculation of the Verifier (v), Premaster Secret (S), and Session Key (K).

# Modulus (N), as specified by the 3072-bit group of RFC 5054
FFFFFFFF FFFFFFFF C90FDAA2 2168C234 C4C6628B 80DC1CD1 29024E08 8A67CC74
020BBEA6 3B139B22 514A0879 8E3404DD EF9519B3 CD3A431B 302B0A6D F25F1437
4FE1356D 6D51C245 E485B576 625E7EC6 F44C42E9 A637ED6B 0BFF5CB6 F406B7ED
EE386BFB 5A899FA5 AE9F2411 7C4B1FE6 49286651 ECE45B3D C2007CB8 A163BF05
98DA4836 1C55D39A 69163FA8 FD24CF5F 83655D23 DCA3AD96 1C62F356 208552BB
9ED52907 7096966D 670C354E 4ABC9804 F1746C08 CA18217C 32905E46 2E36CE3B
E39E772C 180E8603 9B2783A2 EC07A28F B5C55DF0 6F4C52C9 DE2BCBF6 95581718
3995497C EA956AE5 15D22618 98FA0510 15728E5A 8AAAC42D AD33170D 04507A33
A85521AB DF1CBA64 ECFB8504 58DBEF0A 8AEA7157 5D060C7D B3970F85 A6E1E4C7

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

36

4. Pairing
4.6 Secure Remote Password (SRP)

ABF5AE8C DB0933D7 1E8C94E0 4A25619D CEE3D226 1AD2EE6B F12FFA06 D98A0864
D8760273 3EC86A64 521F2B18 177B200C BBE11757 7A615D6C 770988C0 BAD946E2
08E24FA0 74E5AB31 43DB5BFC E0FD108E 4B82D120 A93AD2CA FFFFFFFF FFFFFFFF

# Generator (g), as specified by the 3072-bit group of RFC 5054
05

# Username (I), as an ASCII string without quotes
"alice"

# Password (p), as an ASCII string without quotes
"password123"

# A private (a)
60975527 035CF2AD 1989806F 0407210B C81EDC04 E2762A56 AFD529DD DA2D4393

# A public (A)
FAB6F5D2 615D1E32 3512E799 1CC37443 F487DA60 4CA8C923 0FCB04E5 41DCE628
0B27CA46 80B0374F 179DC3BD C7553FE6 2459798C 701AD864 A91390A2 8C93B644
ADBF9C00 745B942B 79F9012A 21B9B787 82319D83 A1F83628 66FBD6F4 6BFC0DDB
2E1AB6E4 B45A9906 B82E37F0 5D6F97F6 A3EB6E18 2079759C 4F684783 7B62321A
C1B4FA68 641FCB4B B98DD697 A0C73641 385F4BAB 25B79358 4CC39FC8 D48D4BD8
67A9A3C1 0F8EA121 70268E34 FE3BBE6F F89998D6 0DA2F3E4 283CBEC1 393D52AF
724A5723 0C604E9F BCE583D7 613E6BFF D67596AD 121A8707 EEC46944 95703368
6A155F64 4D5C5863 B48F61BD BF19A53E AB6DAD0A 186B8C15 2E5F5D8C AD4B0EF8
AA4EA500 8834C3CD 342E5E0F 167AD045 92CD8BD2 79639398 EF9E114D FAAAB919
E14E8509 89224DDD 98576D79 385D2210 902E9F9B 1F2D86CF A47EE244 635465F7
1058421A 0184BE51 DD10CC9D 079E6F16 04E7AA9B 7CF7883C 7D4CE12B 06EBE160
81E23F27 A231D184 32D7D1BB 55C28AE2 1FFCF005 F57528D1 5A88881B B3BBB7FE

# B private (b)
E487CB59 D31AC550 471E81F0 0F6928E0 1DDA08E9 74A004F4 9E61F5D1 05284D20

# B public (B)
40F57088 A482D4C7 733384FE 0D301FDD CA9080AD 7D4F6FDF 09A01006 C3CB6D56

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

37

4. Pairing
4.6 Secure Remote Password (SRP)

2E41639A E8FA21DE 3B5DBA75 85B27558 9BDB2798 63C56280 7B2B9908 3CD1429C
DBE89E25 BFBD7E3C AD3173B2 E3C5A0B1 74DA6D53 91E6A06E 465F037A 40062548
39A56BF7 6DA84B1C 94E0AE20 8576156F E5C140A4 BA4FFC9E 38C3B07B 88845FC6
F7DDDA93 381FE0CA 6084C4CD 2D336E54 51C464CC B6EC65E7 D16E548A 273E8262
84AF2559 B6264274 215960FF F47BDD63 D3AFF064 D6137AF7 69661C9D 4FEE4738
2603C88E AA098058 1D077584 61B777E4 356DDA58 35198B51 FEEA308D 70F75450
B71675C0 8C7D8302 FD7539DD 1FF2A11C B4258AA7 0D234436 AA42B6A0 615F3F91
5D55CC3B 966B2716 B36E4D1A 06CE5E5D 2EA3BEE5 A1270E87 51DA45B6 0B997B0F
FDB0F996 2FEE4F03 BEE780BA 0A845B1D 92714217 83AE6601 A61EA2E3 42E4F2E8
BC935A40 9EAD19F2 21BD1B74 E2964DD1 9FC845F6 0EFC0933 8B60B6B2 56D8CAC8
89CCA306 CC370A0B 18C8B886 E95DA0AF 5235FEF4 393020D2 B7F30569 04759042

# Salt (s)
BEB25379 D1A8581E B5A72767 3A2441EE

# Verifier (v)
9B5E0617 01EA7AEB 39CF6E35 19655A85 3CF94C75 CAF2555E F1FAF759 BB79CB47
7014E04A 88D68FFC 05323891 D4C205B8 DE81C2F2 03D8FAD1 B24D2C10 9737F1BE
BBD71F91 2447C4A0 3C26B9FA D8EDB3E7 80778E30 2529ED1E E138CCFC 36D4BA31
3CC48B14 EA8C22A0 186B222E 655F2DF5 603FD75D F76B3B08 FF895006 9ADD03A7
54EE4AE8 8587CCE1 BFDE3679 4DBAE459 2B7B904F 442B041C B17AEBAD 1E3AEBE3
CBE99DE6 5F4BB1FA 00B0E7AF 06863DB5 3B02254E C66E781E 3B62A821 2C86BEB0
D50B5BA6 D0B478D8 C4E9BBCE C2176532 6FBD1405 8D2BBDE2 C33045F0 3873E539
48D78B79 4F0790E4 8C36AED6 E880F557 427B2FC0 6DB5E1E2 E1D7E661 AC482D18
E528D729 5EF74372 95FF1A72 D4027717 13F16876 DD050AE5 B7AD53CC B90855C9
39566483 58ADFD96 6422F524 98732D68 D1D7FBEF 10D78034 AB8DCB6F 0FCF885C
C2B2EA2C 3E6AC866 09EA058A 9DA8CC63 531DC915 414DF568 B09482DD AC1954DE
C7EB714F 6FF7D44C D5B86F6B D1158109 30637C01 D0F6013B C9740FA2 C633BA89

# Random Scrambling Parameter (u)
03AE5F3C 3FA9EFF1 A50D7DBB 8D2F60A1 EA66EA71 2D50AE97 6EE34641 A1CD0E51
C4683DA3 83E8595D 6CB56A15 D5FBC754 3E07FBDD D316217E 01A391A1 8EF06DFF

# Premaster Secret (S)

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

38

4. Pairing
4.7 Pair Setup

F1036FEC D017C823 9C0D5AF7 E0FCF0D4 08B009E3 6411618A 60B23AAB BFC38339
72682312 14BAACDC 94CA1C53 F442FB51 C1B027C3 18AE238E 16414D60 D1881B66
486ADE10 ED02BA33 D098F6CE 9BCF1BB0 C46CA2C4 7F2F174C 59A9C61E 2560899B
83EF6113 1E6FB30B 714F4E43 B735C9FE 6080477C 1B83E409 3E4D456B 9BCA492C
F9339D45 BC42E67C E6C02C24 3E49F5DA 42A869EC 855780E8 4207B8A1 EA6501C4
78AAC0DF D3D22614 F531A00D 826B7954 AE8B14A9 85A42931 5E6DD366 4CF47181
496A9432 9CDE8005 CAE63C2F 9CA4969B FE840019 24037C44 6559BDBB 9DB9D4DD
142FBCD7 5EEF2E16 2C843065 D99E8F05 762C4DB7 ABD9DB20 3D41AC85 A58C05BD
4E2DBF82 2A934523 D54E0653 D376CE8B 56DCB452 7DDDC1B9 94DC7509 463A7468
D7F02B1B EB168571 4CE1DD1E 71808A13 7F788847 B7C6B7BF A1364474 B3B7E894
78954F6A 8E68D45B 85A88E4E BFEC1336 8EC0891C 3BC86CF5 00978801 78D86135
E7287234 58538858 D715B7B2 47406222 C1019F53 603F0169 52D49710 0858824C

# Session Key (K)
5CBC219D B052138E E1148C71 CD449896 3D682549 CE91CA24 F098468F 06015BEB
6AF245C2 093F98C3 651BCA83 AB8CAB2B 580BBF02 184FEFDF 26142F73 DF95AC50

4.7 Pair Setup
Pair Setup requires the user to enter the accessory's password on the iOS device to bidirectionally authenticate. 
The Pair Setup process follows the Secure Remote Password protocol. This process assumes that the accessory 
is unpaired and in a mode that enables pairing to be initiated.

All Pairing Identifiers in Pair Setup are case-sensitive.

Every accessory must support a manufacturer-defined mechanism to restore itself to a "factory reset" state 
where all pairing information is erased and restored to factory default settings. This mechanism should be 
easily accessible to a user, e.g, a physical button or a reset code.

Note: The C functions referenced in this section refer to the SRP C API defined by http://srp.stanford.edu. If you 
are using a different SRP implementation then you'll need to use the equivalent functions in your library.

4.7.1 M1: iOS Device -> Accessory -- `SRP Start Request'
The iOS device sends a request to the accessory with the following TLV items:

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

39

4. Pairing
4.7 Pair Setup

kTLVType_State

<M1>

kTLVType_Method

<Pair Setup>

4.7.2 M2: Accessory -> iOS Device -- `SRP Start Response'
When the accessory receives <M1>, it must perform the following steps:
1.

If the accessory is already paired it must respond with the following TLV items:

kTLVType_State

<M2>

kTLVType_Error
If the accessory has received more than 100 unsuccessful authentication attempts it must respond with
the following TLV items:

<kTLVError_Unavailable>

kTLVType_State

<M2>

kTLVType_Error
If the accessory is currently performing a Pair Setup operation with a different controller it must respond
with the following TLV items:

<kTLVError_MaxTries>

2.

3.

kTLVType_State

<M2>

kTLVType_Error

<kTLVError_Busy>

Set SRP username to Pair-Setup with SRP_set_username().

4. Create new SRP session with SRP_new( SRP6a_server_method() ).
5.
6. Generate 16 bytes of random salt and set it with SRP_set_params().
7.

If the accessory can display a random setup code then it must generate a random setup code and set it
with SRP_set_auth_password().
If the accessory cannot display a random setup code then it must retrieve the SRP verifier for the Setup
Code, e.g. from an EEPROM, and set the verifier with SRP_set_authenticator().
The Setup Code must conform to the format XXX-XX-XXX where each X is a 0-9 digit and dashes are
required. See Section Setup Codes (page 34) for more information.
Present the Setup Code to the user, e.g. display it on the accessory's screen. If the accessory doesn't have
a screen then the Setup Code may be on a printed label.

8.

9. Generate an SRP public key with SRP_gen_pub().

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

40

4. Pairing
4.7 Pair Setup

10. Respond to the iOS device's request with the following TLV items:

kTLVType_State

<M2>

kTLVType_PublicKey

<Accessory's SRP public key>

kTLVType_Salt

<16 byte salt generated in Step 6>

Create a new SRP session with SRP_new( SRP6a_client_method() ).
Set the SRP username to Pair-Setup with SRP_set_username().
Set salt provided by the accessory in the <M2> TLV with SRP_set_params().

4.7.3 M3: iOS Device -> Accessory -- `SRP Verify Request'
When the iOS device receives <M2>, it will check for kTLVType_Error. If present, the iOS device will abort
the setup process and report the error to the user. If kTLVType_Error is not present, the user is prompted
to enter the Setup Code provided by the accessory. Once the user has entered the Setup Code, the iOS device
performs the following steps:
1.
2.
3.
4. Generate its SRP public key with SRP_gen_pub().
5.
6. Compute the SRP shared secret key with SRP_compute_key().
7. Generate iOS device-side SRP proof with SRP_respond().
8.

Set the Setup Code as entered by the user with SRP_set_auth_password().

Send a request to the accessory with the following TLV items:

kTLVType_State

<M3>

kTLVType_PublicKey

<iOS device's SRP public key>

kTLVType_Proof

<iOS device's SRP proof>

4.7.4 M4: Accessory -> iOS Device -- `SRP Verify Response'
When the accessory receives <M3>, it must perform the following steps:
1. Use the iOS device's SRP public key to compute the SRP shared secret key with SRP_compute_key().
Verify the iOS device's SRP proof with SRP_verify(). If verification fails, the accessory must respond
2.
with the following TLV items:

kTLVType_State

<M4>

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

41

4. Pairing
4.7 Pair Setup

kTLVType_Error

kTLVError_Authentication

3. Generate the accessory-side SRP proof with SRP_respond().

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

42

4. Pairing
4.7 Pair Setup

4. Construct the response with the following TLV items:

kTLVType_State

kTLVType_Proof

<M4>

<Accessory's SRP proof>

5. Send the response to the iOS device.

4.7.5 M5: iOS Device -> Accessory -- `Exchange Request'

4.7.5.1 <M4>(cid:3)Verification
When the iOS device receives <M4>, it performs the following steps:
1.

Check for kTLVType_Error. If present and it's set to kTLVError_Authentication, the user will be
prompted that the Setup Code was incorrect and allowed to try again. If kTLVType_Error is set to any
other error code, then the setup process will be aborted and an error will be reported to the user. The
accessory resets to <M1> for Pair Setup.
Verify accessory's SRP proof with SRP_verify(). If this fails, the setup process will be aborted and an
error will be reported to the user.

2.

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

43

4. Pairing
4.7 Pair Setup

4.7.5.2 <M5> Request Generation
Once <M4> Verification is complete, the iOS device performs the following steps to generate the <M5> request:
1. Generate its Ed25519 long-term public key, iOSDeviceLTPK, and long-term secret key, iOSDeviceLTSK,

if they don't exist.

2. Derive iOSDeviceX from the SRP shared secret by using HKDF-SHA-512 with the following parameters:

InputKey

= <SRP shared secret>

Salt

Info

= "Pair-Setup-Controller-Sign-Salt"

= "Pair-Setup-Controller-Sign-Info"

OutputSize

= 32 bytes

3.

Concatenate iOSDeviceX with the iOS device's Pairing Identifier, iOSDevicePairingID, and its long-term
public key, iOSDeviceLTPK. The data must be concatenated in order such that the final data is
iOSDeviceX, iOSDevicePairingID, iOSDeviceLTPK. The concatenated value will be referred to
as iOSDeviceInfo.

4. Generate iOSDeviceSignature by signing iOSDeviceInfo with its long-term secret key,

iOSDeviceLTSK, using Ed25519.
Construct a sub-TLV with the following TLV items:

5.

kTLVType_Identifier

<iOSDevicePairingID>

kTLVType_PublicKey

<iOSDeviceLTPK>

kTLVType_Signature

<iOSDeviceSignature>

6.

7.

Encrypt the sub-TLV, encryptedData, and generate the 16 byte auth tag, authTag. This uses the
ChaCha20-Poly1305 AEAD algorithm with the following parameters:
encryptedData, authTag = ChaCha20-Poly1305(SessionKey, Nonce="PS-Msg05",
AAD=<none>, Msg=<Sub-TLV>)
Send the request to the accessory with the following TLV items:

kTLVType_State

<M5>

kTLVType_EncryptedData

<encryptedData with authTag appended>

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

44

4. Pairing
4.7 Pair Setup

4.7.6 M6: Accessory -> iOS Device -- `Exchange Response'

4.7.6.1 <M5> Verification
When the accessory receives <M5>, it must perform the following steps:
1.

Verify the iOS device's authTag, which is appended to the encryptedData and contained within the
kTLVType_EncryptedData TLV item, from encryptedData. If verification fails, the accessory must
respond with the following TLV items:

kTLVType_State

<M6>

kTLVType_Error

kTLVError_Authentication

2. Decrypt the sub-TLV in encryptedData. If decryption fails, the accessory must respond with the following

TLV items:

kTLVType_State

<M6>

kTLVType_Error

kTLVError_Authentication

3. Derive iOSDeviceX from the SRP shared secret by using HKDF-SHA-512 with the following parameters:

InputKey

= <SRP shared secret>

Salt

Info

= "Pair-Setup-Controller-Sign-Salt"

= "Pair-Setup-Controller-Sign-Info"

OutputSize

= 32 bytes

4. Construct iOSDeviceInfo by concatenating iOSDeviceX with the iOS device's Pairing Identifier,

iOSDevicePairingID, from the decrypted sub-TLV and the iOS device's long-term public key,
iOSDeviceLTPK from the decrypted sub-TLV. The data must be concatenated in order such that the final
data is iOSDeviceX, iOSDevicePairingID, iOSDeviceLTPK.

5. Use Ed25519 to verify the signature of the constructed iOSDeviceInfo with the iOSDeviceLTPK from
the decrypted sub-TLV. If signature verification fails, the accessory must respond with the following TLV
items:

kTLVType_State

<M6>

kTLVType_Error

kTLVError_Authentication

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

45

4. Pairing
4.7 Pair Setup

6.

Persistently save the iOSDevicePairingID and iOSDeviceLTPK as a pairing. If the accessory cannot
accept any additional pairings, it must respond with the following TLV items:

kTLVType_State

<M6>

kTLVType_Error

kTLVError_MaxPeers

4.7.6.2 <M6> Response Generation
Once <M5> Verification is complete, the accessory must perform the following steps to generate the <M6>
response:
1. Generate its Ed25519 long-term public key, AccessoryLTPK, and long-term secret key, AccessoryLTSK,

if they don't exist.

2. Derive AccessoryX from the SRP shared secret by using HKDF-SHA-512 with the following parameters:

InputKey

= <SRP shared secret>

Salt

Info

= "Pair-Setup-Accessory-Sign-Salt"

= "Pair-Setup-Accessory-Sign-Info"

OutputSize

= 32 bytes

3.

Concatenate AccessoryX with the accessory's Pairing Identifier, AccessoryPairingID, and its long-term
public key, AccessoryLTPK. The data must be concatenated in order such that the final data is
AccessoryX, AccessoryPairingID, AccessoryLTPK. The concatenated value will be referred to
as AccessoryInfo.

4. Use Ed25519 to generate AccessorySignature by signing AccessoryInfo with its long-term secret

key, AccessoryLTSK.
Construct the sub-TLV with the following TLV items:

5.

kTLVType_Identifier

<AccessoryPairingID>

kTLVType_PublicKey

<AccessoryLTPK>

kTLVType_Signature

<AccessorySignature>

6.

Encrypt the sub-TLV, encryptedData, and generate the 16 byte auth tag, authTag. This uses the
ChaCha20-Poly1305 AEAD algorithm with the following parameters:
encryptedData, authTag = ChaCha20-Poly1305(SessionKey, Nonce="PS-Msg06",
AAD=<none>, Msg=<Sub-TLV>)

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

46

4. Pairing
4.8 Pair Verify

7.

Send the response to the iOS device with the following TLV items:

kTLVType_State

<M6>

kTLVType_EncryptedData

<encryptedData with authTag appended>

4.7.6.3 <M6> Verification by iOS Device
When the iOS device receives <M6>, it performs the following steps:
1.

Verifies authTag, which is appended to the encryptedData and contained within the
kTLVType_EncryptedData TLV item, from encryptedData. If this fails, the setup process will be aborted
and an error will be reported to the user.

2. Decrypts the sub-TLV in encryptedData. If this fails, the setup process will be aborted and an error will

be reported to the user.

3. Uses Ed25519 to verify the signature of AccessoryInfo using AccessoryLTPK. If this fails, the setup

process will be aborted and an error will be reported to the user.
Persistently saves AccessoryPairingID and AccessoryLTPK as a pairing.

4.

Pair Setup is now complete.

4.8 Pair Verify
Once a pairing has been established, it must be verified each time it is used. Pair Verify uses the Station-to-Station
protocol to perform bidirectional authentication and results in a mutually authenticated shared secret for
future session security.

All Pairing Identifiers in pair verify are case-sensitive.

The following describes the flow of messages to verify pairing.

4.8.1 M1: iOS Device -> Accessory -- `Verify Start Request'
The iOS device generates a new, random Curve25519 key pair and sends a request to the accessory with the
following TLV items:

kTLVType_State

<M1>

kTLVType_PublicKey

<iOS device's Curve25519 public key>

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

47

4. Pairing
4.8 Pair Verify

4.8.2 M2: Accessory -> iOS Device -- `Verify Start Response'
When the accessory receives <M1>, it must perform the following steps:
1. Generate new, random Curve25519 key pair.
2. Generate the shared secret, SharedSecret, from its Curve25519 secret key and the iOS device's Curve25519

3.

public key.
Construct AccessoryInfo by concatenating the following items in order:
a. Accessory's Curve25519 public key.
b. Accessory's Pairing Identifier, AccessoryPairingID.
c.

iOS device's Curve25519 public key from the received <M1> TLV.

4. Use Ed25519 to generate AccessorySignature by signing AccessoryInfo with its long-term secret

key, AccessoryLTSK.
Construct a sub-TLV with the following items:

5.

kTLVType_Identifier

<AccessoryPairingID>

kTLVType_Signature

<AccessorySignature>

6. Derive the symmetric session encryption key, SessionKey, from the Curve25519 shared secret by using

HKDF-SHA-512 with the following parameters:

InputKey

= <Curve25519 shared secret>

Salt

Info

= "Pair-Verify-Encrypt-Salt"

= "Pair-Verify-Encrypt-Info"

OutputSize

= 32 bytes

7.

Encrypt the sub-TLV, encryptedData, and generate the 16-byte auth tag, authTag. This uses the
ChaCha20-Poly1305 AEAD algorithm with the following parameters:
encryptedData, authTag = ChaCha20-Poly1305(SessionKey, Nonce="PV-Msg02",
AAD=<none>, Msg=<Sub-TLV>)

8. Construct the response with the following TLV items:

kTLVType_State

<M2>

kTLVType_PublicKey

<Accessory's SRP proof>

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

48

4. Pairing
4.8 Pair Verify

kTLVType_EncryptedData

<encryptedData with authTag appended>

9.

Send the response to the iOS device.

4.8.3 M3: iOS Device -> Accessory -- `Verify Finish Request'
When the iOS device receives <M2>, it performs the following steps:
1. Generate the shared secret, SharedSecret, from its Curve25519 secret key and the accessory's Curve25519

public key.

2. Derive the symmetric session encryption key, SessionKey, in the same manner as the accessory.
3.

Verify the 16-byte auth tag, authTag, against the received encryptedData. If this fails, the setup process
will be aborted and an error will be reported to the user.
4. Decrypt the sub-TLV from the received encryptedData.
5. Use the accessory's Pairing Identifier to look up the accessory's long-term public key, AccessoryLTPK,
in its list of paired accessories. If not found, the setup process will be aborted and an error will be reported
to the user.

6. Use Ed25519 to verify AccessorySignature using AccessoryLTPK against AccessoryInfo. If this

7.

fails, the setup process will be aborted and an error will be reported to the user.
Construct iOSDeviceInfo by concatenating the following items in order:
a.
b.
c.

iOS Device's Curve25519 public key.
iOS Device's Pairing Identifier, iOSDevicePairingID.
Accessory's Curve25519 public key from the received <M2> TLV.

8. Use Ed25519 to generate iOSDeviceSignature by signing iOSDeviceInfo with its long-term secret

key, iOSDeviceLTSK.
Construct a sub-TLV with the following items:

9.

kTLVType_Identifier

<iOSDevicePairingID>

kTLVType_Signature

<iOSDeviceSignature>

10. Encrypt the sub-TLV, encryptedData, and generate the 16-byte auth tag, authTag. This uses the

ChaCha20-Poly1305 AEAD algorithm with the following parameters:
encryptedData, authTag = ChaCha20-Poly1305(SessionKey, Nonce="PV-Msg03",
AAD=<none>, Msg=<Sub-TLV>)

11. Construct the request with the following TLV items:

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

49

4. Pairing
4.8 Pair Verify

kTLVType_State

<M3>

kTLVType_EncryptedData

<encryptedData with authTag appended>

12. Send the request to the accessory.

4.8.4 M4: Accessory -> iOS Device -- `Verify Finish Response'
When the accessory receives <M3>, it must perform the following steps:
1.

Verify the iOS device's authTag, which is appended to the encryptedData and contained within the
kTLVType_EncryptedData TLV item, against encryptedData. If verification fails, the accessory must
respond with the following TLV items:

kTLVType_State

<M4>

kTLVType_Error

kTLVError_Authentication

2. Decrypt the sub-TLV in encryptedData. If decryption fails, the accessory must respond with the following

TLV items:

kTLVType_State

<M4>

kTLVType_Error

kTLVError_Authentication

3. Use the iOS device's Pairing Identifier, iOSDevicePairingID, to look up the iOS device's long-term public

key, iOSDeviceLTPK, in its list of paired controllers. If not found, the accessory must respond with the
following TLV items:

kTLVType_State

<M4>

kTLVType_Error

kTLVError_Authentication

4. Use Ed25519 to verify iOSDeviceSignature using iOSDeviceLTPK against iOSDeviceInfo contained

in the decrypted sub-TLV. If decryption fails, the accessory must respond with the following TLV items:

kTLVType_State

<M4>

kTLVType_Error

kTLVError_Authentication

5.

Send the response to the iOS device with the following TLV items:

kTLVType_State

<M4>

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

50

4. Pairing
4.9 Fragmentation and Reassembly

When the iOS device receives <M4>, the Pair Verify process is complete. If a subsequent Pair Verify request
from another controller occurs in the middle of a Pair Verify transaction the accessory must honor both Pair
Verify requests and maintain separate secure sessions for each controller. If a subsequent Pair Verify request
from the same controller occurs in the middle of the Pair Verify process then the accessory must immediately
tear down the existing session with the controller and must accept the newest request.

4.9 Fragmentation and Reassembly
Some transports, like Bluetooth LE, have limits on the maximum amount of data that can be exchanged per
transaction. To support these transports, pairing requests and responses may need to be fragmented when
sent and reassembled when received. All fragments except the last must use the kTLVType_FragmentData
TLV type. The last fragment must use the kTLVType_FragmentLast TLV type.

The "value" of these TLV items is the next portion of data from the original pairing TLV that will fit in the current
MTU. When a non-last fragment is received, it is appended to the reassembly buffer and a
kTLVType_FragmentData item is sent back with an empty "value" section. This acknowledges the fragment
so the next fragment can be sent.

When the last fragment is received, the reassembled TLV is processed normally. Fragments must be sent and
received in order. Fragmentation may occur on a per-request/response basis. Requests or responses that fit
within the MTU of the transport must be sent as-is and not fragmented.

4.10 AEAD Algorithm
When data is encrypted or decrypted, it uses the ChaCha20-Poly1305 AEAD algorithm as defined in RFC 7539.
This document uses the 64-bit nonce option where the first 32 bits of 96-bit nonce are 0.

4.11 Add Pairing
This is used to exchange long-term public keys to establish a pairing relationship for an additional controller.
Add Pairing can only be performed by admin controllers, that have established a secure session with the
accessory using the Pair Verify (page 47) procedure. Authenticated encryption is used for all encrypted data.

The minimum number of pairing relationships that an accessory must support is 16.

4.11.1 M1: iOS Device -> Accessory -- `Add Pairing Request'
The iOS device performs the following steps:

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

51

4. Pairing
4.11 Add Pairing

1. Get the Pairing Identifier, AdditionalControllerPairingIdentifier, and the Ed25519 long-term

public key of the additional controller to pair, AdditionalControllerLTPK, via an out-of-band
mechanism.

2. Construct the request TLV with the following items:

kTLVType_State

<M1>

kTLVType_Method

<Add Pairing>

kTLVType_Identifier

AdditionalControllerPairingIdentifier

kTLVType_PublicKey

AdditionalControllerLTPK

kTLVType_Permissions

AdditionalControllerPermissions

3.

Send the TLV over the HAP session established via Pair Verify (page 47), which provides bidirectional,
authenticated encryption.

4.11.2 M2: Accessory -> iOS Device -- `Add Pairing Response'
When the accessory receives the request, it must perform the following steps:
1.

Validate the received data against the established HAP session as described in the transport-specific
chapters.
Verify that the controller sending the request has the admin bit set in the local pairings list. If not, accessory
must abort and respond with the following TLV items:

2.

3.

kTLVType_State

<M2>

kTLVType_Error

kTLVError_Authentication

If a pairing for AdditionalControllerPairingIdentifier exists, it must perform the following steps:
a.

If the AdditionalControllerLTPK does not match the stored long-term public key for
AdditionalControllerPairingIdentifier, respond with the following TLV items:

kTLVType_State

<M2>

kTLVType_Error

kTLVError_Unknown

b. Update the permissions of the controller to match AdditionalControllerPermissions.

4. Otherwise, if a pairing for AdditionalControllerPairingIdentifier does not exist, it must perform

the following steps:

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

52

4. Pairing
4.12 Remove Pairing

a.

Check if the accessory has space to support an additional pairing; the minimum number of supported
pairings is 16 pairings. If not, accessory must abort and respond with the following TLV items:

kTLVType_State

<M2>

kTLVType_Error

kTLVError_MaxPeers

b.

Save the additional controller's AdditionalControllerPairingIdentifier,
AdditionalControllerLTPK and AdditionalControllerPermissions to a persistent store.
If an error occurs while saving, accessory must abort and respond with the following TLV items:

kTLVType_State

<M2>

kTLVType_Error

kTLVError_Unknown

5.

Construct a response with the following TLV items:

kTLVType_State

<M2>

6.

Send the response over the HAP session established via Pair Verify (page 47), which provides bidirectional,
authenticated encryption.

When the iOS device receives this response, it performs the following steps:
1.
2.
3.

Validate the received data against the established HAP session.
Validate that the received TLV contains no errors.
Send the accessory's long-term public key and Pairing Identifier to the additional controller via an
out-of-band mechanism.

4.12 Remove Pairing
This is used to remove a previously established pairing. Remove Pairing can only be performed by admin
controllers, that have established a secure session with the accessory using the Pair Verify (page 47) procedure.
Authenticated encryption is used for all encrypted data.

After a remove pairing is completed, the accessory must tear down any existing connections with the removed
controller within 5 seconds. Until those existing connections are closed, the accessory must refuse any requests,
by returning the appropriate transport specific HAP Status codes in the response:
1.
2.

IP: -70401 (Table 5-12 (page 80))
BTLE: 0x03 (Table 6-26 (page 116))

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

53

4. Pairing
4.12 Remove Pairing

If the last remaining admin controller pairing is removed, all pairings on the accessory must be removed.

4.12.1 M1: iOS Device -> Accessory -- `Remove Pairing Request'
The iOS device performs the following steps:
1. Get the Pairing Identifier of the additional controller to remove,

RemovedControllerPairingIdentifier, via an out-of-band mechanism.

2. Construct the request TLV with the following items:

kTLVType_State

<M1>

kTLVType_Method

<Remove Pairing>

kTLVType_Identifier

RemovedControllerPairingIdentifier

3.

Send the TLV over the HAP session established via Pair Verify (page 47), which provides bidirectional,
authenticated encryption.

4.12.2 M2: Accessory -> iOS Device -- `Remove Pairing Response'
When the accessory receives the request, it must perform the following steps:
1.

Validate the received data against the established HAP session as described in the transport-specific
chapters.
Verify that the controller sending the request has the admin bit set in the local pairings list. If not, accessory
must abort and respond with the following TLV items:

2.

3.

kTLVType_State

<M2>

kTLVType_Error

kTLVError_Authentication

If the pairing exists, remove RemovedControllerPairingIdentifier and its corresponding long-term
public key from persistent storage. If a pairing for RemovedControllerPairingIdentifier does not
exist, the accessory must return success. Otherwise, if an error occurs during removal, accessory must
abort and respond with the following TLV items:

kTLVType_State

<M2>

kTLVType_Error

kTLVError_Unknown

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

54

4. Pairing
4.13 List Pairings

4. Construct a response with the following TLV items:

kTLVType_State

<M2>

5.

6.

7.

Send the response over the HAP session established via Pair Verify (page 47), which provides bidirectional,
authenticated encryption.
If the controller requested the accessory to remove its own pairing the accessory must invalidate the HAP
session immediately after the response is sent.
If there are any established HAP sessions with the controller that was removed, then these connections
must be immediately torn down.

4.13 List Pairings
This is used to read a list of all the currently established pairings. List Pairings can only be performed by
controllers that have been through Pair Setup (page 39) with the accessory and have established a shared
secret via Pair Verify (page 47). Authenticated encryption is used for all encrypted data.

This is used to read a list of all the currently established pairings. It's a read with a response over an HAP session
established via Pair Verify (page 47), which provides bidirectional, authenticated encryption. The response is
a group of TLV items with separator items to delineate them. Each pairing entry must be comprised of the
following TLV items:

kTLVType_Identifier

<Pairing Identifier of Controller 1>

kTLVType_PublicKey

<Ed25519 long-term public key of Controller 1>

kTLVType_Permissions

<Bit value describing permissions of Controller 1>

4.13.1 M1: iOS Device -> Accessory -- `List Pairings Request'
The iOS device performs the following steps:
1.

Construct the request TLV with the following items:

kTLVType_State

<M1>

kTLVType_Method

<List Pairings>

2.

Send the TLV over the HAP session established via Pair Verify (page 47), which provides bidirectional,
authenticated encryption.

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

55

4. Pairing
4.14 Pairing over Bluetooth LE

4.13.2 M2: Accessory -> iOS Device -- `List Pairings Response'
When the accessory receives the request, it must perform the following steps:
1.

Validate the received data against the established HAP session as described in the transport-specific
chapters.
Verify that the controller sending the request has the admin bit set in the local pairings list. If not, abort
and respond with the following TLV items:

2.

kTLVType_State

<M2>

kTLVType_Error

kTLVError_Authentication

3.

Construct a response with the following TLV items:

kTLVType_State

<M2>

kTLVType_Identifier

<Pairing Identifier of Controller 1>

kTLVType_PublicKey

<Ed25519 long-term public key of Controller 1>

kTLVType_Permissions
If another pairing follows a pairing then it must be separated using a separator item:

<Bit value describing permissions of Controller 1>

kTLVType_Separator
Additional pairings must contain the following TLV items:

<No value>

kTLVType_Identifier

<Pairing Identifier of Controller N>

kTLVType_PublicKey

<Ed25519 long-term public key of Controller N>

kTLVType_Permissions

<Bit value describing permissions of Controller N>

4.

Send the response over the HAP session established via Pair Verify (page 47), which provides bidirectional,
authenticated encryption.

4.14 Pairing over Bluetooth LE
When pairing over Bluetooth LE, the accessory advertises a pairing service. Pairing requests are performed by
writing to characteristics of this service. Pairing responses are performed by subsequently reading characteristics
of this service. The read response must be sent within 30 seconds of the read request. The maximum payload

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

56

4. Pairing
4.14 Pairing over Bluetooth LE

size for an HAP Characteristic value over HAP Bluetooth LE must not exceed 512 bytes Maximum Payload
Size (page 123). Pairing payloads with certificates will exceed 512 bytes and require payload fragmentation to
be delivered, therefore accessories must support fragmentation per Fragmentation and Reassembly (page
51).

4.14.1 Pairing Service
Defines characteristics to support pairing between a controller and an accessory.

Property

UUID

Type

Required Characteristics

Pairing Pairings (page 58)

Value

00000055-0000-1000-8000-0026BB765291

public.hap.service.pairing

Pair Setup (page 57)

Pair Verify (page 57)

Pairing Features (page 58)

4.14.1.1 Pair Setup
Accessories must accept reads and writes to this characteristic to perform Pair Setup.

Property

Value

UUID

Type

0000004C-0000-1000-8000-0026BB765291

public.hap.characteristic.pairing.pair-setup

Permissions

Read, Write

Format

tlv8

4.14.1.2 Pair Verify
Accessories must accept reads and writes to this characteristic to perform Pair Verify.

Property

UUID

Value

0000004E-0000-1000-8000-0026BB765291

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

57

4. Pairing
4.14 Pairing over Bluetooth LE

Property

Value

Type

public.hap.characteristic.pairing.pair-verify

Permissions

Read, Write

Format

tlv8

4.14.1.3 Pairing Features
Read-only characteristic that exposes pairing features must be supported by the accessory. See Table 4-1 (page
58).

Property

Value

UUID

Type

0000004F-0000-1000-8000-0026BB765291

public.hap.characteristic.pairing.features

Permissions

Format

Read

uint8

Table 4-1

Bluetooth LE Feature Flags

Mask

0x01

0x02-0x80

Bit

1

2-8

Descrption

Supports HAP Pairing. Required.

Reserved.

4.14.1.4 Pairing Pairings
Accessories must accept reads and writes to this characteristic to add, remove, and list pairings.

Property

Value

UUID

Type

00000050-0000-1000-8000-0026BB765291

public.hap.characteristic.pairing.pairings

Permissions

Paired Read, Paired Write

Format

tlv8

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

58

4. Pairing
4.15 Pairing over IP

4.15 Pairing over IP
When pairing over an IP network, HTTP is used as the transport. Pairing requests are performed by sending a
POST request to the accessory's HTTP server unless otherwise noted. The URL resource specifies the pairing
operation to perform. The body of the HTTP request contains the TLV data. Pairing responses are delivered as
TLV data in the body of the HTTP response. The MIME type for requests and responses is
application/pairing+tlv8. Discovery of the HTTP server's IP address, port, and supported features is
required to be supported via Bonjour, please see the HomeKit Accessory Protocol for IP Accessories (page 62).

Table 4-2

HTTP Status Codes

Status Code

200 OK

400 Bad Request

405 Method Not Allowed

429 Too Many Requests

Description

Success.

Generic error for a problem with the request, e.g. bad TLV, state
error, etc.

Wrong HTTP request method, e.g. GET when expecting POST.

Server cannot handle any more requests of this type, e.g.
attempt to pair while already pairing.

470 Connection Authorization
Required

Request to secure resource made without establishing security,
e.g. didn't perform Pair Verify.

500 Internal Server Error

Server had a problem, e.g. ran out of memory.

Table 4-3

HTTP URLs

Status Code

Description

/pair-setup

Used for Pair Setup.

/pair-verify

Used for Pair Verify.

/pairings

Used for adding, removing, and listing pairings. Always sends HTTP POST with TLV8
payloads defined in Add Pairing (page 51), Remove Pairing (page 53), and List
Pairings (page 55).

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

59

4. Pairing
4.16 Methods, Error Codes, and TLV Values

4.16 Methods, Error Codes, and TLV Values

Table 4-4

Methods

Value

Description

0

1

2

3

4

5

Reserved.

Pair Setup.

Pair Verify.

Add Pairing.

Remove Pairing.

List Pairings.

6-255

Reserved.

Table 4-5

Error Codes

Value

0x00

0x01

0x02

0x03

0x04

0x05

0x06

0x07

Name

n/a

Description

Reserved.

kTLVError_Unknown

Generic error to handle unexpected errors.

kTLVError_Authentication

Setup code or signature verification failed.

kTLVError_Backoff

Client must look at the retry delay TLV item and
wait that many seconds before retrying.

kTLVError_MaxPeers

Server cannot accept any more pairings.

kTLVError_MaxTries

Server reached its maximum number of
authentication attempts.

kTLVError_Unavailable

Server pairing method is unavailable.

kTLVError_Busy

Server is busy and cannot accept a pairing request
at this time.

0x08-0xFF

n/a

Reserved.

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

60

4. Pairing
4.16 Methods, Error Codes, and TLV Values

Table 4-6

TLV Values

Type

0x00

0x01

0x02

0x03

0x04

0x05

0x06

0x07

0x08

0x09

0x0A

Name

kTLVType_Method

kTLVType_Identifier

kTLVType_Salt

kTLVType_PublicKey

kTLVType_Proof

kTLVType_EncryptedData

kTLVType_State

kTLVType_Error

Format

integer

UTF-8

bytes

bytes

bytes

bytes

integer

integer

Description

Method to use for pairing. See Table 4-4 (page
60).

Identifier for authentication.

16+ bytes of random salt.

Curve25519, SRP public key, or signed Ed25519
key.

Ed25519 or SRP proof.

Encrypted data with auth tag at end.

State of the pairing process. 1=M1, 2=M2, etc.

Error code. Must only be present if error code is
not 0. See Table 4-5 (page 60).

kTLVType_RetryDelay

integer

Seconds to delay until retrying a setup code.

kTLVType_Certificate

kTLVType_Signature

bytes

bytes

X.509 Certificate.

Ed25519 

0x0B

kTLVType_Permissions

integer

0x0C

kTLVType_FragmentData

bytes

0x0D

0xFF

kTLVType_FragmentLast

kTLVType_Separator

bytes

null

Bit value describing permissions of the controller
being added.
None (0x00) : Regular user
Bit 1 (0x01) : Admin that is able to add and
remove pairings against the accessory.

Non-last fragment of data. If length is 0, it's an
ACK.

Last fragment of data.

Zero-length TLV that separates different TLVs in
a list.

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

61

5. HomeKit Accessory Protocol for IP Accessories

5.1 Overview
This chapter describes the HomeKit Accessory Protocol (HAP) for IP accessories.

5.2 Requirements

5.2.1 IP Requirements
● HAP accessory servers must support IPv4.
● HAP accessory servers must act as a DHCPv4 client.
● HAP accessory servers may support static IPv4 addresses.
● HAP accessory servers must support link-local IPv4 addressing as described in RFC 3927.
● HAP accessory servers must support link-local IPv6 addressing as described in RFC 4862.
● HAP accessory servers must support simultaneous IPv4 and IPv6 connections.

5.2.2 Bonjour Requirements
Refer to the Bonjour for Developers webpage for Bonjour source code and specifications.
● HAP accessory servers must support Multicast DNS host names, e.g. "lights.local".
● HAP accessory servers must handle name collisions as described in Section 9 of RFC 6762.
● HAP accessory servers must support advertising a DNS service that includes a TXT record with multiple

keys as described in Section 6 of RFC 6763.

● HAP accessory servers must pass the Bonjour Conformance Test, which is available at https://

developer.ap-ple.com/softwarelicensing/agreements/bonjour.php. The HAP accessory server must pass
the following tests and all of the associated subtests:

Link-local Address Allocation
IPv4 Multicast-DNS
IPv6 Multicast-DNS

●

●

●

● Mixed-network Interoperability

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

62

5. HomeKit Accessory Protocol for IP Accessories
5.3 HAP Objects

5.2.3 TCP Requirements
● HAP accessory servers must support eight simultaneous TCP connections.
● HAP accessory servers must always be able to accommodate new incoming TCP connections.

5.2.4 HTTP Server Requirements

●

●

●

The HTTP server must be HTTP/1.1 compliant as described in RFC 7230 and RFC 7231.
The HTTP server must support persistent connections, i.e. multiple HTTP requests through single TCP
connection, as described in Section 6.3 of RFC 7230.
The HTTP server must support the HTTP URLs summarized in Table 5-15 (page 91) to service HAP clients.

5.2.5 Application Requirements
● HAP accessory servers must be able to receive and process HAP requests at any time once the HAP Bonjour

service has been registered.

● HAP accessory servers must support parsing and generating JavaScript Object Notation (JSON) as described

in RFC 7159.

● HAP accessory servers must encode JSON in UTF-8.
● HAP accessory servers must support multiple connections.

5.2.6 General Requirements
● HAP accessory servers must support firmware update via all IP interfaces. For example, if an accessory
server supports both Ethernet and Wi-Fi it must be able to update its firmware over both Ethernet and
Wi-Fi.

5.3 HAP Objects

5.3.1 Accessory Objects
HAP Accessory Objects have the following required properties.

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

63

5. HomeKit Accessory Protocol for IP Accessories
5.3 HAP Objects

Table 5-1

Properties of HAP Accessory Objects in JSON

Property

Accessory
Instance ID

Key

"aid"

JSON Type

Description

Number

Services

"services"

Array

5.3.2 Service Objects
Service objects have the following required properties:

Table 5-2

Properties of Service Objects in JSON

Property

Key

Type

"type"

JSON
Type

String

Instance ID

"iid"

Number

Characteristics

"characteristics"

Array

Hidden
Services

Primary
Services

Linked
Services

"hidden"

"primary"

Boolean

Boolean

"linked"

Array

Integer assigned by the HAP Accessory Server to
uniquely identify the HAP Accessory object, see
Instance IDs (page 30).

Array of Service objects. Must not be empty. The
maximum number of services must not exceed
100.

Description

String that defines the type of the service. See
Service and Characteristic Types (page 72).

Integer assigned by the HAP Accessory Server
to uniquely identify the HAP Service object, see
Instance IDs (page 30).

Array of Characteristic objects. Must not be
empty. The maximum number of characteristics
must not exceed 100, and each characteristic
in the array must have a unique type.

When set to True, this service is not visible to
user.

When set to True, this is the primary service on
the accessory.

An array of Numbers containing the instance
ids of the services that this service links to.

5.3.3 Characteristic Objects
Characteristic objects have the following defined properties.

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

64

5. HomeKit Accessory Protocol for IP Accessories
5.3 HAP Objects

After an accessory has a pairing, only the values of the Value ("value") and Event Notifications ("ev") properties
are allowed to change.

Required?

Description

Table 5-3

Properties of Characteristic Objects in JSON

Property

Key

Type

"type"

JSON
Type

String

Yes

Instance ID

"iid"

Number

Yes

Value

"value"

<TYPE>

Yes

Permissions

"perms"

Array

Yes

Event
Notifications

"ev"

Boolean

No

Description

"description"

String

No

String that defines the type of
the characteristic. See Service
and Characteristic Types (page
72).

Integer assigned by the HAP
Accessory Server to uniquely
identify the HAP Characteristic
object, see Instance IDs (page
30).

The value of the characteristic,
which must conform to the
"format" property. The literal
value null may also be used
if the characteristic has no
value. This property must be
present if and only if the
characteristic contains the
Paired Read permission, see
Table 5-4 (page 67).

Array of permission strings
describing the capabilities of
the characteristic. See Table
5-4 (page 67).

Boolean indicating if event
notifications are enabled for
this characteristic.

String describing the
characteristic on a
manufacturer-specific basis,
such as an indoor versus
outdoor temperature reading.

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

65

5. HomeKit Accessory Protocol for IP Accessories
5.3 HAP Objects

Property

Key

Format

"format"

Unit

"unit"

JSON
Type

String

String

"minValue"

Number

Minimum
Value

Maximum
Value

Required?

Description

Yes

No

No

Format of the value, e.g.
"float". See Table 5-5 (page
67).

Unit of the value, e.g. "celsius".
See Table 5-6 (page 68).

Minimum value for the
characteristic, which is only
appropriate for characteristics
that have a format of "int" or
"float".

Maximum value for the
characteristic, which is only
appropriate for characteristics
that have a format of "int" or
"float".

Minimum step value for the
characteristic, which is only
appropriate for characteristics
that have a format of "int" or
"float". For example, if this
were 0.15, the characteristic
value can be incremented
from the minimum value in
multiples of 0.15.

Maximum number of
characters if the format is
"string". If this property is
omitted for "string" formats,
then the default value is 64.
The maximum value allowed
is 256.

Maximum number of
characters if the format is
"data". If this property is
omitted for "data" formats,
then the default value is
2097152.

"maxValue"

Number

No

Step Value

"minStep"

Number

No

Max Length

"maxLen"

Number

No

Max Data
Length

"maxDataLen"

Number

No

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

66

5. HomeKit Accessory Protocol for IP Accessories
5.3 HAP Objects

Property

Key

Valid Values

"valid-values"

JSON
Type

Array

Valid Values
Range

"valid-values-range"

Array

Table 5-4

Characteristic Properties

Required?

Description

No

No

An array of Numbers where
each element represents a
valid value.

A 2 element array representing
the starting value and ending
value of the range of valid
values.

Property

Paired Read

Paired Write

Events

Additional
Authorization

Timed Write

Hidden

JSON String

Description

"pr"

"pw"

"ev"

"aa"

"tw"

"hd"

This characteristic can only be read by paired controllers.

This characteristic can only be written by paired controllers.

This characteristic supports events. The HAP Characteristic
object must contain the "ev" key if it supports events.

This characteristic supports additional authorization data

This characteristic supports timed write procedure

This characteristic is hidden from the user

Table 5-5

Characteristic Value Formats

Format JSON String

Description

"bool"

"uint8"

"uint16"

"uint32"

"uint64"

"int"

Boolean value expressed as one of the following: true, false, 0 (false), and 1
(true).

Unsigned 8-bit integer.

Unsigned 16-bit integer.

Unsigned 32-bit integer.

Unsigned 64-bit integer.

Signed 32-bit integer.

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

67

5. HomeKit Accessory Protocol for IP Accessories
5.4 Discovery

Format JSON String

Description

"float"

"string"

"tlv8"

"data"

Signed 64-bit floating point number.

Sequence of zero or more Unicode characters, encoded as UTF-8. Maximum
length is 64 bytes unless overridden by the "maxLen" property.

Base64-encoded set of one or more TLV8's.

Base64-encoded data blob. Maximum length is 2,097,152 bytes unless overridden
by the "maxDataLen" property.

Table 5-6

Characteristic Units

Format JSON String

Description

"celsius"

"percentage"

"arcdegrees"

"lux"

"seconds"

The unit is only "degrees Celsius".

The unit is in percentage "%".

The unit is in arc degrees.

The unit is in lux.

The unit is in seconds.

5.4 Discovery
Accessories advertise their presence on the network via Bonjour. HAP clients browse for them and if any are
found and determined to be compatible, they are displayed to the user. The Bonjour service type is:

_hap._tcp

The name of the Bonjour service is the user-visible name of the accessory, e.g. "LED Bulb M123", and must
match the name provided in the Accessory Information Service of the HAP Accessory object that has an
instanceID of 1. The name may contain any Unicode character and is encoded using UTF-8. It has a maximum
length of 63 bytes, which may be fewer than 63 characters as a single Unicode character may require multiple
bytes. Additional data needed for discovery-time metadata is advertised via a TXT record associated with the
Bonjour service. TXT record keys are intentionally short to minimize network traffic. Accessories must confirm
to the TXT records as defined in Table 5-7 (page 69)

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

68

5. HomeKit Accessory Protocol for IP Accessories
5.4 Discovery

Table 5-7

_hap._tcp Bonjour TXT Record Keys

Key

"c#"

"ff"

"id"

"md"

"pv"

"s#"

"sf"

"ci"

Description

Current configuration number. Required.
Must update when an accessory, service, or characteristic is added or removed on the accessory
server.
Accessories must increment the config number after a firmware update.
This must have a range of 1-4294967295 and wrap to 1 when it overflows.
This value must persist across reboots, power cycles, etc.

Feature flags (e.g. "0x3" for bits 0 and 1). Required if non-zero. See Table 5-8 (page 69).

Device ID (Device ID (page 36)) of the accessory. The Device ID must be formatted as
"XX:XX:XX:XX:XX:XX", where "XX" is a hexadecimal string representing a byte. Required.
This value is also used as the accessory's Pairing Identifier.

Model name of the accessory (e.g. "Device1,1"). Required.

Protocol version string <major>.<minor> (e.g. "1.0"). Required if value is not "1.0".
The client should check this before displaying an accessory to the user. If the major version is
greater than the major version the client software was built to support, it should hide the
accessory from the user. A change in the minor version indicates the protocol is still compatible.
This mechanism allows future versions of the protocol to hide itself from older clients that
may not know how to handle it.

Current state number. Required.
This must have a value of "1".

Status flags (e.g. "0x04" for bit 3). Value should be an unsigned integer. Required if non-zero.
See Table 5-9 (page 70). Required.

Accessory Category Identifier. Required. Indicates the category that best describes the primary
function of the accessory. This must have a range of 1-65535. This must take values defined
in Table 12-3 (page 254). This must persist across reboots, power cycles, etc.

Table 5-8

Bonjour TXT Record Feature Flags

Mask

0x01

0x02-0x80

Bit

1

2-8

Description

Supports HAP Pairing. This flag is required for all HomeKit accessories.

Reserved.

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

69

5. HomeKit Accessory Protocol for IP Accessories
5.5 Security for IP Accessories

Table 5-9

Bonjour TXT Status Flags

Mask

0x01

0x02

0x04

Bit

Description

1

2

3

Accessory has not been paired with any controllers.

Accessory has not been configured to join a Wi-Fi network.

A problem has been detected on the accessory.

0x08-0x80

4-8

Reserved.

5.5 Security for IP Accessories
Any connection using HomeKit Accessory Protocol must be secure. Authenticated encryption for HAP is provided
by two mechanisms: pairing, which is defined in Pairing (page 34), and session security, which is defined below.

A connection that does not use HAP should also be secured, and security negotiation for the connection should
use the HAP connection. For example, audio and video streams from an accessory to a controller should be
secured using SRTP with the SRTP security configuration itself taking place over the HAP connection.

5.5.1 Pairing
Pairing (page 34) defines a secure mechanism used to pair a controller and an accessory. The pairing is
established once and verified for every session. After the pairing has been verified, both sides have an ephemeral
shared secret that can be used to encrypt the session.

In Pair Setup, the Pairing Identifier used for the kTLVType_Identifier must be the accessory's globally
unique ID as defined by the "id" key in the Table 5-7 (page 69).

5.5.2 Session Security
Once the controller and accessory have established an authenticated ephemeral shared secret using Pair Verify,
both the controller and the accessory use the shared secret to derive the read and write keys for session security:

AccessoryToControllerKey = HKDF-SHA-512 of

InputKey
Salt
Info
OutputSize = 32 bytes

= <Pair Verify shared secret>
= "Control-Salt"
= "Control-Read-Encryption-Key"

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

70

5. HomeKit Accessory Protocol for IP Accessories
5.6 IP Accessory Attribute Database

ControllerToAccessoryKey = HKDF-SHA-512 of

InputKey
Salt
Info
OutputSize = 32 bytes

= <Pair Verify shared secret>
= "Control-Salt"
= "Control-Write-Encryption-Key"

The controller and accessory use the derived keys in the following manner:

Table 5-10

Derived Session Key Usage

Format JSON String

Description

Accessory

AccessoryToControllerKey

ControllerToAccessoryKey

Controller

ControllerToAccessoryKey

AccessoryToControllerKey

Each HTTP message must be secured with the AEAD algorithm AEAD_CHACHA20_POLY1305 as specified in
Section 2.8 of RFC 7539. The 32-bit fixed-common part of the 96-bit nonce is all zeros: 00 00 00 00.

Each HTTP message is split into frames no larger than 1024 bytes. Each frame has the following format:

<2:AAD for little endian length of encrypted data (n) in bytes>

<n:encrypted data according to AEAD algorithm, up to 1024 bytes>
<16:authTag according to AEAD algorithm>

Once session security has been established, if the accessory encounters a decryption failure then it must
immediately close the connection used for the session.

5.6 IP Accessory Attribute Database
The accessory attribute database is a list of HAP Accessory objects, Service objects, and Characteristic objects
serialized into JSON. As such, name/value pairs in JSON objects are unordered, and values in JSON arrays are
ordered.

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

71

5. HomeKit Accessory Protocol for IP Accessories
5.6 IP Accessory Attribute Database

5.6.1 Service and Characteristic Types
Service and Characteristic types are UUIDs as defined by RFC 4122. Apple-defined service and characteristic
types are based on the following HAP Base UUID:

00000000-0000-1000-8000-0026BB765291

When Apple-defined UUIDs are encoded as JSON strings, a short form must be used by including only the first
8 characters with leading zeros removed. When converting short form UUIDs back to full UUIDs, the process
is reversed by prefixing the string with 0 or more '0' characters to expand it to 8 characters then
"-0000-1000-8000-0026BB765291" is appended to form the full 36-character UUID.

For example, the public.hap.service.accessory-information full UUID is
"0000003E-0000-1000-8000-0026BB765291". When encoded as a JSON string, the first 8 characters are "0000003E"
and with leading zeros removed it becomes "3E". Converting back to a full UUID would prefix "3E" with six '0'
characters to get "0000003E" then append "-0000-1000-8000-0026BB765291" to form a full UUID of
"0000003E-0000-1000-8000-0026BB765291". Other examples:

"00000001-0000-1000-8000-0026BB765291" -> "1"
"00000F25-0000-1000-8000-0026BB765291" -> "F25"
"0000BBAB-0000-1000-8000-0026BB765291" -> "BBAB"
"010004FF-0000-1000-8000-0026BB765291" -> "10004FF"
"FF000000-0000-1000-8000-0026BB765291" -> "FF000000"

Custom service and characteristic types must be 128-bit UUIDs as defined by RFC 4122. Custom types must
be encoded as the full UUID string in JSON. Custom types must not use the HAP Base UUID.

5.6.2 Getting the Accessory Attribute Database
A controller obtains the attribute database by sending the accessory an HTTP GET request to /accessories:

GET /accessories HTTP/1.1
Host: lights.local:12345

If the controller is paired with the accessory then the accessory will return the attribute database in the message
body of the HTTP response.

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

72

5. HomeKit Accessory Protocol for IP Accessories
5.6 IP Accessory Attribute Database

Controllers should cache the attribute database and monitor the current configuration number, c# in Table
5-7 (page 69), for changes, which indicates that the controller should get the attribute database and update
its cache. Unpaired controllers must not cache the attribute database.

If an updated attribute database shows that it is missing some services and characteristics, then these service
and characteristics will be deleted from the home.

5.6.3 Example Accessory Attribute Database in JSON
Below is an example HTTP response containing the HAP attribute database for a lightbulb bridge with two
lightbulbs:

HTTP/1.1 200 OK
Content-Type: application/hap+json
Content-Length: <length>

{

"accessories" : [

{

"aid" : 1,
"services" : [

{

"type" : "3E",
"iid" : 1,
"characteristics" : [

{

},
{

"type" : "23",
"value" : "Acme Light Bridge",
"perms" : [ "pr" ],
"format" : "string",
"iid" : 2

"type" : "20",
"value" : "Acme",
"perms" : [ "pr" ],

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

73

5. HomeKit Accessory Protocol for IP Accessories
5.6 IP Accessory Attribute Database

"format" : "string",
"iid" : 3

"type" : "30",
"value" : "037A2BABF19D",
"perms" : [ "pr" ],
"format" : "string",
"iid" : 4

"type" : "21",
"value" : "Bridge1,1",
"perms" : [ "pr" ],
"format" : "string",
"iid" : 5

"type" : "14",
"value" : null,
"perms" : [ "pw" ],
"format" : "bool",
"iid" : 6

},
{

},
{

},
{

}

]

}

]

},
{

"aid" : 2,
"services" : [

{

"type" : "3E",
"iid" : 1,

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

74

5. HomeKit Accessory Protocol for IP Accessories
5.6 IP Accessory Attribute Database

"characteristics" : [

{

},
{

},
{

},
{

},
{

"type" : "23",
"value" : "Acme LED Light Bulb",
"perms" : [ "pr" ],
"format" : "string",
"iid" : 2

"type" : "20",
"value" : "Acme",
"perms" : [ "pr" ],
"format" : "string",
"iid" : 3

"type" : "30",
"value" : "099DB48E9E28",
"perms" : [ "pr" ],
"format" : "string",
"iid" : 4

"type" : "21",
"value" : "LEDBulb1,1",
"perms" : [ "pr" ],
"format" : "string",
"iid" : 5

"type" : "14",
"value" : null,
"perms" : [ "pw" ],
"format" : "bool",
"iid" : 6

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

75

5. HomeKit Accessory Protocol for IP Accessories
5.6 IP Accessory Attribute Database

}

]

},
{

"type" : "43",
"iid" : 7,
"characteristics" : [

{

},
{

"type" : "25",
"value" : true,
"perms" : [ "pr", "pw" ],
"format" : "bool",
"iid" : 8

"type" : "8",
"value" : 50,
"perms" : [ "pr", "pw" ],
"iid" : 9,
"maxValue" : 100,
"minStep" : 1,
"minValue" : 20,
"format" : "int",
"unit" : "percentage"

}

]

}

]

},
{

"aid" : 3,
"services" : [

{

"type" : "3E",

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

76

5. HomeKit Accessory Protocol for IP Accessories
5.6 IP Accessory Attribute Database

"iid" : 1,
"characteristics" : [

{

},
{

},
{

},
{

},
{

"type" : "23",
"value" : "Acme LED Light Bulb",
"perms" : [ "pr" ],
"format" : "string",
"iid" : 2

"type" : "20",
"value" : "Acme",
"perms" : [ "pr" ],
"format" : "string",
"iid" : 3

"type" : "30",
"value" : "099DB48E9E28",
"perms" : [ "pr" ],
"format" : "string",
"iid" : 4

"type" : "21",
"value" : "LEDBulb1,1",
"perms" : [ "pr" ],
"format" : "string",
"iid" : 5

"type" : "14",
"value" : null,
"perms" : [ "pw" ],
"format" : "bool",

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

77

5. HomeKit Accessory Protocol for IP Accessories
5.6 IP Accessory Attribute Database

"iid" : 6

}

]

},
{

"type" : "43",
"iid" : 7,
"characteristics" : [

{

},
{

"type" : "25",
"value" : true,
"perms" : [ "pr", "pw" ],
"format" : "bool",
"iid" : 8

"type" : "8",
"value" : 50,
"perms" : [ "pr", "pw" ],
"iid" : 9,
"maxValue" : 100,
"minStep" : 1,
"minValue" : 20,
"format" : "int",
"unit" : "percentage"

}

]

}

]

}

]

}

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

78

5. HomeKit Accessory Protocol for IP Accessories
5.7 Controlling IP Accessories

5.7 Controlling IP Accessories

5.7.1 Handling HTTP Requests
The accessory must respond to HTTP requests with an HTTP response that includes an appropriate HTTP status
code:

5.7.1.1 Successful HTTP Status Codes
● 200 OK when the request was successfully executed and the response includes a body, e.g. after successfully

reading characteristics.

● 204 No Content when the request was successfully executed and the response has no body, e.g. after

successfully writing characteristics.

● 207 Multi-Status when the request was partially successful, e.g. when writing two characteristics and

one fails or when both writes fails.

An accessory that can successfully process the request must return a Successful HTTP Status Code. The body
of the response may be empty, or a JSON object, depending on the specification of the request.

5.7.1.2 Client Error HTTP Status Codes

400 Bad Request+ on HAP client error, e.g. a malformed request.
404 Not Found+ on an invalid URL.
422 Unprocessable Entity+ for a well-formed request that contains invalid parameters.

●

●

●

●

●

5.7.1.3 Server Error Status HTTP Codes

500 Internal Server Error+ on an HAP accessory server error, e.g. the operation timed out.
503 Service Unavailable+ if the accessory server is too busy to service the request, e.g. reached its maximum
number of connections.

5.7.1.4 HAP Status Codes
If the HTTP Status Code is a Client Error (4xx) or Server Error (5xx), then the response must include an HAP
Status Code property ("status") indicating the error code.

If the HTTP Status Code is 207 Multi-Status, then each characteristic in the response body must include
a "status" property indicating the success or failure HAP status code for each characteristic.

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

79

5. HomeKit Accessory Protocol for IP Accessories
5.7 Controlling IP Accessories

Table 5-11

HAP Status Code Property

Property

Key

JSON Type

Description

HAP Status Code

"status"

Number

A specific status code. See Table 5-12 (page 80) for
more details on the supported status codes.

Table 5-12

HAP Status Codes

Status Code

Description

0

-70401

-70402

-70403

-70404

-70405

-70406

-70407

-70408

-70409

-70410

-70411

This specifies a success for the request.

Request denied due to insufficient privileges.

Unable to communicate with requested service, e.g. the power to the accessory was
turned off.

Resource is busy, try again.

Cannot write to read only characteristic.

Cannot read from a write only characteristic.

Notification is not supported for characteristic.

Out of resources to process request.

Operation timed out.

Resource does not exist.

Accessory received an invalid value in a write request.

Insufficient Authorization.

5.7.2 Writing Characteristics
The accessory must support writing values to one or more characteristics via a single HTTP request.

To write one or more characteristic values, the controller sends an HTTP PUT request to /characteristics.
The HTTP body is a JSON object that contains an array of Characteristic Write Request objects.

5.7.2.1 Characteristic Write Request Objects
Characteristic Write Request objects have the following defined properties:

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

80

5. HomeKit Accessory Protocol for IP Accessories
5.7 Controlling IP Accessories

Table 5-13

Properties of Characteristic Write Objects in JSON

JSON Type

Description

Property

Accessory
Instance ID

Instance ID

Key

"aid"

"iid"

Number

Number

Value

Events

"value"

<TYPE>

"ev"

Boolean

Authorization
Data

"authData"

String

Remote

"remote"

Boolean

The instance ID of the accessory that contains the
characteristic to be written. Required.

The instance ID of the characteristic to be written.
If a provided instance ID is not a Characteristic
object, the accessory must respond with an "Invalid
Parameters" error. See Table 5-12 (page 80).
Required.

Optional property that contains the value to be
written to the characteristic.

Optional property that indicates the state of event
notifications for the characteristic

Optional property that contains a base 64 encoded
string of the authorization data associated with the
characteristic.

Optional property that indicates if remote access
was used to send the request. A value of true
indicates remote access was used.

At least one of "value" or "ev" will be present in the characteristic write request object. All characteristics
write operations must complete with success or failure before sending a response or handling other requests.
If no error occurs, the accessory must send an HTTP response with a 204 No Content status code and an
empty body.

5.7.2.2 Write a Single Characteristic
For example, to set the On (page 157) characteristic, which has an instance ID of "8", of a Lightbulb (page 217)
service on an accessory with an instance ID of "2", the HTTP PUT request will be:

PUT /characteristics HTTP/1.1
Host: lights.local:12345
Content-Type: application/hap+json
Content-Length: <length>

{

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

81

5. HomeKit Accessory Protocol for IP Accessories
5.7 Controlling IP Accessories

"characteristics" : [

"aid" : 2,
"iid" : 8,
"value" : true

{

}

]

If no error occurs then the accessory must respond with a 204 No Content HTTP Status Code and an empty
body. The "value" key must never be included as part of the response to a write request.

HTTP/1.1 204 No Content

Otherwise, if there is an error, then the accessory must respond with an appropriate error HTTP status code
and include an HAP status code indicating the error. For example, if the above write request was for a
characteristic that was read-only (i.e. the value of the permissions property was only Paired Read), then the
response would be the following:

HTTP/1.1 400 Bad Request
Content-Type: application/hap+json
Content-Length: <length>

{

"characteristics" : [

"aid" : 2,
"iid" : 8,
"status" : -70404

{

}

]

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

82

5. HomeKit Accessory Protocol for IP Accessories
5.7 Controlling IP Accessories

5.7.2.3 Writing Multiple Characteristics
To write multiple characteristics, the controller will send additional Characteristic Write Request objects to the
accessory. For example, to write a Boolean value to the On (page 157) characteristic of "lightA", which has a
characteristic instance ID of "8" and an accessory instance ID of "2", and "lightB", which has a characteristic
instance ID of "8" and an accessory instance ID of "3", the controller will send the following HTTP PUT request:

PUT /characteristics HTTP/1.1
Content-Type: application/hap+json
Content-Length: <length>

{

"characteristics" : [

{

},
{

"aid" : 2,
"iid" : 8,
"value" : true

"aid" : 3,
"iid" : 8,
"value" : true

}

]

If no errors occur then the accessory must respond with a 204 No Content HTTP Status Code and an empty
body. The "value" key must never be included as part of the response to a write request.

HTTP/1.1 204 No Content

If an error occurs when attempting to write any characteristics, e.g. the physical devices represented by the
characteristics to be written were unreachable, the accessory must respond with a 207 Multi-Status HTTP
Status Code and each response object must contain a "status" entry. Characteristics that were written
successfully must have a "status" of 0 and characteristics that failed to be written must have a non-zero
"status" entry. An example is listed below where one write failed and one succeeded:

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

83

5. HomeKit Accessory Protocol for IP Accessories
5.7 Controlling IP Accessories

HTTP/1.1 207 Multi-Status
Content-Type: application/hap+json
Content-Length: <length>

{

"characteristics" : [

"aid" : 2,
"iid" : 8,
"status" : 0

"aid" : 3,
"iid" : 8,
"status" : -70402

{

},
{

}

]

5.7.3 Reading Characteristics
The accessory must support reading values from one or more characteristics via a single HTTP request.

To read the value of a characteristic, the controller sends an HTTP GET request to /characteristics with a
query string that conforms to Section 3.4 of RFC 3986. The query string may have the following parameters:

Table 5-14

HAP GET Request URL Parameters

Parameter

Description

id

The identifiers for the characteristics to be read must be formatted as <Accessory
Instance ID>.<Characteristic Instance ID>, as a comma-separated list. For
example, to read the values of characteristics with instance ID "4" and "8" on an accessory
with an instanceID of "1" the URL parameter would be id=1.4,1.8. id is required for
all GET requests.

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

84

5. HomeKit Accessory Protocol for IP Accessories
5.7 Controlling IP Accessories

Parameter

Description

meta

perms

type

ev

Boolean value that determines whether or not the response should include metadata. If
meta is not present it must be assumed to be "0". If meta is "1", then the response must
include the following properties if they exist for the characteristic: "format", "unit",
"minValue", "maxValue", "minStep", and "maxLen".

Boolean value that determines whether or not the response should include the
permissions of the characteristic. If perms is not present it must be assumed to be "0".

Boolean value that determines whether or not the response should include the type of
characteristic. If type is not present it must be assumed to be "0".

Boolean value that determines whether or not the "ev" property of the characteristic
should be included in the response. If ev is not present it must be assumed to be "0".

Each parameter will be delimited by an & character.

5.7.3.1 Reading a Single Characteristic
An example HTTP GET request to read the value of a single characteristic with instance ID "8", on an accessory
with instance ID "2", is the following:

GET /characteristics?id=2.8 HTTP/1.1

The response must contain a Characteristic object with the value, Accessory Instance ID, and the Characteristic
Instance ID. In the example below, the value of the characteristic with instance ID "8" on the accessory with
instance ID "2" is 'false':

HTTP/1.1 200 OK
Content-Type: application/hap+json
Content-Length: <length>

{

"characteristics" : [

{

}

"aid" : 2,
"iid" : 8,
"value" : false,

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

85

5. HomeKit Accessory Protocol for IP Accessories
5.7 Controlling IP Accessories

]

5.7.3.2 Reading Multiple Characteristics
To read multiple characteristics, for example, the values of all characteristics with instance ID "8", across
accessories with instance IDs "2" and "3", the HTTP GET request would be:

GET /characteristics?id=2.8,3.8 HTTP/1.1

If all reads succeed, the accessory must respond with a 200 OK HTTP Status Code and a JSON body. The body
must contain a JSON object with the value and instance ID of each characteristic. In the example below, the
value of both characteristics is 'false':

HTTP/1.1 200 OK
Content-Type: application/hap+json
Content-Length: <length>

{

"characteristics" : [

{

},
{

"aid" : 2,
"iid" : 8,
"value" : false,

"aid" : 3,
"iid" : 8,
"value" : false,

}

]

If an error occurs when attempting to read any characteristics, e.g. the physical devices represented by the
characteristics to be read were unreachable, the accessory must respond with a 207 Multi-Status HTTP
Status Code and each characteristic object must contain a "status" entry. Characteristics that were read

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

86

5. HomeKit Accessory Protocol for IP Accessories
5.7 Controlling IP Accessories

successfully must have a "status" of 0 and "value". Characteristics that were read unsuccessfully must
contain a non-zero "status" entry and must not contain a "value" entry. An example is listed below where
one read failed and one succeeded:

HTTP/1.1 207 Multi-Status
Content-Type: application/hap+json
Content-Length: <length>

{

"characteristics" : [

{

},
{

"aid" : 2,
"iid" : 8,
"status" : 0,
"value" : false

"aid" : 3,
"iid" : 8,
"status" : -70402

}

]

5.7.4 Control Point Characteristics
A control-point characteristic is a write-only characteristic used to request the accessory to perform actions
such as execute commands or perform operations. The context of the request is passed as the value of the
HTTP PUT request.

The value is defined by the vendor or Apple Accessory profile.

The identify characteristic is an example of a control-point characteristic.

5.7.5 Identify Routine
An identify routine must exist for all accessories. There are two ways that the identify routine may be invoked.
Both of these methods must be supported:

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

87

5. HomeKit Accessory Protocol for IP Accessories
5.8 Notifications

● Via an Identify URL if the accessory is unpaired, as described in Identify HTTP URL (page 88).
● Via a characteristic write to the identify characteristic, public.hap.characteristic.identify.

The identify routine is used to locate the accessory. The routine should run no longer than five seconds.

For example, a lightbulb accessory may implement an identify routine as follows:

Blink the lightbulb (turn on to full brightness, then off) three times for 500 ms each time

5.7.6 Identify HTTP URL
The identify URL resides at /identify. A controller sends an HTTP POST request with an empty body to
/identify on the accessory to cause it to run its identify routine:

POST /identify HTTP/1.1

The URL is only valid if the accessory is unpaired, i.e. it has no paired controllers. If the accessory has paired
controllers then the accessory must return 400 Bad Request for any HTTP requests to the /identify URL:

HTTP/1.1 400 Bad Request
Content-Type: application/hap+json
Content-Length: <length>

{

"status" : -70401

Otherwise, for an unpaired accessory, it will fulfill the identify request and return a 204 No Content HTTP
status code:

HTTP/1.1 204 No Content

5.8 Notifications
Notifications allow an accessory to report state changes to a controller. Notifications must be explicitly configured
for each characteristic. Network-based notifications must be coalesced by the accessory using a delay of no
less than 1 second. Additional restrictions, based on the notification method, are described below. Accessories

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

88

5. HomeKit Accessory Protocol for IP Accessories
5.8 Notifications

must strictly follow these notification policies. Excessive or inappropriate notifications may result in the user
being notified of a misbehaving accessory and/or termination of the pairing relationship. The following describes
each notification method:

5.8.1 Accessory Updates State Number Internally
This internally tracks the state number within the accessory and provides it via an explicit request from the
controller, but doesn't send notifications. This method avoids multicast network traffic on each state change,
but is the least responsive. This is the default unless the accessory has been configured by a controller to use
a different method.

5.8.2 Accessory Sends Events to Controller
The accessory delivers notifications by sending an event message, which is an unsolicited HTTP response, over
the TCP connection established by the controller. An event message has the same format as an HTTP response,
but uses an protocol version of EVENT/1.0. Event messages must never interrupt a response that is already
being sent. A response message must also never interrupt an event message. Either of these violations would
result in the controller receiving a corrupt message. Event messages do not receive an HTTP response from
the controller.

5.8.2.1 Event Example
An example of bidirectional communication is when a controller writes the value of a "target" characteristic,
such as the "target temperature" of a thermostat, and wants to be notified of changes in the "current
temperature" characteristic. The following steps outline how notifications are registered and delivered:

1. The controller registers for notifications against the "current temperature" characteristic, which has an
instance ID of 4, on an Accessory object with an instance ID of "1", by sending the following request to the
Accessory Server:

PUT /characteristics HTTP/1.1
Host: thermostat.local:12345
Content-Type: application/hap+json
Content-Length: <length>

{

"characteristics" : [

{

"aid" : 1,
"iid" : 4,

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

89

5. HomeKit Accessory Protocol for IP Accessories
5.8 Notifications

"ev" : true

}

]

2. If the characteristic supports notifications then the accessory must respond with a 204 No Content HTTP
status code and an empty body. If the characteristic does not support notifications then the accessory must
respond with an HTTP 207 Multi-Status status code and a "status" with code -70406:

HTTP/1.1 207 Multi-Status
Content-Type: application/hap+json
Content-Length: <length>

{

"characteristics" : [

"aid" : 1,
"iid" : 4,
"status" : -70406

{

}

]

3. When the value of the "current temperature" value changes, the accessory sends the following unsolicited
message to the controller:

EVENT/1.0 200 OK
Content-Type: application/hap+json
Content-Length: <length>

{

"characteristics" : [

{

"aid" : 1,
"iid" : 4,

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

90

5. HomeKit Accessory Protocol for IP Accessories
5.9 HTTP URLs

"value" : 23.0

}

]

5.8.2.2 Event Policy
● Delivering notifications to controllers requires the controller to establish an HAP session with the accessory.

●

The notification registration state of a characteristic must not persist across sessions.

● When a new HAP session is established the notification registration state of that controller must be 'false'

for all characteristics provided by the accessory.

● A write-only characteristic (i.e. the characteristic permissions only include Paired Write "pw") must not

support event notifications.
The accessory must support registering for notifications against multiple characteristics in a single request.
The accessory should coalesce notifications whenever possible.
The accessory must only deliver notifications to the controller for characteristics that the controller has
registered to receive notifications against.

●

●

●

● At any point the controller may deregister for event notifications against a characteristic by setting the
"ev" key to "false." The accessory must stop delivering notifications for the deregistered characteristic
immediately after receiving the deregister request from the controller.

5.9 HTTP URLs
This section summarizes the HTTP URLs used in HAP.

Table 5-15

HTTP URLs

URL Path

HTTPMethod

Description

/accessories

GET

/characteristics

/characteristics

/identify

GET

PUT

POST

Retrieve the accessory attribute database from the accessory.
Only valid from paired controllers. See IP Accessory Attribute
Database (page 71).

Reads characteristic data. See Reading Characteristics (page 84).

Writes characteristic data. See Writing Characteristics (page 80).

Request the accessory to run its identify routine. Only valid if the
accessory is unpaired. See Identify HTTP URL (page 88).

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

91

5. HomeKit Accessory Protocol for IP Accessories
5.10 Testing IP Accessories

URL Path

/pair-setup

/pair-verify

/pairings

HTTPMethod

Description

POST

POST

POST

Write a pair-setup request. See Pair Setup (page 39).

Write a pair-verify request. See Pair Verify (page 47).

Add, remove, or list pairings. See Add Pairing (page 51), Remove
Pairing (page 53), and List Pairings (page 55).

A service must not contain characteristics with duplicate instance IDs.

5.10 Testing IP Accessories
This section outlines conformance tests for accessories.
1.
2. A service must contain at least one characteristic.
3. An accessory object must not contain services with duplicate instance IDs.
4. An accessory object must contain at least one service.
5. A bridge must not contain accessory objects with duplicate instance IDs.
6. An accessory object must contain only one accessory information service.
7.
8. A service type must be a UUID.
9. A characteristic type must be a UUID.
10. An Apple-defined characteristic type must contain all or a subset of the properties defined in Apple-defined

An accessory information service must have instance ID = 1.

Characteristics (page 144). It also must not have extra permissions.

Instance IDs must be >= 1.
Instance IDs must be an integer.

11. An Apple-defined service type must contain all of its mandatory characteristics.
12.
13.
14. A service must not have characteristics with duplicate characteristic types.
15. A service must not have more than 100 characteristics.
16. An accessory object must not have more than 100 services.
17. A bridge must not have more than 100 accessory objects.
18. Value of c# in Bonjour TXT record must be within range of 1-4294967295.
19.

If characteristic properties includes a value for maxLen, the value must be not be > 256.

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

92

5. HomeKit Accessory Protocol for IP Accessories
5.10 Testing IP Accessories

20. The value of the characteristic (if it supports Paired Read) must be valid according to the specified format,

and metadata, as applicable. For example, if the minValue/maxValue metadata are 10, and 50, then the
value should not be 60.

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

93

6. HomeKit Accessory Protocol for Bluetooth LE
Accessories

6.1 Overview
This chapter describes the HomeKit Accessory Protocol (HAP) for Bluetooth LE accessories. Bluetooth LE
Accessories confirming to this version are referred to as HAP-BLE 2.0 accessories. Services and characteristics
supported by accessories are represented using standard GATT.

6.2 Accessory Requirements
1. Must be compatible with one protocol version of the HAP-BLE specification.
2. Must confirm to Core Bluetooth specification 4.2 or later.
3. Must not allow the firmware to be downgraded.
4. Must support a timer with a minimum resolution of at least 100 milliseconds.
5. Must implement a security session timeout and terminate the security session (and the Bluetooth link) 30
seconds after the last pair-verify or pair-resume. The controller may refresh the security session by re-pair
verifying with the accessory which should extend the security session timeout.

6.3 HAP for Bluetooth LE

6.3.1 HAP Transactions and Procedures
A HAP transaction is set of related message exchanges between the controller and the accessory that perform
a single HAP function. In HAP a request-response pair is considered a single transaction. The HAP PDUs that
form a single transaction has the same transaction ID. A transaction allows the controller to validate the receipt
of all HAP requests to the accessory by receiving an authenticated response from the accessory. The accessory
can validate the sender and targeted characteristic of all requests.

A connected set of transactions that achieve a particular purpose form a HAP procedure. A procedure shall be
determined to be completed successfully only after all the transactions as specified in the respective procedure
has completed successfully. The iOS controller will complete all procedures in a time bound fashion in order
to provide a deterministic response to HAP clients. Any procedure that times out or fails validation of the

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

94

6. HomeKit Accessory Protocol for Bluetooth LE Accessories
6.3 HAP for Bluetooth LE

response shall result in the current HAP secure session being invalidated and a new session may be established
by the controller. A failure to re-establish the HAP secure session within 10 seconds must result in both the
accessory and the iOS controller dropping the Bluetooth link.

There shall be only one outstanding procedure on a characteristic at a time. Accessories should be able to
support procedures on different characteristics in parallel.

An accessory must cancel any pending procedures when a new HAP secure session starts getting established.

6.3.2 Attribute Database Authentication
To validate the authenticity of the GATT database (i.e., types, instance IDs of services and characteristics and
all characteristic metadata descriptors) each HAP characteristic must support a signature read procedure. The
signature read response must contains the following tuple:

< characteristic type, service type, service instance id,
[characteristic metadata descriptors] >

The signature read procedure must be supported with and without a secure session. When a secure session
is established the procedure is encrypted and authenticated. Without a secure session the procedure is in the
clear.

After an initial pair-verify and every configuration change, an iOS controller will perform a secured read of the
characteristic signature and validate the service / characteristic types, and instance IDs confirming the unsecured
GATT database. The authenticated characteristic metadata read from the signature read response is used for
all HAP procedures on the characteristic.

Accessories must return characteristic metadata only via the signature read procedure and must not publish
the metadata descriptors in the Bluetooth LE GATT database.

6.3.3 HAP-BLE PDU Format
The HAP-BLE PDUs have a PDU header follow by an optional PDU body. All parameters in the HAP-BLE PDU
have a little-endian format, (i.e. the least significant byte is transferred first) unless specified otherwise. HAP
PDU format is specified in Table 6-1 (page 95).

Table 6-1

HAP-BLE PDU Format

PDU Header

PDU Body (Optional)

Control Field (1
Byte)

PDU Fixed
Params

PDU Body Length (2
Bytes)

Additional Params and Values
in TLV8s (1-n Bytes)

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

95

6. HomeKit Accessory Protocol for Bluetooth LE Accessories
6.3 HAP for Bluetooth LE

6.3.3.1 HAP-BLE PDU Header - Control Field
The first byte in the HAP PDU header is a control field that defines how the PDU and the rest of the bytes in
the PDU are interpreted, see Table 6-2 (page 96).

Table 6-2

HAP-BLE PDU Header - Control Field

Bit 7

Bit 6

Bit 5

Bit 4

Bit 3

Bit 2

Bit 1

Bit 0

X

R

R

R

X

X

X

0

The control field bit 7 indicates the fragmentation status of the HAP-BLE PDU.

Table 6-3

Control Field Bit 7 Values

Bit 7

Description

0

1

First Fragment (or no fragmentation)

Continuation of fragmented PDU

The control field Bit 1-3 indicates PDU types (i.e. Request or Response). All other values in the PDU type are
reserved.

Table 6-4

Control Field Bit 1-3 Values

Bit 3

Bit 2

Bit 1

PDU Type

0

0

0

0

0

1

Request

Response

Control field bit 0 is reserved for extending the control byte. It shall be set to 0 in this version of HAP-BLE.

Table 6-5

Control Field Bit 0 Values

Bit 0

Length Extension

0

1

1 Byte Control Field

Reserved

Bits 4, 5 and 6 in the control field are reserved and shall be set to 0 in this version of the HAP-BLE specification.

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

96

6. HomeKit Accessory Protocol for Bluetooth LE Accessories
6.3 HAP for Bluetooth LE

6.3.3.2 HAP-BLE Request Format
The HAP-BLE Request format is shown in Table 6-6 (page 97).

Table 6-6

HAP-BLE Request Format

PDU Header

PDU Body (Optional)

Control
Field (1
Byte)

HAP
Opcode (1
Byte)

TID (1
Byte)

CID/SID
(1 Byte)

PDU Body
Length (2
Bytes)

Additional Params
and Values in TLV8s
(1-n Bytes)

● HAP Opcode: The second byte in the HAP-BLE PDU Request header is the HAP Opcode field. It indicates
the opcode for the HAP Request PDU. If an accessory receives a HAP PDU with an opcode that it does not
support it shall reject the PDU and respond with a status code Unsupported PDU as defined in Table
6-26 (page 116) in its HAP response. The supported HAP opcodes are listed in Table 6-7 (page 97).
TID : Transaction Identifier is an 8 bit number identifying the transaction number of this PDU. The TID is
randomly generated by the originator of the request and is used to match a request/response pair.

●

● CID / SID: Characteristic / Service Instance Identifier is the instance id of the characteristic / service for a

particular request.

Table 6-7

HAP Opcode Description

HAP Opcode

Description

0x01

0x02

0x03

0x04

0x05

0x06

HAP-Characteristic-Signature-Read

HAP-Characteristic-Write

HAP-Characteristic-Read

HAP-Characteristic-Timed-Write

HAP-Characteristic-Execute-Write

HAP-Service-Signature-Read

6.3.3.3 HAP-BLE Response Format
The HAP-BLE Response format is shown in Table 6-8 (page 98).

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

97

6. HomeKit Accessory Protocol for Bluetooth LE Accessories
6.3 HAP for Bluetooth LE

Table 6-8

HAP-BLE Response Format

PDU Header

PDU Body (Optional)

Control Field
(1 Byte)

TID (1
Byte)

Status (1
Byte)

PDU Body Length
(2 Bytes)

Additional Params and
Values in TLV8s (1-n Bytes)

●

●

TID: The second byte in the HAP-BLE PDU Response is the transaction identifier (TID). The transaction
identifier must be set to the same value as the TID of the request.
Status: The status code indicating success or an appropriate reason for failure (see Table 6-26 (page 116)).

6.3.3.4 HAP-BLE PDU Body
Some HAP PDUs may include a body. The first 2 bytes of the PDU body is the length field that indicates the
total length of the PDU body. Following the length field is a list of TLV parameters that includes the value and
additional parameters associated with the respective request or response.

All additional parameters in the request and response are encoded as individual TLV8 entries. An accessory
must parse the TLV8 entries and ignore parameters that it does not support.

The additional parameters allows for future extensibility of commands by adding new meaning on how the
request or response should be processed by the receiver.

Table 6-9

Additional Parameter Types Description

Additional Parameter Types

Description

0x01

0x02

0x03

0x04

0x05

0x06

0x07

0x08

0x09

HAP-Param-Value

HAP-Param-Additional-Authorization-Data

HAP-Param-Origin (local vs remote)

HAP-Param-Characteristic-Type

HAP-Param-Characteristic-Instance-ID

HAP-Param-Service-Type

HAP-Param-Service-Instance-ID

HAP-Param-TTL

HAP-Param-Return-Response

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

98

6. HomeKit Accessory Protocol for Bluetooth LE Accessories
6.3 HAP for Bluetooth LE

Additional Parameter Types

Description

0x0A

0x0B

0x0C

0x0D

0x0E

0x0F

0x10

0x11

0x12

HAP-Param-HAP-Characteristic-Properties-Descriptor

HAP-Param-GATT-User-Description-Descriptor

HAP-Param-GATT-Presentation-Format-Descriptor

HAP-Param-GATT-Valid-Range

HAP-Param-HAP-Step-Value-Descriptor

HAP-Param-HAP-Service-Properties

HAP-Param-HAP-Linked-Services

HAP-Param-HAP-Valid-Values-Descriptor

HAP-Param-HAP-Valid-Values-Range-Descriptor

6.3.3.5 HAP PDU Fragmentation Scheme
HAP PDU fragments (excluding the first fragment) shall use the format as specified in Table 6-10 (page 99).

Table 6-10

HAP PDU Fragmentation Scheme

PDU Header

Continuation of PDU Body

Control Field (1 Byte)

TxID (1 Byte)

0b 1000 XXX0

0xXX

Only the control byte and the TID bytes shall be included in the continuation fragment's PDU header. The bit
7 in the control byte shall be set to 1 indicating a continuation of fragment. All fragments shall have bits 1-3
(Request / Response type) set to the same value as it was in the first fragment. The TID must also be set the
same value as it was in the first fragment. Each fragment is encrypted independently when a secure session
is established and when the characteristic requires a secure read or write.

The HAP PDU must be fragmented to fit the underlying protocols MTU size. In the case of HAP-BLE over GATT
the maximum size of a fragment shall be the GATT MTU of 512 bytes. When secure reads or writes are performed
and the HAP PDU requires fragmentation, the first HAP PDU shall have a total length of up to 496 bytes (512
- 16 byte auth tag). Subsequent fragments can be up to 496 bytes.

Individual fragments are allowed to be less than the max fragment size and for optimal performance the
fragment size will be chosen to fit within an ATT_MTU when appropriate.

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

99

6. HomeKit Accessory Protocol for Bluetooth LE Accessories
6.3 HAP for Bluetooth LE

The first fragment must contain the complete PDU Header and the PDU Body Length when the optional PDU
body is present.

6.3.4 HAP-BLE PDU Payloads

6.3.4.1 HAP-Characteristic-Signature-Read-Request

Table 6-11

HAP-Characteristic-Signature-Read-Request

PDU Header

Control Field (1 Byte)

HAP PDU Type (1 Byte)

TxID (1 Byte)

Characteristics Instance ID (2
Bytes)

0b 0000 0000

0x01

0xXX

0xXXXX

6.3.4.2 HAP-Characteristic-Signature-Read-Response

Table 6-12

HAP-Characteristic-Signature-Read-Response 1

PDU Header

PDU Body

Control
Field (1
Byte)

0b 0000
0010

TID (1
Byte)

0xXX

Status
(1
Byte)

0xXX

Body
Length (2
Bytes)

0xXXXX

TLV (Chr
Type)

TLV (Svc ID)

TLV
(SvcType)

<0x04,0x10,
128-bit
UUID>

<0x07,
0x02, 16-bit
SvcID>

<0x06,0x10,
128-bit
UUID>

Table 6-13

HAP-Characteristic-Signature-Read-Response 2

PDU Body (continued)

TLV
(HAP-Chr-Properties)

TLV (Optional)
(GATT-User-Description)

<0x0A, 0x02,
HAP-Chr-Properties>

<0x0B, 0xXX, UTF-8 user
description string>

TLV
(GATT-Format)

<0x0C, 0x07,
GATT-Format>

TLV (Optional)
(GATT-Valid-Range)

<0x0D, 0xXX,
GATT-Valid-Range>

TLV (Optional)
(HAP-Step-Value)

<0x0E, 0xXX,
HAP-Step-Value>

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

100

6. HomeKit Accessory Protocol for Bluetooth LE Accessories
6.3 HAP for Bluetooth LE

6.3.4.3 HAP-Characteristic-Signature-Read-Response (with Valid Values)

Table 6-14

HAP-Characteristic-Signature-Read-Response (with Valid Values) 1

PDU Header

PDU Body

Control
Field (1
Byte)

0b 0000
0010

TID (1
Byte)

0xXX

Status
(1
Byte)

0xXX

Body
Length (2
Bytes)

0xXXXX

TLV (Chr
Type)

TLV (Svc ID)

TLV
(SvcType)

<0x08,0x10,
128-bit
UUID>

<0x0A,
0x02, 16-bit
SvcID>

<0x09,0x10,
128-bit
UUID>

Table 6-15

HAP-Characteristic-Signature-Read-Response (with Valid Values) 2

PDU Body (continued)

TLV
(HAP-Chr-Properties)

<0x0A, 0x02,
HAP-Chr-Properties>

TLV (Optional
Descriptors)

<...>

TLV (Optional)
(HAP-Valid-Values)

<0x11, 0xXX, 0xAA,
0xBB, 0xCC,...>

TLV (Optional)
(HAP-Valid-Values-Range)

<0x12, 0xXX, 0xS1,
0xE1,...0xSN, 0xEN>

6.3.4.4 HAP-Characteristic-Write-Request

Table 6-16

HAP-Characteristic-Write-Request

PDU Header

PDU Body

Control Field
(1 Byte)

HAP PDU
Type (1
Byte)

TID (1
Byte)

CharID (2
Bytes)

Body Length
(2 Bytes)

TLV (Char Value)

0b 0000 0000

0x02

0xXX

0xXXXX

0xXXXX

<0x01,0xXX,value>

6.3.4.5 HAP-Characteristic-Write-Response

Table 6-17

HAP-Characteristic-Write-Response

PDU Header

Control Field (1 Byte)

TxID (1 Byte)

Status (1 Byte)

0b 0000 0010

0xXX

0xXX

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

101

6. HomeKit Accessory Protocol for Bluetooth LE Accessories
6.3 HAP for Bluetooth LE

6.3.4.6 HAP-Characteristic-Read-Request

Table 6-18

HAP-Characteristic-Read-Request

PDU Header

Control Field (1 Byte)

HAP PDU Type (1 Byte)

TxID (1 Byte)

Characteristics Instance ID (2
Bytes)

0b 0000 0000

0x03

0xXX

0xXXXX

6.3.4.7 HAP-Characteristic-Read-Response

Table 6-19

HAP-Characteristic-Read-Response

Control Field (1
Byte)

0b 0000 0010

PDU Header

TID (1 Byte)

0xXX

PDU Body

Status (1
Byte)

0xXX

Body Length (2
Bytes)

TLV (Char Value)

0xXXXX

<0x01,0xXX,value>

6.3.4.8 HAP-Characteristic-Timed-Write-Request

Table 6-20

HAP-Characteristic-Timed-Write-Request

PDU Header

PDU Body (Optional)

Control
Field (1
Byte)

0b 0000
0000

HAP PDU
Type (1
Byte)

0x04

TID (1
Byte)

CharID
(2
Bytes)

Body
Length (2
Bytes)

0xXX

0xXXXX

0xXXXX

TLV
(TTL*100ms)
(1 Byte)

<0x08,0x01,
0xXX>

TLV (Char
Value)

<0x01,
0xXX,
value>

6.3.4.9 HAP-Characteristic-Timed-Write-Response

Table 6-21

HAP-Characteristic-Timed-Write-Response

PDU Header

Control Field (1 Byte)

TxID (1 Byte)

Status (1 Byte)

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

102

6. HomeKit Accessory Protocol for Bluetooth LE Accessories
6.3 HAP for Bluetooth LE

PDU Header

0b 0000 0010

0xXX

0xXX

6.3.4.10 HAP-Characteristic-Execute-Write-Request

Table 6-22

HAP-Characteristic-Execute-Write-Request

PDU Header

Control Field (1 Byte)

HAP PDU Type (1 Byte)

TxID (1 Byte)

Characteristics Instance ID (2
Bytes)

0b 0000 0000

0x05

0xXX

0xXXXX

6.3.4.11 HAP-Characteristic-Execute-Write-Response

Table 6-23

HAP-Characteristic-Execute-Write-Response

PDU Header

Control Field (1 Byte)

TxID (1 Byte)

Status (1 Byte)

0b 0000 0010

0xXX

0xXX

6.3.4.12 HAP-Service-Signature-Read-Request

Table 6-24

HAP-Service-Signature-Read-Request

PDU Header

Control Field (1 Byte)

HAP PDU Type (1 Byte)

TxID (1 Byte)

Service Instance ID (SvcID) (2
Bytes)

0b 0000 0000

0x06

0xXX

0xXXXX

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

103

6. HomeKit Accessory Protocol for Bluetooth LE Accessories
6.3 HAP for Bluetooth LE

6.3.4.13 HAP-Service-Signature-Read-Response

Table 6-25

HAP-Service-Signature-Read-Response

PDU Header

Control Field
(1 Byte)

TID (1
Byte)

Status (1
Byte)

0b 0000 0010

0xXX

0xXX

Body
Length (2
Bytes)

0xXXXX

6.3.5 HAP Procedures

PDU Body

TLV (Svc
Properties)

<0x0F,0x02,
0xXXXX>

TLV (Linked Svc)

<0x10,0xXX,
SvcID1, SvcID2, ...,
SvcIDn>

6.3.5.1 HAP Characteristic Signature Read Procedure
This procedure is used to read the signature of each HAP characteristic. Each HAP characteristic must support
this procedure and return the following information:
● Characteristic Instance ID
● Characteristic Type

●

●

Service Instance ID of the service that the characteristic belongs
Service Type of the service that the characteristic belongs

● All the metadata associated with the characteristic.

The signature read procedure must be supported with and without a secure session. When a secure session
is established the procedure is encrypted and authenticated. Without a secure session the procedure is in the
clear.

The Service Instance ID (page 127) characteristic is not considered a HAP characteristic and does not support
this procedure.

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

104

6. HomeKit Accessory Protocol for Bluetooth LE Accessories
6.3 HAP for Bluetooth LE

The characteristics Pair Setup (page 57), Pair Verify (page 57) and Pairing Features (page 58) of Pairing
Service (page 57) do not support Paired Read and Paired Write and only support the HAP Characteristic
Signature Read Procedure (page 104) without a secure session.

Figure 6-1

HAP Characteristic Signature Read Procedure

Controller

Accessory

[HAP-Characteristic-Signature-Read-Request]

GATT Write Request Payload = {
HAP-PDU: HAP-Characteristic-Signature-Read-Request
Transaction ID : <TransactionID>
CharacteristicID : <CharacteristicID>
}

GATT Write Request

[HAP-Characteristic-Signature-Read-Request]

GATT Write Response

[HAP-Characteristic-Signature-Read-Response]

GATT Read Request

GATT Read Response Payload = {
Transaction ID : <TransactionID>
Status : <status code>
Param TLVs : [<CharacteristicType>, 
<ServiceType>, <ServiceID>, 
<HAP-Chr-Properties>, <GATT-User-Description>, 
<GATT-Format>, <GATT-Valid-Range>, 
<HAP-Step-Value>]
}

GATT Read Response

[HAP-Characteristic-Signature-Read-Response]

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

105

6. HomeKit Accessory Protocol for Bluetooth LE Accessories
6.3 HAP for Bluetooth LE

6.3.5.2 HAP Characteristic Write Procedure

Figure 6-2

HAP Characteristic Write Procedure

Controller

Accessory

[HAP-Characteristic-Write-Request]

GATT Write Request Payload = {
HAP-PDU: HAP-Characteristic-Write-Request
Transaction ID : <TransactionID>
CharacteristicID : <CharacteristicID>
Param TLVs : [ Value : <value> ]
}

GATT Write Request

[HAP-Characteristic-Write-Request]

GATT Write Response

[HAP-Characteristic-Write-Response]

GATT Read Request

GATT Read Response Payload = {
Transaction ID : <TransactionID>
Status : <status code>
}

GATT Read Response

[HAP-Characteristic-Write-Response]

This procedure is used to write a value to the HAP characteristic.

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

106

6. HomeKit Accessory Protocol for Bluetooth LE Accessories
6.3 HAP for Bluetooth LE

6.3.5.3 HAP Characteristic Read Procedure

Figure 6-3

HAP Characteristic Read Procedure

Controller

Accessory

[HAP-Characteristic-Read-Request]

GATT Write Request Payload = {
HAP-PDU: HAP-Characteristic-Read-Request
Transaction ID : <TransactionID>
CharacteristicID : <CharacteristicID>
}

GATT Write Request

[HAP-Characteristic-Read-Request]

GATT Write Response

[HAP-Characteristic-Read-Response]

GATT Read Request

GATT Read Response Payload = {
Transaction ID : <TransactionID>
Status : <status code>
Param TLVs : [ Value : <value> ]
}

GATT Read Response

[HAP-Characteristic-Read-Response]

This procedure is used to read a value of the HAP characteristic.

6.3.5.4 HAP Characteristic Timed Write Procedure
The HAP characteristic timed write procedure will write to characteristic that require time sensitive actions. An
example is security class characteristics (Lock Target State, Target Door State etc). The accessory must indicate
the characteristic requires the timed write in the HAP Characteristics Properties descriptor. An accessory must
support timed writes to all characteristics even if the characteristic property does not require it.

The HAP characteristic timed write procedure shall be used to securely execute a write command within a
specified TTL. The accessory must start the TTL timer after sending the HAP-Characteristic-Timed-Write-Response.
The scheduled request shall be executed only if the accessory receives the
HAP-Characteristic-ExecuteWrite-Request before its TTL timer expires.

If the accessory receives a HAP-Characteristic-Execute-Write-Request after the TTL timer has expired it shall
ignore the request and respond with an error in the HAP-Characteristic-Execute-Write-Response.

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

107

6. HomeKit Accessory Protocol for Bluetooth LE Accessories
6.3 HAP for Bluetooth LE

The controller will send a HAP-Characteristic-Execute-Write-Request only after it has received a
HAP-Characteristic-Timed-Write-Response within the TTL milliseconds of having issued the GATT-Read-Request
for reading the response.

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

108

6. HomeKit Accessory Protocol for Bluetooth LE Accessories
6.3 HAP for Bluetooth LE

If the accessory receives another HAP procedure to the same characteristics in the middle of the timed write
procedure, it shall drop the security session and disconnect the Bluetooth link.

Figure 6-4

HAP Characteristic Timed Write Procedure (1)

Controller

Accessory

[HAP-Characteristic-Timed-Write-Request]

GATT Write Request Payload = {
HAP-PDU: HAP-Characteristic-Timed-Write-Request
Transaction ID : <TransactionID>
CharacteristicID : <CharacteristicID>
Param TLVs : [ Value : <value>, TTL : <TTL> ]
}

GATT Write Request

[HAP-Characteristic-Time-Write-Request]

GATT Write Response

[HAP-Characteristic-Timed-Write-Response]

GATT Read Request

GATT Read Response Payload = {
Transaction ID : <TransactionID>
Status : <status code>
}

GATT Read Response

[HAP-Characteristic-Timed-Write-Response]

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

109

6. HomeKit Accessory Protocol for Bluetooth LE Accessories
6.3 HAP for Bluetooth LE

Figure 6-5

HAP Characteristic Timed Write Procedure (2)

Controller

Accessory

[HAP-Characteristic-Execute-Write-Request]

GATT Write Request Payload = {
HAP-PDU: HAP-Characteristic-Execute-Write-Request
Transaction ID : <TransactionID>
CharacteristicID : <CharacteristicID>
}

GATT Write Request

[HAP-Characteristic-Execute-Write-Request]

GATT Write Response

[HAP-Characteristic-Execute-Write-Response]

GATT Read Request

GATT Read Response Payload = {
Transaction ID : <TransactionID>
Status : <status code>
}

GATT Read Response

[HAP-Characteristic-Execute-Write-Response]

6.3.5.5 HAP Characteristic Write-with-Response Procedure
This procedure extends the HAP Characteristic Write Request Procedure by adding an additional TLV
(HAP-Param-Return-Response) to the request body's TLVs in addition to the characteristic value
(HAP-Param-Value). This procedure is used when a HAP write request generates a response value. The generated
response is returned in the HAP-Characteristic-Write-Response's PDU's body as an additional TLV
(HAP-Param-Value).

Pair setup and pair verify use this procedure as illustrated in Figure 6-6 (page 111), Figure 6-7 (page 112) and
Figure 6-8 (page 113)

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

110

6. HomeKit Accessory Protocol for Bluetooth LE Accessories
6.3 HAP for Bluetooth LE

(Note: The underlying GATT write and read requests to deliver the HAP requests and responses are not shown)

Figure 6-6

HAP Characteristic Write-with-Response Pair Setup Procedure (1)

Controller

Accessory

[Pair Setup]

GATT Write Request Payload = {
HAP-PDU: HAP-Characteristic-Write-Request
Transaction ID : <TransactionID>
CharacteristicID : <CharacteristicID>
Param TLVs : [ Return-Response : 1,
Value : (M1, SRP Start Request) ]
}

HAP-Characteristic-Write-Request

(With-Response)

GATT Read Response Payload = {
Transaction ID : <TransactionID>
Status : <status code>
Param TLVs : [ Value : (M2, SRP Start Response) ]
}

HAP-Characteristic-Write-Response

GATT Write Request Payload = {
HAP-PDU: HAP-Characteristic-Write-Request
Transaction ID : <TransactionID>
CharacteristicID : <CharacteristicID>
Param TLVs : [ Return-Response : 1,
Value : (M3, SRP Verify Request) ]
}

HAP-Characteristic-Write-Request

(With-Response)

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

111

6. HomeKit Accessory Protocol for Bluetooth LE Accessories
6.3 HAP for Bluetooth LE

Figure 6-7

HAP Characteristic Write-with-Response Pair Setup Procedure (2)

Controller

Accessory

[Pair Setup]

GATT Read Response Payload = {
Transaction ID : <TransactionID>
Status : <status code>
Param TLVs : [ Value : (M4, SRP Verify Response) ]
}

HAP-Characteristic-Write-Response

GATT Write Request Payload = {
HAP-PDU: HAP-Characteristic-Write-Request
Transaction ID : <TransactionID>
CharacteristicID : <CharacteristicID>
Param TLVs : [ Return-Response : 1,
Value : (M5, SRP Exchange Request) ]
}

HAP-Characteristic-Write-Request

(With-Response)

GATT Read Response Payload = {
Transaction ID : <TransactionID>
Status : <status code>
Param TLVs : [ Value : (M6, SRP Exchange Response) ]
}

HAP-Characteristic-Write-Response

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

112

6. HomeKit Accessory Protocol for Bluetooth LE Accessories
6.3 HAP for Bluetooth LE

Figure 6-8

HAP Characteristic Write-with-Response Pair Verify Procedure

Controller

Accessory

[Pair Verify]

GATT Write Request Payload = {
HAP-PDU: HAP-Characteristic-Write-Request
Transaction ID : <TransactionID>
CharacteristicID : <CharacteristicID>
Params TLVs : [ Return-Response : 1,
Value : (M1, Verify Start Request)]
}

HAP-Characteristic-Write-Request

(With-Response)

GATT Read Response Payload = {
Transaction ID : <TransactionID>
Status : <status code>
Params TLVs : [ Value : (M2, Verify Start Response)]
}

HAP-Characteristic-Write-Response

GATT Write Request Payload = {
HAP-PDU: HAP-Characteristic-Write-Request
Transaction ID : <TransactionID>
CharacteristicID : <CharacteristicID>
Params TLVs : [ Return-Response : 1,
Value : (M3, Verify Finish Request)]
}

HAP-Characteristic-Write-Request

(With-Response)

GATT Read Response Payload = {
Transaction ID : <TransactionID>
Status : <status code>
Params TLVs : [ Value : (M4, Verify Finish Response)]
}

HAP-Characteristic-Write-Response

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

113

6. HomeKit Accessory Protocol for Bluetooth LE Accessories
6.3 HAP for Bluetooth LE

6.3.5.6 HAP Fragmented Writes

Figure 6-9

HAP Fragmented Writes

Controller

Accessory

GATT Write Request Payload = {
HAP-PDU: HAP-Characteristic-Write-Request
Transaction ID : <TransactionID>
CharacteristicID : <CharacteristicID>
Param TLVs : [Value : 1st Fragment]
}

GATT Write Request

[HAP-Characteristic-Write-Request (1st Fragment)]

GATT Write Response

GATT Write Request Payload = {
HAP-PDU: HAP-PDU-Fragment
Transaction ID : <TransactionID>
CharacteristicID : <CharacteristicID>
Param TLVs : [Value : 2nd Fragment]
}

GATT Write Request

[HAP-PDU-Fragment (2nd Fragment)]

GATT Write Response

GATT Write Request
GATT Write Responses
(for remaining fragments)

GATT Read Request

GATT Read Response Payload = {
Transaction ID : <TransactionID>
Status : <status code>
}

GATT Read Response

[HAP-Characteristic-Write-Response]

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

114

6. HomeKit Accessory Protocol for Bluetooth LE Accessories
6.3 HAP for Bluetooth LE

6.3.5.7 HAP Fragmented Read

Figure 6-10 HAP Fragmented Read

Controller

Accessory

GATT Write Request Payload = {
HAP-PDU: HAP-Characteristic-Read-Request
Transaction ID : <TransactionID>
CharacteristicID : <CharacteristicID>
}

GATT Write Request

[HAP-Characteristic-Read-Request]

GATT Write Response

GATT Read Request

GATT Read Response Payload = {
HAP-PDU : HAP-Characteristic-Read-Response
Transaction ID : <TransactionID>
Status : <status code>
Param TLVs : [ Value : 1st Fragment ]
}

GATT Read Response

[HAP-Characteristic-Read-Response (1st Fragment)]

GATT Read Request

GATT Read Response Payload = {
HAP-PDU : HAP-Fragment
Transaction ID : <TransactionID>
Param TLVs : [ Value : 2nd Fragment ]
}

GATT Read Response

[HAP-PDU-Fragment (2nd Fragment)]

GATT Read Request
GATT Read Responses
(for remaining fragments)

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

115

6. HomeKit Accessory Protocol for Bluetooth LE Accessories
6.3 HAP for Bluetooth LE

6.3.6 HAP Status Codes

Table 6-26

HAP Status Codes Description

StatusCodes

Definition

Description

0x00

0x01

0x02

0x03

0x04

0x05

0x06

Success

Unsupported-PDU

Max-Procedures

The request was successful.

The request failed as the HAP PDU was not recognized
or supported.

The request failed as the accessory has reached the the
limit on the simultaneous procedures it can handle.

Insufficient Authorization

Characteristic requires additional authorization data.

Invalid Instance ID

Insufficient Authentication

Invalid Request

The HAP Request's characteristic Instance id did not
match the addressed characteristic's instance id.

Characteristic access required a secure session to be
established.

Accessory was not able to perform the requested
operation.

6.3.7 Pair-Resume Procedure
The security session restore feature (Pair-Resume) allows accessories that can save the 256 bit shared secret
and a 64 bit session identifier from previous secure session to restore a session without any new ECC
computations, significantly speeding up the session restoration and overall re-connection time.

6.3.7.1 Accessory Requirements
1. Must support restoring sessions for at-least 8 sessions
2. Must use a Least Frequently Used or a Least Recently Used scheme to forget sessions that exceeds the

maximum number of sessions that the accessory can resume.

6.3.7.2 Defines

Table 6-27

Defines Description

Define

kTLVMethod_ Resume

Value

0x06

Description

Pair-Resume

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

116

6. HomeKit Accessory Protocol for Bluetooth LE Accessories
6.3 HAP for Bluetooth LE

Define

kTLVType_ SessionID

Value

0x0E

Description

Identifier to resume a session.

6.3.7.3 Initial SessionID
After an initial pair-verify the controller and the accessory will generate an initial session ID that can be used
to restore the security session in the next Pair-Resume attempt. The SessionID is computed by using the
HKDF-SHA-512 of the following:

InputKey

= <Current Session Shared Secret>

Salt

Info

= "Pair-Verify-ResumeSessionID-Salt"

= "Pair-Verify-ResumeSessionID-Info"

OutputSize

= 8 bytes

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

117

6. HomeKit Accessory Protocol for Bluetooth LE Accessories
6.3 HAP for Bluetooth LE

6.3.7.4 Pair Resume
The initial SessionID generated during the pair-verify can be used by the controller to resume the subsequent
session. Pair-Resume is compatible with the pair-verify procedure and if the accessory does not have the
previous SessionID stored it can fall back to normal pair-verify procedure.

Figure 6-11

Pair Resume Procedure(1)

Controller

Accessory

Pair-Verfiy

Initial SessionID = HKDF-SHA-512 of
InputKey = <Current Session Shared Secret>
Salt = “Pair-Verify-Resume-Salt”
Info = “Pair-Verify-Resume-Info”
OutputSize = 8 bytes

[Successful Pair-Resume]

GATT Write Request Payload = {
HAP-PDU: HAP-Characteristic-Write-Request
Transaction ID : <TransactionID>
CharacteristicID : <CharacteristicID>
Param TLVs : [ Return-Response : 1,
Value : Resume-Request (M1, kTLVMethod_Resume,
Public Key, SessionID, Auth-Tag) ]
}

 HAP-Characteristic-Write-Request

(With-Response)

GATT Read Response Payload = {
Transaction ID : <TransactionID>
Status : <status code>
Param TLVs : [ Value : Resume-Response
(M2, kTLVMethod_Resume, NewSessionID
, Auth-Tag) ]
}

HAP-Characteristic-Write-Response

Compute new Shared Secret

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

118

6. HomeKit Accessory Protocol for Bluetooth LE Accessories
6.3 HAP for Bluetooth LE

Figure 6-12 Pair Resume Procedure(2)

Controller

Accessory

[Pair-Resume Fails (Falls back to Pair-Verify)]

GATT Write Request Payload = {
HAP-PDU: HAP-Characteristic-Write-Request
Transaction ID : <TransactionID>
CharacteristicID : <CharacteristicID>
Param TLVs : [ Return-Response : 1,
Value : Resume-Request (M1, kTLVMethod_Resume,
Public Key, SessionID, Auth-Tag) ]
}

 HAP-Characteristic-Write-Request

(With-Response)

GATT Read Response Payload = {
Transaction ID : <TransactionID>
Status : <status code>
Param TLVs : [ Value : Verify-Start-Response
(M2, Public-Key, Encryped-Sub-TLV) ]
}

HAP-Characteristic-Write-Response

GATT Write Request Payload = {
HAP-PDU: HAP-Characteristic-Write-Request
Transaction ID : <TransactionID>
CharacteristicID : <CharacteristicID>
Param TLVs : [ Return-Response : 1,
Value : (M3, Verify Finish Request) ]
}

 HAP-Characteristic-Write-Request

(With-Response)

HAP-Characteristic-Write-Response

Re-Compute Initial SessionID

GATT Read Response Payload = {
Transaction ID : <TransactionID>
Status : <status code>
Param TLVs : [ Value : 
(M4, Verify Finish Response) ]
}

6.3.7.4.1 M1: Controller -> Accessory - Resume Request
The controller performs the following steps:

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

119

6. HomeKit Accessory Protocol for Bluetooth LE Accessories
6.3 HAP for Bluetooth LE

1. Generate a new and random Curve25519 key pair. This enables <M1> to be usable as the first message of

pair verify if pair resume fails.

2. Derive a request encryption key, RequestKey using the HKDF-SHA-512 of the following:

InputKey

= <Shared Secret from previous session>

Salt

Info

= <Controller's new Curve25519 public key><SessionID>

= "Pair-Resume-Request-Info"

= 32 bytes

OutputSize
Encrypt and generate auth-tag with an empty RequestData. This uses the ChaCha20-Poly1305 AEAD
algorithm with the following parameters:
encryptedData, authTag = ChaCha20-Poly1305(RequestKey, Nonce="PR-Msg01",
AAD=<none>, Msg=<0 byte RequestData>)
Send request to accessory with the following TLV items:

3.

4.

kTLVType_State

<M1>

kTLVType_Method

<kTLVMethod_Resume>

kTLVType_PublicKey

<Controller's Curve25519 public key>

kTLVType_SessionID

<Session ID to resume>

kTLVType_EncryptedData
<16 bytes of auth tag>
*Note: The Session ID is encoded as a 8 byte little-endian integer

6.3.7.4.2 M2: Accessory -> Controller - Resume Response
When the accessory receives <M1>, it must perform the following steps:
1.

Look up the session ID in the list of saved sessions to get shared secret. If the session is not found or has
expired, the accessory must treat this as <M1> of pair verify. This avoids needing another round trip to fail
and start pair verify. If the session is found and valid then continue with pair resume.
Invalidate session ID so it cannot be used again.

2.
3. Derive the encryption key (same as the controller).
4.
5. Generate new, random session ID*. This can be used for a subsequent pair resume.

Verify authTag of encrypted data. If this fails, respond with <M2> and kTLVError_Authentication.

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

120

6. HomeKit Accessory Protocol for Bluetooth LE Accessories
6.3 HAP for Bluetooth LE

*Note: The <New Session ID> generated by the accessory in the pair resume must be generated
randomly and must not be in anyway derived from current or previous session information.
6. Derive a response encryption key, ResponseKey using the HKDF-SHA-512 of the following:

InputKey

= <Shared Secret from previous session>

Salt

Info

= <Controller's Curve25519 public key><New SessionID>

= "Pair-Resume-Response-Info"

= 32 bytes

OutputSize
*Note: The New Session ID is encoded as a 8 byte little-endian integer
Encrypt and generate auth-tag with an empty ResponseData. This uses the ChaCha20-Poly1305 AEAD
algorithm with the following parameters:
encryptedData, authTag = ChaCha20-Poly1305(ResponseKey, Nonce="PR-Msg02",
AAD=<none>, Msg=<0 byte ResponseData>)
Send response to controller with the following TLV items:

7.

8.

kTLVType_State

<M2>

kTLVType_Method

<kTLVMethod_Resume>

kTLVType_SessionID

<New Session ID>

kTLVType_EncryptedData
*Note: The New Session ID is encoded as an 8 byte little-endian integer

<16 bytes of auth tag>

6.3.7.5 Compute Shared Secret
After a successful pair-resume the accessory and controller derive a new shared secret for subsequent
communication. The Shared Secret is computed by using the HKDF-SHA-512 of the following:

InputKey

= <Shared Secret from previous session>

Salt

Info

= <Controller's Curve25519 public key><New SessionID>

= "Pair-Resume-Shared-Secret-Info"

OutputSize

= 32 bytes

*Note: The New Session ID is encoded as a 8 byte little-endian integer

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

121

6. HomeKit Accessory Protocol for Bluetooth LE Accessories
6.4 Bluetooth LE

The new shared secret is used to derive new read/write keys as specified in AEAD Algorithm with the nonce
reset to 0.

6.4 Bluetooth LE

6.4.1 General requirements

6.4.1.1 Accessory Role
The accessory must implement the Bluetooth LE peripheral role as specified in the Bluetooth specification 4.2
or later.

6.4.1.2 Bluetooth Device Address
The accessory should use a static random Bluetooth Device Address for the LE physical channel.

6.4.1.3 Advertising Channels
The accessory must advertise on all three advertising channels (37, 38, and 39) at each advertising event.

6.4.1.4 Advertising Interval

●

●

●

●

The accessory must support advertising at a periodic interval.
The accessory is allowed to change the advertising interval dynamically.
The accessory must indicate its current advertising interval in the advertisement data.
The accessory must adhere to the advertising interval recommendations in the Bluetooth Accessory
Design Guidelines for Apple Products.

● Accessories with Apple defined writable characteristics supporing Disconnected Events (page 133)

should advertise with an advertising interval of less than 500 ms.

6.4.1.5 Transmission Power
The accessory should be able to transmit at the maximum output power level as allowed by the Bluetooth
Core Specification. For good wireless range accessories should transmit atleast at +4 dBm.

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

122

6. HomeKit Accessory Protocol for Bluetooth LE Accessories
6.4 Bluetooth LE

6.4.1.6 MTU Size
The accessory must support an MTU size, ATT_MTU larger than 100 bytes during the ATT Exchange MTU 
Request handshake. Accessories should use an MTU size of 150 bytes or larger.

6.4.1.7 Maximum Payload Size
The maximum length of an HAP characteristic value shall be 64000 bytes, the the maximum length of the 
Bluetooth LE Attribute value shall be 512 bytes and accessory must support ATT prepared writes of up-to 512 
bytes. HAP characteristics that exceed 512 bytes must be fragmented as per the HAP PDU fragmentation 
scheme.

6.4.1.8 Unpaired Identify
Unpaired Identify must be allowed only if the accessory is unpaired, i.e. it has no paired controllers. During 
unpaired identify, unpaired controllers must be allowed to write to Identify (page 152) characteristic.

6.4.2 HAP BLE 2.0 Advertisement Format
All bytes in the Advertisement Data are reserved and must not be used for any other purpose. The advertisement
data must include the following fields:

6.4.2.1 Flags

●

●

●

●

Total length of three bytes.
Length byte with value 0x02: one for the Flags AD type and one for the Flags value.
Flags AD type, 0x01, as defined by the Bluetooth Core Specification
The Flags value must have the LE General Discoverable Mode, bit 1, set. Since the LE General Discoverable
Mode flag is set the LE Limited Discoverable Mode must not be set, as defined by the Bluetooth Core
Specification

Table 6-28

Flags Description

Length

AD Type

Value

0x02

0x01

0bxxxxxx1x

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

123

6. HomeKit Accessory Protocol for Bluetooth LE Accessories
6.4 Bluetooth LE

6.4.2.2 Manufacturer Data

●

●

Total length of 19 bytes.
LEN - Length byte with a value 0x12.

● ADT - AD Type of 0xFF.
● CoID - Company Identifier code, 0x004C (Apple, Inc.), in little endian format.

●

TY - 8 bits for Type, which shall be set to 0x06.

● AIL - 8 bits for Advertising Interval and Length, the 3 significant bits specify the advertising interval currently

being used by the accessory, and the remaining 5 bits is the length of the remaining bytes in the
manufacturer specific data which shall be set to the value 13 (i.e the lower nibble must be set to 0xD).
SF- 8 bits for Status Flags, Bits 1-7 are reserved and shall be set to 0, Bit 0 shall reflect the value of the HAP
Pairing Status Flag.
48-bit Device ID (Device ID (page 36)) of the accessory.

●

●

● ACID - 16-bit little endian unsigned Accessory Category Identifier,which indicates the category that best
describes the primary function of the accessory. This must have a range of 1-65535. This must take one of
the values defined in the Table 12-3 (page 254). The Category Identifier must not change except during a
firmware update.

● GSN - 16-bit little endian unsigned Global State Number, which represents a change in the value of any
of the characteristics that supports Disconnected Events (page 133). The state number must increment
only once for multiple characteristic value changes while in a connected state or while in disconnected
state until the accessory state changes again from connected to disconnected or disconnected to connected.
This value must have a range of 1-65535 and wrap to 1 when it overflows. This value must persist across
reboots, power cycles, etc. This value must be reset back to 1 when factory reset or a firmware update
occurs on the accessory.

● CN - 8 bits for Configuration Number, with a default starting value of 1. Accessories must increment the

config number after a firmware update. This value must have a range of 1-255 and wrap to 1 when it
overflows. This value must persist across reboots, power cycles and firmware updates.

● CV - 8 bit little endian Compatible Version, this value shall be set to 0x02 for this version of the HAP BLE.

Table 6-29 Manufacturer Specific Data

Length

AD Type

Company ID

0x12

0xFF

0x4C 0x00

Type

0x06

AIL

0xXX

SF

48-bit Device ID

0x00/0x01

0xXX 0xXX 0xXX 0xXX
0xXX 0xXX

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

124

6. HomeKit Accessory Protocol for Bluetooth LE Accessories
6.4 Bluetooth LE

Table 6-30 Manufacturer Specific Data - continued

ACID

GSN

0xXX 0xXX

0xXX 0xXX

CN

0xXX

CV

0x02

Table 6-31

Advertising Intervals

Value

0x2D

0x4D

0x6D

0x8D

0xAD

0xCD

0xED

Advertising Interval

10-25 ms

26-100 ms

101-300 ms

301-500 ms

501-1250 ms

1251-2500 ms

> 2500 ms

Table 6-32

HAP Pairing Status Flag

Value

Description

0b0

0b1

The accessory has been paired with a controllers.

The accessory has not been paired with any controllers.

6.4.2.3 Local Name

●

●

Length byte that corresponds to the total length of the local name plus the Local Name AD type.
Local Name AD type, 0x09 or 0x08, as defined by the Bluetooth Core Specification.
The Advertisement data shall contain either the 'Shortened Local Name' or the 'Complete Local Name' If
the complete local name can be included in the Advertisement data, the AD type of 0x09 (Complete Local
Name) must be used, else the AD type of of 0x08 (Shortened Local Name) must be used with the name
truncated to fit in the advertisement data. When the advertisement includes the shortened local name
the accessory should include the complete local name in the Scan Response.

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

125

6. HomeKit Accessory Protocol for Bluetooth LE Accessories
6.4 Bluetooth LE

Table 6-33

Local Name

Length

AD Type

Value

0xXX

0x08/0x09

0xXX 0xXX ... 0xXX

6.4.3 HAP-BLE 2.0 Protocol Information Service
This service describes Protocol Information Service applicable to HAP-BLE 2.0.

Property

UUID

Type

Value

000000A2-0000-1000-8000-0026BB765291

public.hap.service.protocol.information.service

Required Characteristics

Protocol Version Characteristic (page 126)

6.4.3.1 Protocol Version Characteristic
This is a version string with the following format: "XX.YY.ZZ". This must be set to "02.01.00" for this version of
HAP BLE. Please see Version (page 164) for detailed definition of the characteristic.

6.4.4 Attributes of HAP Services and Characteristics
HAP-BLE 2.0 accessories must include the Accessory Information (page 216) and the HAP-BLE 2.0 Protocol
Information Service (page 126) in its GATT database.

6.4.4.1 HAP Services and HAP Characteristics
Services containing the Service Instance ID (page 127) and characteristics that contain the Characteristic Instance
ID  (page 128) are defined as HAP service and HAP characteristic respectively.

6.4.4.2 Instance IDs

●

●

●

Every HAP service and characteristic must include an instance ID that is unique and assigned from the
same number pool.
The instance IDs must be maintained for the lifetime of the HAP pairing.
The instance IDs must have values > 0 and a maximum value of (2^ 16)-1, 65535.

● Accessory Information (page 216) must have an instance ID of 1.

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

126

6. HomeKit Accessory Protocol for Bluetooth LE Accessories
6.4 Bluetooth LE

6.4.4.3 Service Instance ID
Every HAP service must have a read-only Service Instance ID characteristic (SvcID) with

UUID E604E95D-A759-4817-87D3-AA005083A0D1.

The SvcID is read using standard GATT read request (this implies that the HAP Characteristic Read Request
procedure is not used to read the service instance ID characteristic). The value of this characteristic is a 16-bit
unsigned integer encoded as a 2 byte little endian integer. This characteristic must always be read in the clear
(with and without an established HAP secure session).

(Note: SvcID characteristic must not have its own characteristic instance ID)

6.4.4.4 HAP Service Properties
The service properties is a multi byte value where only 2 bytes shall be used in this version. The value is encoded
as a 2 byte little endian integer.

Accessories must include the "HAP Service Properties" characteristic only if it supports non-default properties
or has linked services. Other services must not include this characteristic.

Accessories must not change its service signature once it is paired with a controller.

Table 6-34

HAP Service Properties

BitMask

Description

0x0001

0x0002

Primary Service

Hidden Service

6.4.4.4.1 HAP Linked Services
Accessories must include a HAP-Param-Linked-Services in its service signature read response as an array of
linked services instance ids. When the service does not link to other services it must return an empty list with
length = 0.

6.4.4.5 Characteristic Descriptors included in the GATT Database

6.4.4.5.1 Bluetooth LE Characteristic Properties

●

The Bluetooth LE characteristic properties as defined in GATT Bluetooth Core Specification must only be
a combination of the following: 'Read', 'Write' and 'Indicate'. All other possible properties are not permitted.

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

127

6. HomeKit Accessory Protocol for Bluetooth LE Accessories
6.4 Bluetooth LE

● All Bluetooth LE characteristics that map to a HAP characteristics must have the 'Read' and 'Write' property

set to allow for read and write to the LE characteristic. Note that the Bluetooth LE Characteristic only
indicates the GATT Read / Write and Indicate operations possible on the LE characteristic, the properties
associated with the HAP characteristic is indicated by the HAP Characteristic Properties Descriptor.
● Characteristics that support HAP Events must indicate by setting the 'Indicate' properly on the LE

Characteristic.

6.4.4.5.2 Characteristic Instance ID
The Characteristic Instance ID is a custom characteristic descriptor with

UUID DC46F0FE-81D2-4616-B5D9-6ABDD796939A. The accessory must expose the instance ID of each
characteristic in the Characteristic Instance ID Descriptor. The value of the descriptor is a 16-bit unsigned
integer encoded as a 2 byte little endian integer. This descriptor value must support always being read in the
clear (with and without a security session).

6.4.4.5.3 Client Characteristic Configuration
Characteristics supporting HAP Notifications (page 133) must support the Client Characteristics Configuration
descriptor with the 'Indication' bit, All other configurations are reserved and shall not be used. This descriptor
value must support always being read in the clear, i.e. with or without a security session.

6.4.4.5.4 Service Signature Characteristic
The HAP service should include an optional "Service Signature" HAP characteristic with UUID
000000A5-0000-1000-8000-0026BB765291 that support HAP procedures for services. This Service Signature
characteristic is a HAP Characteristic with a valid characteristic instance id descriptor. The service signature
procedures is used to read additional information pertaining to the service such as the supported properties
for the service and the list of services that the service links to.

6.4.4.6 Characteristic Metadata Descriptors
HAP Characteristics can include additional descriptors that describe HAP properties, description, format and
valid values for the characteristic. These descriptors are read by the controller using the HAP Characteristic
Signature Read Procedure. These descriptors must not be published in the Bluetooth LE GATT database.

6.4.4.6.1 HAP Characteristic Properties
This descriptor is used to specify HAP specific properties associated with the characteristic. This descriptor is
a multi byte value where only 2 bytes shall be used in this version. The value of this descriptor is encoded as
a 2 byte little endian integer.

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

128

6. HomeKit Accessory Protocol for Bluetooth LE Accessories
6.4 Bluetooth LE

Table 6-35

HAP Characteristic Description

BitMask

Description

0x0001

0x0002

0x0004

0x0008

0x0010

0x0020

0x0040

0x0080

0x0100

Characteristic Supports Read

Characteristic Supports Write

Characteristic Supports Additional Authorization Data

Characteristic Requires HAP Characteristic Timed Write Procedure

Characteristics Supports Secure Reads

Characteristics Supports Secure Writes

Characteristic Hidden from User

Characteristic Notifies Events in Connected State

Characteristic Notifies Events in Disconnected State

6.4.4.6.2 Characteristic User Description
This descriptor contains a user description for the characteristic which is an UTF-8 string that is a user textual
description of the characteristic.

6.4.4.6.3 Characteristic Presentation Format
This descriptor is defined as per the Bluetooth SIG-defined Characteristic Presentation Format descriptor. Only
the 'Format' and 'Unit' fields shall be used, the other fields shall be set according to the following rules:

●

Exponent shall be set to 0

● Namespace shall be set to 1
● Description shall be set to 0

BT SIG-defined Format shall be mapped to HAP Formats according to Table 6-36 (page 129)

Table 6-36

HAP Format to BT SIG Format mapping

HAP Format

BT SIG Format Value

BT SIG Description

bool

uint8

uint16

0x01

0x04

0x06

unsigned 1-bit; 0 = false, 1 = true

unsigned 8-bit integer

unsigned 16-bit integer

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

129

6. HomeKit Accessory Protocol for Bluetooth LE Accessories
6.4 Bluetooth LE

HAP Format

BT SIG Format Value

BT SIG Description

uint32

uint64

int

float

string

data

0x08

0x0A

0x10

0x14

0x19

0x1B

unsigned 32-bit integer

unsigned 64-bit integer

signed 32-bit integer

IEEE-754 32-bit floating point

UTF-8 string

Opaque structure

BT SIG-defined Unit shall be mapped to HAP Units according to Table 6-37 (page 130)

Table 6-37

HAP Unit to BT SIG Unit mapping

HAP Units

BT SIG Assigned Number

Type

celsius

0x272F

arcdegrees

percentage

unitless

lux

seconds

0x2763

0x27AD

0x2700

0x2731

0x2703

org.bluetooth.unit.thermodynamic_ temperature.degree_
celsius

org.bluetooth.unit.plane_ angle.degree

org.bluetooth.unit.percentage

org.bluetooth.unit.unitless

org.bluetooth.unit.illuminance.lux

org.bluetooth.unit.time.second

6.4.4.6.4 Minimum and Maximum Length Descriptor
The Bluetooth SIG-defined 'Valid Range' descriptor (see https://developer.bluetooth.org/gatt/descriptors/) is
used to specify the Minimum Value and Maximum Value for the characteristic. The format for this descriptors
value is the same as the characteristics format, this descriptor must only be used for formats of integer types
or float.

6.4.4.6.5 Step Value Descriptor
This descriptor is used to specify the minimum step value of the characteristic. The format for this descriptors
value is the same as the characteristics format, this descriptor must only be used for formats of integer types
or float.

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

130

6. HomeKit Accessory Protocol for Bluetooth LE Accessories
6.4 Bluetooth LE

6.4.5 Additional HAP Characteristic Requirements
Characteristics which are part of a HAP Service must contain the descriptors defined in Table 6-38 (page 131)
only, all other descriptors are reserved. The descriptor values must not change while the accessory is paired
with a controller.

Table 6-38

Bluetooth LE Characteristic Descriptors

Type

UUID

Characteristic Instance ID (Custom Descriptor)

DC46F0FE-81D2-4616-B5D9-6ABDD796939A

HAP Characteristic Properties (Custom
Descriptor)

org.bluetooth.descriptor.gatt.characteristic_
presentation_ format

org.bluetooth.descriptor.gatt.characteristic_
user_ description

org.bluetooth.descriptor.gatt.client _
characteristic_ configuration

org.bluetooth.descriptor.gatt. valid_ range

Step Value (Custom Descriptor)

Valid Values (Custom Descriptor)

Valid Values Range (Custom Descriptor)

NA

NA

NA

NA

NA

NA

NA

NA

Required

Yes

Yes

Yes

No

No

No

No

No

No

6.4.5.1 Characteristic Format Types
The format types for characteristics follow the format types defined by GATT and Apple-defined
Characteristics (page 144).

Apple defined characteristics shall follow the format types defined for the characteristics and shall not include
the Characteristic Presentation Format Descriptor descriptors to redefine the format type. Section Apple-defined
Characteristics (page 144) defines some characteristics as having a format type of TLV8. In these cases, the data
payload may represent one or more TLV8 values as defined by the characteristic.

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

131

6. HomeKit Accessory Protocol for Bluetooth LE Accessories
6.4 Bluetooth LE

6.4.5.2 Characteristic with Additional Authorization Data
Some of the characteristics defined in Apple-defined Characteristics (page 144) supports additional authorization
data by default when included as part of particular services. The characteristic and service combination that
support additional authorization data by default are Target Door State (page 160) in the Garage Door
Opener (page 217) and the Lock Target State (page 155) in the Garage Door Opener (page 217) and Lock
Mechanism (page 219). Other characteristics can also support additional authorization data. Characteristics that
support additional authorization data indicates this support by having the HAP Characteristic Properties (page
128) descriptor with the bit set to indicate Characteristic Supports Additional Authorization
Data as defined in Table 6-35 (page 129). An accessory with a characteristic supporting additional authorization
data may not always require additional authorization data to be present. When additional authorization data
is present it is included as an additional type to the TLV8 format along with the Value and Remote TLV types.

If the accessory receives a write request without the authorization data on characteristics that currently requires
it, the accessory must return the status code Insufficient Authorization from Table 6-26 (page 116). If
the accessory received a write request with additional authorization data when it does not require it, the
accessory shall ignore the authorization data and accept the write request.

6.4.5.3 Valid Values Descriptor
This descriptor is used to specify the valid values supported by the characteristic. This descriptor shall only be
used for Apple defined characteristics of format unit8, that support a list of defined enumeration values.

The format for this descriptor is an n-byte sequence of UINT8 in ascending order where each byte contains
one of the valid value supported by the accessory.

This descriptor shall only be used when the characteristic supports only a subset of the defined values.

6.4.5.4 Valid Values Range Descriptor
This descriptor is used to specify a range of valid values supported by the characteristic. This descriptor shall
only be used for Apple defined characteristics of format uint8 that supports a list of list of defined enumeration
values.

This descriptor shall be used when it is more efficient to specify a list of valid values as a range rather than
individual values.

This descriptor can be used in conjunction with the "Valid Values Descriptor".

The format for this descriptor is a list of 2-byte sequences of UINT8's in ascending order where the first byte
is the starting value and the second byte is the ending value of the valid values range.

This descriptor shall only be used when the characteristic supports only a subset of the defined values.

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

132

6. HomeKit Accessory Protocol for Bluetooth LE Accessories
6.4 Bluetooth LE

Omission of both the "Valid Values Descriptor" and "Valid Values Range Descriptor" implies that the characteristic
supports all the defined enumeration values for this characteristic.

6.4.6 HAP Notifications
● Characteristics that support HAP notifications must have the 'Indicate' property set on their Bluetooth LE

characteristic.
The characteristic must support the Bluetooth SIG's Characteristic Client Configuration Descriptor (see
Bluetooth Core Specification) to toggle Bluetooth LE indications after a secure session is established.
The accessory must also support the GSN as specified in Manufacturer Data (page 124)

●

●

6.4.6.1 Disconnected Events
When the value associated with a characteristic that notifies a change while in a disconnected state changes,
the Global State Number (GSN) may be incremented and reflected in the Bluetooth LE advertisement data of
the accessory as specified in Manufacturer Data (page 124).

Disconnected events are always enabled when the characteristic supports it. Characteristics supporting
disconnected events must support Connected Events (page 133). The accessory shall use disconnected events
only to reflect important state changes in the accessory that might need to be notified to the user. For example
a contact sensor state change or a current door state change indications are good use cases for disconnected
events, whereas a temperature sensor must not use disconnected events to reflect every change in the
temperature reading. After updating the GSN as specified in Section Manufacturer Data (page 124) in the
disconnected state the accessory must use a 20 ms advertising interval for at least 5 seconds.

6.4.6.2 Connected Events
When a controller is connected to an accessory the controller may choose to register for Bluetooth LE indications
for some characteristics. When an update occurs on those characteristics, the accessory must send a zero-length
indication to the controller for that characteristic. The zero-length indication must only be sent to a controller
with an established security session. The controller will then perform a HAP-secured read of the characteristic.
Indications shall not be sent to the controller that changed the value of a characteristic if the change was due
to a write from the controller.

6.4.7 Security
Authenticated encryption for HAP over Bluetooth LE is provided by two mechanisms: Pairing (page 134) and
Session Security (page 134).

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

133

6. HomeKit Accessory Protocol for Bluetooth LE Accessories
6.4 Bluetooth LE

6.4.7.1 Pairing
Pairing establishes a bi-directional, cryptographic relationship between a controller and an accessory.
Pairing (page 34) describes the process for pairing a controller and an accessory over GATT and features two
main components:

●

●

Pair Setup: The process that creates a valid pairing between a controller and an accessory. This process
exchanges long-term cryptographic public keys.
Pair Verify: The process that verifies a valid pairing and establishes a shared secret used to secure the HAP
session.

6.4.7.2 Session Security
Once the controller and accessory have an ephemeral shared secret, both the controller and the accessory use
the shared secret to derive the read and write keys for session security:

AccessoryToControllerKey = HKDF-SHA-512 of

InputKey
Salt
Info
OutputSize = 32 bytes

= <Pair Verify shared secret>
= "Control-Salt"
= "Control-Read-Encryption-Key"

ControllerToAccessoryKey = HKDF-SHA-512 of

InputKey
Salt
Info
OutputSize = 32 bytes

= <Pair Verify shared secret>
= "Control-Salt"
= "Control-Write-Encryption-Key"

The controller and accessory use the derived keys in the following manner:

Table 6-39

Derived Key Usage

Encryption Key

Decryption Key

Accessory

AccessoryToControllerKey

ControllerToAccessoryKey

Controller

ControllerToAccessoryKey

AccessoryToControllerKey

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

134

6. HomeKit Accessory Protocol for Bluetooth LE Accessories
6.5 Testing Bluetooth LE Accessories

Each message is secured with the AEAD algorithm AEAD_CHACHA20_POLY1305 as specified in Section 2.8 of
https://tools.ietf.org/html/draft-irtf-cfrg-chacha20-poly1305-01. The 32-bit fixed-common part of the 96-bit
nonce is all zeros: 00 00 00 00.

Accessories must tear down the security session after a Bluetooth LE disconnection occurs. Accessories must
support multiple iterations of Pair Verify on a single Bluetooth LE connection, e.g. a controller connects, performs
Pair Verify, and a later time in the same connection, performs Pair Verify again. When a new Pair Verify request
is received, the accessory must tear down its security session and respond to any pending transactions with
an error.

6.4.7.3 Securing HAP PDUs
When a secure session is established all HAP PDU's are secured using HAP the session security. For example,
if HAP Request PDU of size 'n' is to be secured using HAP session security, the actual data received by the
GATT server must be the following:

<n: encrypted HAP Request PDU's>
<16:authTag>

The authTag must be appended to the encrypted value and must be sent as part of the same GATT message.
The HAP server must verify and decrypt the received payload and process the HAP PDU.

6.4.8 Firmware Update Requirements
In addition to Firmware Updates (page 33) the following additional requirements are applicable for Bluetooth
accessories
● Bluetooth LE interface must support firmware updates over Bluetooth LE.
● Accessories supporting random static Bluetooth LE device address must use a new Bluetooth LE device

address after a firmware update.

6.5 Testing Bluetooth LE Accessories
1.
2. Accessory must include Accessory Information Service and Protocol Information Service with the required

Accessory must support only the HAP-BLE 2.0 advertisement format.

mandatory characteristics.
The Protocol Version characteristic value in the Protocol Information Service must match the value specified
by this specification.
The Compatible Version (CV) in the advertisement packet must match the value specified in this specification.

3.

4.

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

135

6. HomeKit Accessory Protocol for Bluetooth LE Accessories
6.5 Testing Bluetooth LE Accessories

BLE 2.0 accessories must not support HAP-BLE 1.0 procedures (read/write etc)

5.
6. Accessory must handle malformed PDUs and fail the request.
7. Accessory must handle fragmented PDUs.
8. Accessory should be able to generate fragmented PDUs.
9. Accessory must accept new HAP procedure even if the previous procedure was not completed.
10. Accessory must support only one HAP procedure on a characteristic at any point in time.
11. Accessory should support parallel HAP procedures on different characteristics.
12. Accessory must reject GATT Read Requests on a HAP characteristic if it was not preceded by an GATT Write

Request with the same transaction ID at most 10 seconds prior.

13. Accessory must indicate that Security Class characteristics require HAP-Characteristic-Timed-Write using

the additional HAP characteristic property.

14. Accessory must return the same transaction ID in the HAP response that was part of the HAP request.
15. Accessory must reject HAP-Characteristic-Write-Request on characteristics that require timed writes.
16. Accessory must reject HAP-Characteristic-Write/Read/Timed-Write/Execute-Write Request to characteristics

with instance ID that does not match the characteristic's instance ID.

17. Accessory must reject HAP-Characteristic-Execute-Write request after TTL and discard the queued HAP-

Timed-Write request.

18. Accessory must not allow the accessory firmware to be downgraded.
19. Accessory must support a controller refreshing the security session.
20. Accessory must maintain the security session for a maximum of 30 seconds. After 30 seconds, the bluetooth

link must be disconnected from the accessory unless the security session was refreshed.

21. Accessory must drop any HAP procedure continuation across security sessions (new session or refreshes).
22. Accessory must support HAP-Characteristic-Signature-Read-Request/Response for each HAP characteristic

published.

23. Accessory must support the HAP-Characteristic-Signature-Read procedure at any time after a a secure

session is established.

24. App for accessory firmware update should check and warn user of iOS version requirement on all controllers

for the selected firmware.

25. Accessory must increment the config number after a firmware update.
26. Accessory must maintain the service and characteristic instance IDs for unchanged characteristics and

services after a firmware update.After a Bluetooth link is established the first HAP procedure must begin
within 10 seconds. Accessories must drop the Bluetooth Link if the controller fails to start a HAP
procedure within 10 seconds of establishing the Bluetooth link.

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

136

6. HomeKit Accessory Protocol for Bluetooth LE Accessories
6.5 Testing Bluetooth LE Accessories

27. Accessory must not re-use an instance id from a service or characteristic that was removed from the
current firmware update.
28. Accessory must tear down the security session when the Bluetooth LE link disconnects.
29. Accessory must support multiple iterations of pair verify on the same Bluetooth LE connection.
30. Accessories must only indicate disconnected event support on characteristic whose change may require
user attention.
31. Changes on characteristics that do not support disconnected events must not change the global state
number.
32. Multiple changes to characteristic supporting disconnected events white in disconnected state or in
connected state must change state number only once.
33. Accessories must generate a new random Unique Identifier after every factory reset.
34. Accessories must not include the characteristic metadata in the GATT database.
35. Accessories must support characteristic signature read procedure with and without a secure session.
36. Accessories that include characteristic metadata must return the characteristic metadata descriptors in the
characteristic signature read response.
37. Accessories must implement a 10 second HAP procedure timeout, all HAP procedures including Pair-Verify
and Pair-Resume (with the exception of Pair-Setup) must complete within 10 seconds, if a procedure fails to
complete within the procedure timeout the accessory must drop the security session and also drop the
Bluetooth link.

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

137

THIS PAGE INTENTIONALLY LEFT BLANK.

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

138

THIS PAGE INTENTIONALLY LEFT BLANK.

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

139

THIS PAGE INTENTIONALLY LEFT BLANK.

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

140

THIS PAGE INTENTIONALLY LEFT BLANK.

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

141

THIS PAGE INTENTIONALLY LEFT BLANK.

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

142

THIS PAGE INTENTIONALLY LEFT BLANK.

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

143

8. Apple-defined Characteristics

8.1 Overview
This section specifies pre-defined characteristics and their properties. Each characteristic has a unique UUID.
Both long and short forms for each UUID are provided, with the short version listed in parentheses.

Accessories must use Apple-defined characteristics to expose functionality of the accessory if they are available;
e.g., a temperature sensor must use the Apple-defined Current Temperature (page 148) characteristic rather
than defining its own custom characteristic to expose the same functionality.

Note that all the characteristics with the format "bool" must expose/accept a Boolean value expressed as one
of the following: true, false, 0 (false), or 1 (true).

Additionally, if a set of valid values is specified, for example as in Temperature Display Units (page 163), the
characteristic must only expose/accept these values.

8.1.1 Overriding Properties
Each of the characteristics in this chapter is defined by Apple. Some include default properties about the
characteristic, such as a minimum value or maximum value. The following properties of an Apple-defined
characteristic may be modified in order to better fit the specific application:
● Minimum Value
● Maximum Value

●

Step Value

● Maximum Length
● Maximum Data Length

An example of modifying the default properties of an Apple-defined characteristic is using the Current
Temperature characteristic, which has a default minimum value of 0° C, for an outdoor temperature sensor.
Rather than creating a new characteristic, the accessory can simply set the "minimum value" property to -30°
C.

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

144

8. Apple-defined Characteristics
8.2 Administrator Only Access

8.2 Administrator Only Access
This mode implies that when enabled, the device will only accept administrator access.

Property

Value

UUID

Type

00000001-0000-1000-8000-0026BB765291

public.hap.characteristic.administrator-only-access

Permissions

Paired Read, Paired Write, Notify

Format

bool

8.3 Audio Feedback
This characteristic describes whether audio feedback (e.g. a beep, or other external sound mechanism) is
enabled.

Property

Value

UUID

Type

00000005-0000-1000-8000-0026BB765291

public.hap.characteristic.audio-feedback

Permissions

Paired Read, Paired Write, Notify

Format

bool

8.4 Brightness
This characteristic describes a perceived level of brightness, e.g. for lighting, and can be used for backlights or
color. The value is expressed as a percentage (%) of the maximum level of supported brightness.

Property

Value

UUID

Type

00000008-0000-1000-8000-0026BB765291

public.hap.characteristic.brightness

Permissions

Paired Read, Paired Write, Notify

Format

int

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

145

8. Apple-defined Characteristics
8.5 Cooling Threshold Temperature

Property

Minimum Value

Maximum Value

Step Value

Unit

Value

0

100

1

percentage

8.5 Cooling Threshold Temperature
This characteristic describes the cooling threshold in Celsius for devices that support simultaneous heating
and cooling. The value of this characteristic represents the 'maximum temperature' that must be reached
before cooling is turned on.

For example, if the Target Heating Cooling State (page 161) is set to "Auto" and the current temperature goes
above the 'maximum temperature', then the cooling mechanism should turn on to decrease the current
temperature until the 'minimum temperature' is reached.

Property

Value

UUID

Type

0000000D-0000-1000-8000-0026BB765291

public.hap.characteristic.temperature.cooling-threshold

Permissions

Paired Read, Paired Write, Notify

Format

Minimum Value

Maximum Value

Step Value

Unit

float

10

35

0.1

celsius

8.6 Current Door State
This characteristic describes the current state of a door.

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

146

8. Apple-defined Characteristics
8.7 Current Heating Cooling State

Property

Value

UUID

Type

0000000E-0000-1000-8000-0026BB765291

public.hap.characteristic.door-state.current

Permissions

Paired Read, Notify

Format

uint8

Minimum Value

Maximum Value

Step Value

Valid Values

0

4

1

0

1

2

3

4

"Open. The door is fully open."

"Closed. The door is fully closed."

"Opening. The door is actively opening."

"Closing. The door is actively closing."

"Stopped. The door is not moving, and it is not fully open nor fully closed."

5-255

"Reserved"

8.7 Current Heating Cooling State
This characteristic describes the current mode of a device that supports cooling or heating its environment,
e.g. a thermostat is "heating" a room to 75 degrees Fahrenheit.

Property

Value

UUID

Type

0000000F-0000-1000-8000-0026BB765291

public.hap.characteristic.heating-cooling.current

Permissions

Paired Read, Notify

Format

uint8

Minimum Value

0

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

147

8. Apple-defined Characteristics
8.8 Current Relative Humidity

Property

Value

Maximum Value

Step Value

Valid Values

0

1

2

2

1

"Off."

"Heat. The Heater is currently on."

"Cool. Cooler is currently on."

3-255

"Reserved"

8.8 Current Relative Humidity
This characteristic describes the current relative humidity of the environment that contains the device. The
value is expressed in percentage (%).

Property

Value

UUID

Type

00000010-0000-1000-8000-0026BB765291

public.hap.characteristic.relative-humidity.current

Permissions

Paired Read, Notify

Format

Minimum Value

Maximum Value

Step Value

Unit

float

0

100

1

percentage

8.9 Current Temperature
This characteristic describes the current temperature of the environment in Celsius irrespective of display units
chosen in Temperature Display Units (page 163).

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

148

8. Apple-defined Characteristics
8.10 Firmware Revision

Property

Value

UUID

Type

00000011-0000-1000-8000-0026BB765291

public.hap.characteristic.temperature.current

Permissions

Paired Read, Notify

Format

Minimum Value

Maximum Value

Step Value

Unit

float

0

100

0.1

celsius

8.10 Firmware Revision
This characteristic describes a firmware revision string x[.y[.z]] (e.g. "100.1.1"):
● <x> is the major version number, required.
● <y> is the minor version number, required if it is non-zero or if <z> is present.
● <z> is the revision version number, required if non-zero.

The firmware revision must follow the below rules:
● <x> is incremented when there is significant change. e.g.,1.0.0, 2.0.0, 3.0.0, etc.
● <y> is incremented when minor changes are introduced such as 1.1.0, 2.1.0, 3.1.0 etc.
● <z> is incremented when bug-fixes are introduced such as 1.0.1, 2.0.1, 3.0.1 etc.

●

●

Subsequent firmware updates can have a lower <y> version only if <x> is incremented
Subsequent firmware updates can have a lower <z> version only if <x> or <y> is incremented

The characteristic value must change after every firmware update.

Property

Value

UUID

Type

00000052-0000-1000-8000-0026BB765291

public.hap.characteristic.firmware.revision

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

149

8. Apple-defined Characteristics
8.11 Hardware Revision

Property

Value

Permissions

Paired Read

Format

string

8.11 Hardware Revision
This characteristic describes a hardware revision string x[.y[.z]] (e.g. "100.1.1") and tracked when the board or
components of the same accessory is changed :
● <x> is the major version number, required.
● <y> is the minor version number, required if it is non-zero or if <z> is present.
● <z> is the revision version number, required if non-zero.

The hardware revision must follow the below rules:
● <x> is incremented when there is significant change. e.g.,1.0.0, 2.0.0, 3.0.0, etc.
● <y> is incremented when minor changes are introduced such as 1.1.0, 2.1.0, 3.1.0 etc.
● <z> is incremented when bug-fixes are introduced such as 1.0.1, 2.0.1, 3.0.1 etc.

●

●

Subsequent firmware updates can have a lower <y> version only if <x> is incremented
Subsequent firmware updates can have a lower <z> version only if <x> or <y> is incremented

The characteristic value must change after every hardware update.

Property

Value

UUID

Type

00000053-0000-1000-8000-0026BB765291

public.hap.characteristic.hardware.revision

Permissions

Paired Read

Format

string

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

150

8. Apple-defined Characteristics
8.12 Heating Threshold Temperature

8.12 Heating Threshold Temperature
This characteristic describes the heating threshold in Celsius for devices that support simultaneous heating
and cooling. The value of this characteristic represents the 'minimum temperature' that must be reached before
heating is turned on.

For example, if the Target Heating Cooling State (page 161) is set to "Auto" and the current temperature goes
below the 'minimum temperature', then the heating mechanism should turn on to increase the current
temperature until the 'minimum temperature' is reached.

Property

Value

UUID

Type

00000012-0000-1000-8000-0026BB765291

public.hap.characteristic.temperature.heating-threshold

Permissions

Paired Read, Paired Write, Notify

Format

Minimum Value

Maximum Value

Step Value

Unit

float

0

25

0.1

celsius

8.13 Hue
This characteristic describes hue or color.

Property

Value

UUID

Type

00000013-0000-1000-8000-0026BB765291

public.hap.characteristic.hue

Permissions

Paired Read, Paired Write, Notify

Format

Minimum Value

Maximum Value

float

0

360

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

151

8. Apple-defined Characteristics
8.14 Identify

Property

Step Value

Unit

Value

1

arcdegrees

8.14 Identify
This characteristic is used to cause the accessory to run its identify routine.

Only the Accessory Information (page 216) is allowed to contain the "identify" characteristic.

Property

Value

UUID

Type

00000014-0000-1000-8000-0026BB765291

public.hap.characteristic.identify

Permissions

Paired Write

Format

bool

8.15 Lock Control Point
The device accepts writes to this characteristic to perform vendor-specific actions as well as those defined by
the Lock Management (page 218) of the Lock (page 237) . For example, user management related functions
should be defined and performed using this characteristic.

Property

Value

UUID

Type

00000019-0000-1000-8000-0026BB765291

public.hap.characteristic.lock-management.control-point

Permissions

Paired Write

Format

tlv8

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

152

8. Apple-defined Characteristics
8.16 Lock Current State

8.16 Lock Current State
The current state of the physical security mechanism (e.g. deadbolt).

Property

Value

UUID

Type

0000001D-0000-1000-8000-0026BB765291

public.hap.characteristic.lock-mechanism.current-state

Permissions

Paired Read, Notify

Format

uint8

Minimum Value

Maximum Value

Step Value

Valid Values

0

3

1

0

1

2

3

4-255

"Unsecured"

"Secured"

"Jammed"

"Unknown"

"Reserved"

8.17 Lock Last Known Action
The last known action of the lock mechanism (e.g. deadbolt).

Property

Value

UUID

Type

0000001C-0000-1000-8000-0026BB765291

public.hap.characteristic.lock-mechanism.last-known-action

Permissions

Paired Read, Notify

Format

uint8

Minimum Value

0

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

153

8. Apple-defined Characteristics
8.18 Lock Management Auto Security Timeout

Property

Value

Maximum Value

Step Value

Valid Values

8

1

0

1

2

3

4

5

6

7

8

"Secured using physical movement, interior"

"Unsecured using physical movement, interior"

"Secured using physical movement, exterior"

"Unsecured using physical movement, exterior"

"Secured with keypad"

"Unsecured with keypad"

"Secured remotely"

"Unsecured remotely"

"Secured with Automatic Secure timeout"

9-255

"Reserved"

8.18 Lock Management Auto Security Timeout
A value greater than 0 indicates if the lock mechanism enters the unsecured state, it will automatically attempt
to enter the secured state after n seconds, where n is the value provided in the write. A value of 0 indicates
this feature is disabled.

Property

Value

UUID

Type

0000001A-0000-1000-8000-0026BB765291

public.hap.characteristic.lock-management.auto-secure-timeout

Permissions

Paired Read, Paired Write, Notify

Format

Unit

uint32

seconds

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

154

8. Apple-defined Characteristics
8.19 Lock Target State

8.19 Lock Target State
The target state of the physical security mechanism (e.g. deadbolt).

Property

Value

UUID

Type

0000001E-0000-1000-8000-0026BB765291

public.hap.characteristic.lock-mechanism.target-state

Permissions

Paired Read, Paired Write, Notify

Format

uint8

Minimum Value

Maximum Value

Step Value

Valid Values

0

1

1

0

1

2-255

"Unsecured"

"Secured"

"Reserved"

8.20 Logs
Read from this characteristic to get timestamped logs from the device. The data is in TLV8 format as defined
by the associated service profile. The Lock Management (page 218), for example, defines its own specific
structure for the log data.

Property

Value

UUID

Type

0000001F-0000-1000-8000-0026BB765291

public.hap.characteristic.logs

Permissions

Paired Read, Notify

Format

tlv8

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

155

8. Apple-defined Characteristics
8.21 Manufacturer

8.21 Manufacturer
This characteristic contains the name of the company whose brand will appear on the accessory, e.g., "Acme".

Property

UUID

Type

Value

00000020-0000-1000-8000-0026BB765291

public.hap.characteristic.manufacturer

Permissions

Paired Read

Format

string

Maximum Length

64

8.22 Model
This characteristic contains the manufacturer-specific model of the accessory, e.g. "A1234".

Property

UUID

Type

Value

00000021-0000-1000-8000-0026BB765291

public.hap.characteristic.model

Permissions

Paired Read

Format

string

Maximum Length

64

8.23 Motion Detected
This characteristic indicates if motion (e.g. a person moving) was detected.

Property

Value

UUID

Type

00000022-0000-1000-8000-0026BB765291

public.hap.characteristic.motion-detected

Permissions

Paired Read, Notify

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

156

8. Apple-defined Characteristics
8.24 Name

Property

Format

Value

bool

8.24 Name
This characteristic describes a name.

Property

UUID

Type

Value

00000023-0000-1000-8000-0026BB765291

public.hap.characteristic.name

Permissions

Paired Read

Format

string

Maximum Length

64

8.25 Obstruction Detected
This characteristic describes the current state of an obstruction sensor, such as one that is used in a garage
door. If the state is true then there is an obstruction detected.

Property

Value

UUID

Type

00000024-0000-1000-8000-0026BB765291

public.hap.characteristic.obstruction-detected

Permissions

Paired Read, Notify

Format

bool

8.26 On
This characteristic represents the states for "on" and "off."

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

157

8. Apple-defined Characteristics
8.27 Outlet In Use

Property

Value

UUID

Type

00000025-0000-1000-8000-0026BB765291

public.hap.characteristic.on

Permissions

Paired Read, Paired Write, Notify

Format

bool

8.27 Outlet In Use
This characteristic describes if the power outlet has an appliance e.g., a floor lamp, physically plugged in. This
characteristic is set to True even if the plugged-in appliance is off.

Property

Value

UUID

Type

00000026-0000-1000-8000-0026BB765291

public.hap.characteristic.outlet-in-use

Permissions

Paired Read, Notify

Format

bool

8.28 Rotation Direction
This characteristic describes the direction of rotation of a fan.

Property

Value

UUID

Type

00000028-0000-1000-8000-0026BB765291

public.hap.characteristic.rotation.direction

Permissions

Paired Read, Paired Write, Notify

Format

Minimum Value

Maximum Value

int

0

1

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

158

8. Apple-defined Characteristics
8.29 Rotation Speed

Property

Step Value

Valid Values

0

1

2-255

Value

1

"Clockwise"

"Counter-clockwise"

"Reserved"

8.29 Rotation Speed
This characteristic describes the rotation speed of a fan.

Property

Value

UUID

Type

00000029-0000-1000-8000-0026BB765291

public.hap.characteristic.rotation.speed

Permissions

Paired Read, Paired Write, Notify

Format

Minimum Value

Maximum Value

Step Value

Unit

float

0

100

1

percentage

8.30 Saturation
This characteristic describes color saturation.

Property

Value

UUID

Type

0000002F-0000-1000-8000-0026BB765291

public.hap.characteristic.saturation

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

159

8. Apple-defined Characteristics
8.31 Serial Number

Property

Value

Permissions

Paired Read, Paired Write, Notify

Format

Minimum Value

Maximum Value

Step Value

Unit

float

0

100

1

percentage

8.31 Serial Number
This characteristic contains the manufacturer-specific serial number of the accessory, e.g. "1A2B3C4D5E6F".
The length must be greater than 1.

Property

UUID

Type

Value

00000030-0000-1000-8000-0026BB765291

public.hap.characteristic.serial-number

Permissions

Paired Read

Format

string

Maximum Length

64

8.32 Target Door State
This characteristic describes the target state of a door.

Property

Value

UUID

Type

00000032-0000-1000-8000-0026BB765291

public.hap.characteristic.door-state.target

Permissions

Paired Read, Paired Write, Notify

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

160

8. Apple-defined Characteristics
8.33 Target Heating Cooling State

Property

Format

Minimum Value

Maximum Value

Step Value

Valid Values

0

1

2-255

Value

uint8

0

1

1

"Open"

"Closed"

"Reserved"

8.33 Target Heating Cooling State
This characteristic describes the target mode of a device that supports heating/cooling, e.g. a thermostat.

Property

Value

UUID

Type

00000033-0000-1000-8000-0026BB765291

public.hap.characteristic.heating-cooling.target

Permissions

Paired Read, Paired Write, Notify

Format

uint8

Minimum Value

Maximum Value

Step Value

Valid Values

0

1

2

0

3

1

"Off"

"Heat. If the current temperature is below the target temperature then turn on
heating."

"Cool. If the current temperature is above the target temperature then turn on
cooling."

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

161

8. Apple-defined Characteristics
8.34 Target Relative Humidity

Property

Value

3

4-255

"Auto. Turn on heating or cooling to maintain temperature within the heating and
cooling threshold of the target temperature."

"Reserved"

8.34 Target Relative Humidity
This characteristic describes the target relative humidity that the device is actively attempting to reach. The
value is expressed in percentage (%).

Property

Value

UUID

Type

00000034-0000-1000-8000-0026BB765291

public.hap.characteristic.relative-humidity.target

Permissions

Paired Read, Paired Write, Notify

Format

Minimum Value

Maximum Value

Step Value

Unit

float

0

100

1

percentage

8.35 Target Temperature
This characteristic describes the target temperature in Celsius that the device is actively attempting to reach.
For example, a thermostat cooling a room to "75" degrees Fahrenheit would set the target temperature value
to "23.9".

Property

Value

UUID

Type

00000035-0000-1000-8000-0026BB765291

public.hap.characteristic.temperature.target

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

162

8. Apple-defined Characteristics
8.36 Temperature Display Units

Property

Value

Permissions

Paired Read, Paired Write, Notify

Format

Minimum Value

Maximum Value

Step Value

Unit

float

10.0

38.0

0.1

celsius

8.36 Temperature Display Units
This characteristic describes units of temperature used for presentation purposes (e.g. the units of temperature
displayed on the screen).

Property

Value

UUID

Type

00000036-0000-1000-8000-0026BB765291

public.hap.characteristic.temperature.units

Permissions

Paired Read, Paired Write, Notify

Format

uint8

Minimum Value

Maximum Value

Step Value

Valid Values

0

1

1

0

1

2-255

"Celsius"

"Fahrenheit"

"Reserved"

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

163

8. Apple-defined Characteristics
8.37 Version

8.37 Version
This characteristic contains a version string.

Property

UUID

Type

Value

00000037-0000-1000-8000-0026BB765291

public.hap.characteristic.version

Permissions

Paired Read

Format

string

Maximum Length

64

8.38 Air Particulate Density
This characteristic indicates the current air particulate matter density in micrograms/m3.

This characteristic requires iOS 9.

Property

Value

UUID

Type

00000064-0000-1000-8000-0026BB765291

public.hap.characteristic.air-particulate.density

Permissions

Paired Read, Notify

Format

Minimum Value

float

0

Maximum Value

1000

8.39 Air Particulate Size
This characteristic indicates the size of air particulate matter in micrometers.

This characteristic requires iOS 9.

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

164

8. Apple-defined Characteristics
8.40 Security System Current State

Property

Value

UUID

Type

00000065-0000-1000-8000-0026BB765291

public.hap.characteristic.air-particulate.size

Permissions

Paired Read, Notify

Format

uint8

Minimum Value

Maximum Value

Step Value

Valid Values

0

1

1

0

1

2-255

"2.5 Micrometers"

"10 Micrometers"

"Reserved"

8.40 Security System Current State
This characteristic describes the state of a security system

This characteristic requires iOS 9.

Property

Value

UUID

Type

00000066-0000-1000-8000-0026BB765291

public.hap.characteristic.security-system-state.current

Permissions

Paired Read, Notify

Format

uint8

Minimum Value

Maximum Value

Step Value

Valid Values

0

4

1

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

165

8. Apple-defined Characteristics
8.41 Security System Target State

Property

Value

0

1

2

3

4

"Stay Arm. The home is occupied and the residents are active. e.g. morning or
evenings"

"Away Arm. The home is unoccupied"

"Night Arm. The home is occupied and the residents are sleeping"

"Disarmed"

"Alarm Triggered"

5-255

"Reserved"

8.41 Security System Target State
This characteristic describes the target state of the security system.

This characteristic requires iOS 9.

Property

Value

UUID

Type

00000067-0000-1000-8000-0026BB765291

public.hap.characteristic.security-system-state.target

Permissions

Paired Read, Paired Write, Notify

Format

uint8

Minimum Value

Maximum Value

Step Value

Valid Values

0

3

1

0

1

2

"Stay Arm. The home is occupied and the residents are active. e.g. morning or
evenings"

"Away Arm. The home is unoccupied"

"Night Arm. The home is occupied and the residents are sleeping"

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

166

8. Apple-defined Characteristics
8.42 Battery Level

Property

3

4-255

Value

"Disarm"

"Reserved"

8.42 Battery Level
This characteristic describes the current level of the battery.

This characteristic requires iOS 9.

Property

Value

UUID

Type

00000068-0000-1000-8000-0026BB765291

public.hap.characteristic.battery-level

Permissions

Paired Read, Notify

Format

Minimum Value

Maximum Value

Step Value

Unit

uint8

0

100

1

percentage

8.43 Carbon Monoxide Detected
This characteristic indicates if a sensor detects abnormal levels of Carbon Monoxide. Value should revert to 0
after the Carbon Monoxide levels drop to normal levels

This characteristic requires iOS 9.

Property

Value

UUID

Type

00000069-0000-1000-8000-0026BB765291

public.hap.characteristic.carbon-monoxide.detected

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

167

8. Apple-defined Characteristics
8.44 Contact Sensor State

Property

Value

Permissions

Paired Read, Notify

Format

uint8

Minimum Value

Maximum Value

Step Value

Valid Values

0

1

1

0

1

"Carbon Monoxide levels are normal"

"Carbon Monoxide levels are abnormal"

8.44 Contact Sensor State
This characteristic describes the state of a door/window contact sensor. A value of 0 indicates that the contact
is detected. A value of 1 indicates that the contact is not detected.

This characteristic requires iOS 9.

Property

Value

UUID

Type

0000006A-0000-1000-8000-0026BB765291

public.hap.characteristic.contact-state

Permissions

Paired Read, Notify

Format

uint8

Minimum Value

Maximum Value

Step Value

Valid Values

0

1

1

0

1

"Contact is detected"

"Contact is not detected"

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

168

8. Apple-defined Characteristics
8.45 Current Ambient Light Level

8.45 Current Ambient Light Level
This characteristic indicates the current light level. The value is expressed in Lux units (lumens/m2)

This characteristic requires iOS 9.

Property

Value

UUID

Type

0000006B-0000-1000-8000-0026BB765291

public.hap.characteristic.light-level.current

Permissions

Paired Read, Notify

Format

Minimum Value

Maximum Value

Unit

float

0.0001

100000

lux

8.46 Current Horizontal Tilt Angle
This characteristic describes the current angle of horizontal slats for accessories such as windows, fans, portable
heater/coolers etc. This characteristic takes values between -90 and 90. A value of 0 indicates that the slats are
rotated to a fully open position. A value of -90 indicates that the slats are rotated all the way in a direction
where the user-facing edge is higher than the window-facing edge.

This characteristic requires iOS 9.

Property

Value

UUID

Type

0000006C-0000-1000-8000-0026BB765291

public.hap.characteristic.horizontal-tilt.current

Permissions

Paired Read, Notify

Format

Minimum Value

Maximum Value

Step Value

int

-90

90

1

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

169

8. Apple-defined Characteristics
8.47 Current Position

Property

Unit

Value

arcdegrees

8.47 Current Position
This characteristic describes the current position of accessories. This characteristic can be used with doors,
windows, awnings or window coverings. For windows and doors, a value of 0 indicates that a window (or door)
is fully closed while a value of 100 indicates a fully open position. For blinds/shades/awnings, a value of 0
indicates a position that permits the least light and a value of 100 indicates a position that allows most light.

This characteristic requires iOS 9.

Property

Value

UUID

Type

0000006D-0000-1000-8000-0026BB765291

public.hap.characteristic.position.current

Permissions

Paired Read, Notify

Format

Minimum Value

Maximum Value

Step Value

Unit

uint8

0

100

1

percentage

8.48 Current Vertical Tilt Angle
This characteristic describes the current angle of vertical slats for accessories such as windows, fans, portable
heater/coolers etc. This characteristic takes values between -90 and 90. A value of 0 indicates that the slats are
rotated to be fully open. A value of -90 indicates that the slats are rotated all the way in a direction where the
user-facing edge is to the left of the window-facing edge.

This characteristic requires iOS 9.

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

170

8. Apple-defined Characteristics
8.49 Hold Position

Property

Value

UUID

Type

0000006E-0000-1000-8000-0026BB765291

public.hap.characteristic.vertical-tilt.current

Permissions

Paired Read, Notify

Format

Minimum Value

Maximum Value

Step Value

Unit

int

-90

90

1

arcdegrees

8.49 Hold Position
This characteristic causes the service such as door or window covering to stop at its current position. A value
of 1 must hold the state of the accessory. For e.g, the window must stop moving when this characteristic is
written a value of 1. A value of 0 should be ignored.

A write to Target Position (page 179) characteristic will release the hold.

This characteristic requires iOS 9.

Property

Value

UUID

Type

0000006F-0000-1000-8000-0026BB765291

public.hap.characteristic.position.hold

Permissions

Paired Write

Format

bool

8.50 Leak Detected
This characteristic indicates if a sensor detected a leak (e.g. water leak, gas leak). A value of 1 indicates that a
leak is detected. Value should return to 0 when leak stops.

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

171

8. Apple-defined Characteristics
8.51 Occupancy Detected

This characteristic requires iOS 9.

Property

Value

UUID

Type

00000070-0000-1000-8000-0026BB765291

public.hap.characteristic.leak-detected

Permissions

Paired Read, Notify

Format

uint8

Minimum Value

Maximum Value

Step Value

Valid Values

0

1

1

0

1

"Leak is not detected"

"Leak is detected"

8.51 Occupancy Detected
This characteristic indicates if occupancy was detected (e.g. a person present). A value of 1 indicates occupancy
is detected. Value should return to 0 when occupancy is not detected.

This characteristic requires iOS 9.

Property

Value

UUID

Type

00000071-0000-1000-8000-0026BB765291

public.hap.characteristic.occupancy-detected

Permissions

Paired Read, Notify

Format

uint8

Minimum Value

Maximum Value

Step Value

0

1

1

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

172

8. Apple-defined Characteristics
8.52 Position State

Property

Valid Values

Value

0

1

"Occupancy is not detected"

"Occupancy is detected"

8.52 Position State
This characteristic describes the state of the position of accessories. This characteristic can be used with doors,
windows, awnings or window coverings for presentation purposes.

This characteristic requires iOS 9.

Property

Value

UUID

Type

00000072-0000-1000-8000-0026BB765291

public.hap.characteristic.position.state

Permissions

Paired Read, Notify

Format

uint8

Minimum Value

Maximum Value

Step Value

Valid Values

0

2

1

0

1

2

3-255

"Going to the minimum value specified in metadata"

"Going to the maximum value specified in metadata"

"Stopped"

"Reserved"

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

173

8. Apple-defined Characteristics
8.53 Programmable Switch Event

8.53 Programmable Switch Event
This characteristic describes an event generated by a programmable switch. Reading this characteristic must
return the last event triggered. The accessory must set the value of Paired Read to null(i.e. "value" : null) in the
attribute database. A read of this characteristic must always return a null value. The value must only be reported
in the events ("ev") property.

This characteristic requires iOS 10.3.

Property

Value

UUID

Type

00000073-0000-1000-8000-0026BB765291

public.hap.characteristic.input-event

Permissions

Paired Read, Notify

Format

uint8

Minimum Value

Maximum Value

Step Value

Valid Values

0

2

1

0

1

2

3-255

"Single Press"

"Double Press"

"Long Press"

"Reserved"

8.54 Status Active
This characteristic describes an accessory's current working status. A value of true indicates that the accessory
is active and is functioning without any errors.

This characteristic requires iOS 9.

Property

UUID

Value

00000075-0000-1000-8000-0026BB765291

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

174

8. Apple-defined Characteristics
8.55 Smoke Detected

Property

Value

Type

public.hap.characteristic.status-active

Permissions

Paired Read, Notify

Format

bool

8.55 Smoke Detected
This characteristic indicates if a sensor detects abnormal levels of smoke. A value of 1 indicates that smoke
levels are abnormal. Value should return to 0 when smoke levels are normal.

This characteristic requires iOS 9.

Property

Value

UUID

Type

00000076-0000-1000-8000-0026BB765291

public.hap.characteristic.smoke-detected

Permissions

Paired Read, Notify

Format

uint8

Minimum Value

Maximum Value

Step Value

Valid Values

0

1

1

0

1

"Smoke is not detected"

"Smoke is detected"

8.56 Status Fault
This characteristic describes an accessory which has a fault. A non-zero value indicates that the accessory has
experienced a fault that may be interfering with its intended functionality. A value of 0 indicates that there is
no fault.

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

175

8. Apple-defined Characteristics
8.57 Status Jammed

This characteristic requires iOS 9.

Property

Value

UUID

Type

00000077-0000-1000-8000-0026BB765291

public.hap.characteristic.status-fault

Permissions

Paired Read, Notify

Format

uint8

Minimum Value

Maximum Value

Step Value

Valid Values

0

1

1

0

1

"No Fault"

"General Fault"

8.57 Status Jammed
This characteristic describes an accessory which is in a jammed state. A status of 1 indicates that an accessory's
mechanisms are jammed prevents it from functionality normally. Value should return to 0 when conditions
that jam the accessory are rectified.

This characteristic requires iOS 9.

Property

Value

UUID

Type

00000078-0000-1000-8000-0026BB765291

public.hap.characteristic.status-jammed

Permissions

Paired Read, Notify

Format

Minimum Value

Maximum Value

uint8

0

1

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

176

8. Apple-defined Characteristics
8.58 Status Low Battery

Property

Step Value

Valid Values

0

1

Value

1

"Not Jammed"

"Jammed"

8.58 Status Low Battery
This characteristic describes an accessory's battery status. A status of 1 indicates that the battery level of the
accessory is low. Value should return to 0 when the battery charges to a level thats above the low threshold.

This characteristic requires iOS 9.

Property

Value

UUID

Type

00000079-0000-1000-8000-0026BB765291

public.hap.characteristic.status-lo-batt

Permissions

Paired Read, Notify

Format

uint8

Minimum Value

Maximum Value

Step Value

Valid Values

0

1

1

0

1

"Battery level is normal"

"Battery level is low"

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

177

8. Apple-defined Characteristics
8.59 Status Tampered

8.59 Status Tampered
This characteristic describes an accessory which has been tampered with. A status of 1 indicates that the
accessory has been tampered with. Value should return to 0 when the accessory has been reset to a
non-tampered state.

This characteristic requires iOS 9.

Property

Value

UUID

Type

0000007A-0000-1000-8000-0026BB765291

public.hap.characteristic.status-tampered

Permissions

Paired Read, Notify

Format

uint8

Minimum Value

Maximum Value

Step Value

Valid Values

0

1

1

0

1

"Accessory is not tampered"

"Accessory is tampered with"

8.60 Target Horizontal Tilt Angle
This characteristic describes the target angle of horizontal slats for accessories such as windows, fans, portable
heater/coolers etc.

This characteristic requires iOS 9.

Property

Value

UUID

Type

0000007B-0000-1000-8000-0026BB765291

public.hap.characteristic.horizontal-tilt.target

Permissions

Paired Read, Paired Write, Notify

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

178

8. Apple-defined Characteristics
8.61 Target Position

Property

Format

Minimum Value

Maximum Value

Step Value

Unit

Value

int

-90

90

1

arcdegrees

8.61 Target Position
This characteristic describes the target position of accessories. This characteristic can be used with doors,
windows, awnings or window coverings. For windows and doors, a value of 0 indicates that a window (or door)
is fully closed while a value of 100 indicates a fully open position. For blinds/shades/awnings, a value of 0
indicates a position that permits the least light and a value of 100 indicates a position that allows most light.

This characteristic requires iOS 9.

Property

Value

UUID

Type

0000007C-0000-1000-8000-0026BB765291

public.hap.characteristic.position.target

Permissions

Paired Read, Paired Write, Notify

Format

Minimum Value

Maximum Value

Step Value

Unit

uint8

0

100

1

percentage

8.62 Target Vertical Tilt Angle
This characteristic describes the target angle of vertical slats for accessories such as windows, fans, portable
heater/coolers etc.

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

179

8. Apple-defined Characteristics
8.63 Security System Alarm Type

This characteristic requires iOS 9.

Property

Value

UUID

Type

0000007D-0000-1000-8000-0026BB765291

public.hap.characteristic.vertical-tilt.target

Permissions

Paired Read, Paired Write, Notify

Format

Minimum Value

Maximum Value

Step Value

Unit

int

-90

90

1

arcdegrees

8.63 Security System Alarm Type
This characteristic describes the type of alarm triggered by a security system. A value of 1 indicates an 'unknown'
cause. Value should revert to 0 when the alarm conditions are cleared.

This characteristic requires iOS 9.

Property

Value

UUID

Type

0000008E-0000-1000-8000-0026BB765291

public.hap.characteristic.security-system.alarm-type

Permissions

Paired Read, Notify

Format

uint8

Minimum Value

Maximum Value

Step Value

0

1

1

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

180

8. Apple-defined Characteristics
8.64 Charging State

8.64 Charging State
This characteristic describes the charging state of a battery or an accessory.

This characteristic requires iOS 9.

Property

Value

UUID

Type

0000008F-0000-1000-8000-0026BB765291

public.hap.characteristic.charging-state

Permissions

Paired Read, Notify

Format

uint8

Minimum Value

Maximum Value

Step Value

Valid Values

0

2

1

0

1

2

"Not Charging"

"Charging"

"Not Chargeable"

8.65 Carbon Monoxide Level
This characteristic indicates the Carbon Monoxide levels detected in parts per million (ppm).

This characteristic requires iOS 9.

Property

Value

UUID

Type

00000090-0000-1000-8000-0026BB765291

public.hap.characteristic.carbon-monoxide.level

Permissions

Paired Read, Notify

Format

Minimum Value

float

0

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

181

8. Apple-defined Characteristics
8.66 Carbon Monoxide Peak Level

Property

Maximum Value

Value

100

8.66 Carbon Monoxide Peak Level
This characteristic indicates the highest detected level (ppm) of Carbon Monoxide detected by a sensor.

This characteristic requires iOS 9.

Property

Value

UUID

Type

00000091-0000-1000-8000-0026BB765291

public.hap.characteristic.carbon-monoxide.peak-level

Permissions

Paired Read, Notify

Format

Minimum Value

Maximum Value

float

0

100

8.67 Carbon Dioxide Detected
This characteristic indicates if a sensor detects abnormal levels of Carbon Dioxide. Value should revert to 0
after the Carbon Dioxide levels drop to normal levels.

This characteristic requires iOS 9.

Property

Value

UUID

Type

00000092-0000-1000-8000-0026BB765291

public.hap.characteristic.carbon-dioxide.detected

Permissions

Paired Read, Notify

Format

uint8

Minimum Value

0

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

182

8. Apple-defined Characteristics
8.68 Carbon Dioxide Level

Property

Value

Maximum Value

Step Value

Valid Values

1

1

0

1

"Carbon Dioxide levels are normal"

"Carbon Dioxide levels are abnormal"

8.68 Carbon Dioxide Level
This characteristic indicates the detected level of Carbon Dioxide in parts per million (ppm).

This characteristic requires iOS 9.

Property

Value

UUID

Type

00000093-0000-1000-8000-0026BB765291

public.hap.characteristic.carbon-dioxide.level

Permissions

Paired Read, Notify

Format

Minimum Value

float

0

Maximum Value

100000

8.69 Carbon Dioxide Peak Level
This characteristic indicates the highest detected level (ppm) of carbon dioxide detected by a sensor.

This characteristic requires iOS 9.

Property

Value

UUID

Type

00000094-0000-1000-8000-0026BB765291

public.hap.characteristic.carbon-dioxide.peak-level

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

183

8. Apple-defined Characteristics
8.70 Air Quality

Property

Value

Permissions

Paired Read, Notify

Format

Minimum Value

float

0

Maximum Value

100000

8.70 Air Quality
This characteristic describes the subject assessment of air quality by an accessory.

This characteristic requires iOS 9.

Property

Value

UUID

Type

00000095-0000-1000-8000-0026BB765291

public.hap.characteristic.air-quality

Permissions

Paired Read, Notify

Format

uint8

Minimum Value

Maximum Value

Step Value

Valid Values

0

5

1

0

1

2

3

4

5

"Unknown"

"Excellent"

"Good"

"Fair"

"Inferior"

"Poor"

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

184

8. Apple-defined Characteristics
8.71 Streaming Status

8.71 Streaming Status
A Streaming Status characteristic allows an IP Camera accessory to describe the status of the RTP Stream
Management service.

This characteristic requires iOS 10.

Property

Value

UUID

Type

00000120-0000-1000-8000-0026BB765291

public.hap.characteristic.streaming-status

Permissions

Paired Read, Notify

Format

tlv8

The value of this characteristic is a tlv8 encoded list of supported parameters. The list of types for the TLVs are
as follows:

Table 8-1

Streaming Status

Name

Type

Length

Description

Status

1

1

Status of the stream RTP management service

0 - Available

1 - In Use

2 - Unavailable

3 - 255 Reserved for use by Apple

8.72 Supported Video Stream Configuration
A Supported Video Stream Configuration characteristic allows an IP Camera accessory to describe the parameters
supported for streaming video over an RTP session. Status characteristic allows an IP Camera accessory to
describe the status of the RTP Stream Management service.

This characteristic requires iOS 10.

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

185

8. Apple-defined Characteristics
8.72 Supported Video Stream Configuration

Property

Value

UUID

Type

00000114-0000-1000-8000-0026BB765291

public.hap.characteristic.supported-video-stream-configuration

Permissions

Paired Read

Format

tlv8

The value of this characteristic is a tlv8 encoded list of supported parameters. The list of types for the TLVs are
as follows:

Table 8-2

Supported Video Stream Configuration

Name

Video Codec
Configuration

Type

Length

Description

1

N

Codec information and the configurations supported
for the codec.
There is one TLV of this type per supported codec

An IP Camera supporting multiple video codecs must include one instance of the above TLV per supported
video codec.

The Video Codec Configuration is encoded as a tlv8. The list of types for this TLV's value are as follows:

Table 8-3

Video Codec Configuration

Name

Type

Length

Description

Video Codec Type

Video Codec Parameters

Video Attributes

1

2

3

N

N

N

Type of video codec:

0 - H.264

1 - 255 Reserved for use by Apple

Video Codec-specific parameters

Video Attributes supported for the codec.

The Video Codec parameters TLV is encoded as a tlv8 - the list of types for the value for a H.264 codec are as
follows:

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

186

8. Apple-defined Characteristics
8.72 Supported Video Stream Configuration

Table 8-4

Video Codec Parameters

Name

Type

Length

Description

Type of H.264 Profile:

0 - Constrained Baseline Profile

1 - Main Profile

Note:Interlaced coding (PicAFF, MBAFF) must not be used

2 - High Profile

Note:Interlaced coding (PicAFF, MBAFF) must not be used

3 - 255 Vendor-specific

One instance of this TLV must be present for each supported profile

Profile support level:

0 - 3.1

1 - 3.2

2 - 4

3 - 255 Reserved for use by Apple

Packetization Mode

0 - Non-interleaved mode

1 - 255 Reserved for use by Apple

One instance of this TLV must be present for each supported mode

0 - CVO not supported

1 - CVO supported

ID for CVO RTP extension. This must be a value in the range [1-14]

ProfileID

1

1

Level

Packetization
mode

CVO Enabled

CVO ID

2

3

4

5

1

1

1

1

The Video attributes allow the accessory to indicate supported resolutions, frame rates etc., This information
is encoded as a tlv8- the list of types for the value of this TLV are as follows:

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

187

8. Apple-defined Characteristics
8.73 Supported Audio Stream Configuration

Table 8-5

Video Attributes

Name

Type

Length

Description

Image width

Image height

Frame rate

1

2

3

2

2

1

Image width in pixels

Image height in pixels

Maximum frame rate

An IP camera accessory supporting encoding video at different resolutions must include multiple instances of
Video attributes TLV.

8.73 Supported Audio Stream Configuration
A Supported Audio Stream Configuration characteristic allows an accessory to indicate the the parameters
supported for streaming audio (from a microphone and/or to a speaker) over an RTP session.

This characteristic requires iOS 10.

Property

Value

UUID

Type

00000115-0000-1000-8000-0026BB765291

public.hap.characteristic.supported-audio-configuration

Permissions

Paired Read

Format

tlv8

The value of this characteristic is a tlv8 encoded list of supported parameters. The list of types for the TLVs are
as follows:

Table 8-6

Supported Audio Stream Configuration

Name

Type

Length

Description

Audio Codec
Configuration

1

N

Codec information and
the configurations
supported for the codec.
Comfort Noise support

2

1

Boolean,
indicating
support for
Comfort Noise
Codec

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

188

8. Apple-defined Characteristics
8.73 Supported Audio Stream Configuration

An IP Camera supporting multiple audio codecs must include one instance of the above TLV per supported
audio codec. The Audio Codec Configuration is encoded as a tlv8. The list of types for this TLV are as follows:

Table 8-7

Audio Codecs

Name

Type

Length

Description

Codec type

1

2

Type of codec:

0 - PCMU

1- PCMA

2 - AAC-ELD

3 - Opus

4 - MSBC

5 - AMR

6- AMR-WB

Audio Codec Parameters

2

N

Codec-specific parameters

7- 255 Reserved for use by Apple

The Audio Codec parameters are encoded as a tlv8 - the list of types are as follows:

Table 8-8

Audio Codec Parameters

Name

Audio
channels

Bit-rate

Sample rate

Type

Length

Description

1

2

3

1

1

1

Number of audio channels. Default is 1

0 - Variable bit-rate

1- Constant bit-rate

0 - 8KHz

1 - 16 KHz

2 - 24 KHz

3 - Reserved for use by Apple

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

189

8. Apple-defined Characteristics
8.74 Supported RTP Configuration

Name

Type

Length

Description

RTP time

4

1

Packet Time - Length of time represented by the media in a
packet RFC 4566.

Supported values - 20ms, 30ms, 40 ms & 60ms

Note: This TLV will only be presented in the Selected Audio

Codec Parameters TLV

8.74 Supported RTP Configuration
The Supported RTP Configuration characteristic allows a controller to specify the selected video attributes for
a video RTP service to be used for streaming or other operation

This characteristic requires iOS 10.

Property

Value

UUID

Type

00000116-0000-1000-8000-0026BB765291

public.hap.characteristic.supported-rtp-configuration

Permissions

Paired Read

Format

tlv8

The value of this characteristic is a tlv8 encoded list of supported RTP parameters and their values. The list of
types for the TLVs are as follows:

Table 8-9

Supported RTP Configuration

Name

Type

Length

Description

SRTP
Crypto
Suite

2

1

Supported SRTP Crypto Suite:

0 - AES_CM_128_HMAC_SHA1_80

1 - AES_256_CM_HMAC_SHA1_80

2 - Disabled

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

190

8. Apple-defined Characteristics
8.75 Setup Endpoints

Name

Type

Length

Description

3 - 255 Reserved for use by Apple
If multiple crypto suites are supported, multiple instances of this TLV
should be present.

The controller will configure the selected RTP parameters using the selected stream configuration characteristic.

8.75 Setup Endpoints
The Setup Endpoints characteristic allows a controller to exchange IP address and port information with the
IP camera.

This characteristic requires iOS 10.

Property

Value

UUID

Type

00000118-0000-1000-8000-0026BB765291

public.hap.characteristic.setup-endpoints

Permissions

Paired Read, Paired Write

Format

tlv8

The write value of this characteristic is a tlv8 encoded list of the following parameters:

Table 8-10

Setup Endpoints

Name

Session ID

Controller Address

SRTP Parameters for Video

SRTP Parameters for Audio

Type

Length

Description

1

3

4

5

16

N

N

N

UUID identifying the session

Address of the controller for the streaming
session

RTP parameters selected for the Video streaming
session

RTP parameters selected for the Audio streaming
session

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

191

8. Apple-defined Characteristics
8.75 Setup Endpoints

The Controller Address TLV has a tlv8 encoded value that provides the IP address, and the port for the streaming
session. The list of types for the TLVs is as follows

Table 8-11

Controller Address

Name

Type

Length

Description

IP address version

IP Address

Video RTP port

Audio RTP port

1

2

3

4

1

N

2

2

Version of IP Address:

0 - IPv4

1 - IPv6

IP address of the controller

Receive port of the controller for the video stream of the
RTP session

Receive port of the controller for the audio stream of the
RTP session

Both the audio and video RTP port TLVs must be present even in case audio and video are multiplexed on the
same port.

The SRTP parameters TLV has a tlv8 encoded value that provides the SRTP crypto-suite and keys for the
streaming session. The accessory must populate a unique instance of this TLV for each supported SRTP Crypto
Suite. When the SRTP Crypto Suite is set to 2 (disabled), a zero-length SRTP Master Key as well as a zero-length
SRTP Master Salt must be presented.

The list of types for the TLVs is as follows:

Table 8-12

SRTP Crypto Suite

Name

Type

Length

Description

SRTP Crypto
Suite

1

1

Supported SRTP Crypto Suite:

0 - AES_CM_128_HMAC_SHA1_80

1 - AES_256_CM_HMAC_SHA1_80

2 - Disabled

3 - 255 Reserved for use by Apple

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

192

8. Apple-defined Characteristics
8.75 Setup Endpoints

Name

Type

Length

Description

If multiple crypto suites are supported, multiple instances
of this TLV should be present.

SRTP Master
Key

SRTP Master
Salt

2

3

16 or 32

Master key for the SRTP session: 16 -
AES_CM_128_HMAC_SHA1_80 32 -
AES_256_CM_HMAC_SHA1_80

14

Master salt for the SRTP session

After a write is issued to this characteristic by the controller, the next read of this characteristic indicates the
status of the write command. The read response is encoded as tlv8 list with the following types:

Table 8-13

Read Response

Name

Session Identifier

Status

Accessory Address

SRTP Parameters for Video

SRTP Parameters for Audio

SynchronizationSource for
Video

SynchronizationSource for
Audio

Type

Length

Description

1

2

3

4

5

6

7

16

1

N

N

N

4

4

UUID identifying the session that the
command applies to

0 - Success 1 - Busy 2 - Error 3 - 255 Reserved
for use by Apple

Address of the IP camera for the streaming
session.

RTP parameters selected for the video
streaming session

RTP parameters selected for the audio
streaming session

SSRC for video RTP stream

SSRC for audio RTP stream

The Accessory Address TLV has a tlv8 encoded value with the same types as described for Controller Address
TLV above.

The IP Address Version in the Accessory Address TLV must be the same as the IP Address Version in the Controller
Address TLV.

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

193

8. Apple-defined Characteristics
8.76 Selected RTP Stream Configuration

8.76 Selected RTP Stream Configuration
The Setup Endpoints characteristic allows a controller to exchange IP address and port information The Selected
RTP Stream Configuration characteristic is a control point characteristic that allows a controller to specify the
selected video and audio attributes to be used for streaming audio and video from an IP camera accessory.

This characteristic requires iOS 10.

Property

Value

UUID

Type

00000117-0000-1000-8000-0026BB765291

public.hap.characteristic.selected-rtp-stream-configuration

Permissions

Paired Write

Format

tlv8

The write value of this characteristic is a tlv8 encoded list of selected audio/video/RTP parameters and their
values. The list of types for the TLVs are as follows:

Table 8-14

Selected RTP Stream Configuration

Name

Session Control

Selected Video Parameters

Selected Audio Parameters

Type

Length

Description

1

2

3

16

N

N

Session Control Command and Identifier

Video parameters selected for the streaming
session

Input Audio parameters selected for the
streaming session

The Session Control Command TLV has a tlv8 encoded value that provides the response and the session
identifier. The list of types for the TLVs is as follows:

Table 8-15

Session Control Command

Name

Session
Identifier

Type

Length

Description

1

16

UUID identifying the session that identifies the command

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

194

8. Apple-defined Characteristics
8.76 Selected RTP Stream Configuration

Name

Command

Type

Length

Description

2

1

Session control command: 0 - End streaming session 1 -
Start streaming session 2 - Suspend streaming session 3 -
Resume streaming session 4 - Reconfigure streaming
sessions 5 - 255 Reserved for use by Apple

The Selected Video parameters TLV has a tlv8 encoded value that provides the selected video attributes such
as codec information, image resolution, frame rate, RTP parameters etc., The list of types for the TLVs is as
follows:

Table 8-16

Selected Video Parameters

Name

Type

Length

Description

Selected Video Codec type

Selected Video Codec parameters

Selected Video attributes

Selected Video RTP parameters

1

2

3

4

1

N

N

N

Type of video codec

Video Codec-specific parameters for the
streaming session

Video attributes selected for the streaming
session

RTP parameters selected for the video
streaming session

The encoding of Selected Video Codec Parameters and Selected Video Attributes TLVs is as described in
Supported Video Stream Configuration (page 185)

The value of Video RTP parameters TLV is a tlv8 encoded list with the following types:

Table 8-17

Video RTP Parameters

Name

Payload type

SynchronizationSource
for Video

Maximum Bitrate

Min RTCP interval

Type

Length

Description

1

2

3

4

1

4

2

4

Type of video codec

SSRC for video stream

Maximum bit rate generated by the codec in kbps
and averaged over 1 second

Minimum RTCP interval in seconds formatted as a 4
byte little endian ieee754 floating point value

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

195

8. Apple-defined Characteristics
8.76 Selected RTP Stream Configuration

Name

Max MTU

Type

Length

Description

6

2

MTU that the IP camera must use to transmit Video
RTP packets. This value will be populated only if the
controller intends the camera to use a non-default
value of the MTU

The Selected Audio parameters TLV has a tlv8 encoded value that provides the selected audio attributes such
as codec information, number of audio channels, RTP parameters etc., The list of types for the TLVs is as follows:

Table 8-18

Selected Audio Parameters

Name

Type

Length

Description

Selected Audio Codec
type

Selected Audio Codec
parameters

Selected Audio RTP
parameters

Comfort Noise

1

2

3

4

1

N

N

1

Type of codec: 0 - PCMU 1 - PCMA 2 - AAC-ELD 3
- Opus 4 - MSBC 5 - AMR 6 - AMR-WB 7 - 255
Reserved for use by Apple

Audio codec specific parameters

RTP parameters selected for the streaming session

Boolean. A value of 1 indicates that Comfort Noise
has been selected and that both Camera and iOS
device will both use Comfort Noise codec

The Selected Audio Codec Parameters TLV value has the same TLV types as described in Supported Audio
Stream Configuration (page 188)

The value of Audio RTP parameters TLV is a tlv8 encoded list with the following types:

Table 8-19

Audio RTP Parameters

Name

Payload type

SynchronizationSource for
Audio

Maximum Bitrate

Type

Length

Description

1

2

3

1

4

2

Payload type as defined in RFC 3551

SSRC for audio stream

Maximum bit rate generated by the codec in kbps
and averaged over 1 second

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

196

8. Apple-defined Characteristics
8.77 Volume

Name

Min RTCP interval

Comfort Noise Payload
Type

Type

Length

Description

4

5

4

1

Minimum RTCP interval in seconds formatted as
a 4 byte little endian ieee754 floating point value

Only required when Comfort Noise is chosen in
the Selected Audio Parameters TLV

8.77 Volume
A Volume characteristic allows the control of input or output volume of an audio input or output device
respectively.

This characteristic requires iOS 10.

Property

Value

UUID

Type

00000119-0000-1000-8000-0026BB765291

public.hap.characteristic.volume

Permissions

Paired Write, Paired Read, Notify

Format

Minimum Value

Maximum Value

Step Value

Unit

uint8

0

100

1

percentage

The value of this characteristic indicates the percentage of the maximum volume supported by the service.

If the audio RTP service can support controlling the volume, this characteristic must support Paired Write
permission as well.

8.78 Mute
A Mute characteristic allows the control of audio input or output device respectively.

This characteristic requires iOS 10.

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

197

8. Apple-defined Characteristics
8.79 Night Vision

Property

Value

UUID

Type

0000011A-0000-1000-8000-0026BB765291

public.hap.characteristic.mute

Permissions

Paired Write, Paired Read, Notify

Format

bool

Valid Values

0

1

"Mute is Off / Audio is On"

"Mute is On / There is no Audio"

If the audio RTP service can support muting, this characteristic must support Paired Write permission as well.

8.79 Night Vision
A Night Vision characteristic allows the control of night vision mode on a video RTP service.

This characteristic requires iOS 10.

Property

Value

UUID

Type

0000011B-0000-1000-8000-0026BB765291

public.hap.characteristic.night-vision

Permissions

Paired Write, Paired Read, Notify

Format

bool

Valid Values

0

1

"Disable night-vision mode"

"Enable night-vision mode"

8.80 Optical Zoom
A Digital Zoom characteristic allows the control of digital zoom of a video RTP service.

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

198

8. Apple-defined Characteristics
8.81 Digital Zoom

This characteristic requires iOS 10.

Property

Value

UUID

Type

0000011C-0000-1000-8000-0026BB765291

public.hap.characteristic.zoom-optical

Permissions

Paired Write, Paired Read, Notify

Format

float

The value of this characteristic represents the optical zoom setting of the camera service that is sourcing the
input image.

8.81 Digital Zoom
A Digital Zoom characteristic allows the control of digital zoom of a video RTP service.

This characteristic requires iOS 10.

Property

Value

UUID

Type

0000011D-0000-1000-8000-0026BB765291

public.hap.characteristic.zoom-digital

Permissions

Paired Write, Paired Read, Notify

Format

float

The value of this characteristic represents the digital zoom multiplier to be applied on the image sourced by
the video RTP service that is sourcing the input image.

8.82 Image Rotation
An Image Rotation characteristic allows the control of rotation of the image of a video RTP service.

This characteristic requires iOS 10.

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

199

8. Apple-defined Characteristics
8.83 Image Mirroring

Property

Value

UUID

Type

0000011E-0000-1000-8000-0026BB765291

public.hap.characteristic.image-rotation

Permissions

Paired Write, Paired Read, Notify

Format

float

Valid Values

0

90

180

270

"No rotation"

"Rotated 90 degrees to the right"

"Rotated 180 degrees to the right (flipped vertically)"

"Rotated 270 degrees to the right"

8.83 Image Mirroring
An Image Mirroring characteristic allows the control of mirroring state of the image of a video RTP service.

This characteristic requires iOS 10.

Property

Value

UUID

Type

0000011F-0000-1000-8000-0026BB765291

public.hap.characteristic.image-mirror

Permissions

Paired Write, Paired Read, Notify

Format

bool

Valid Values

0

1

Unit

"Image is not mirrored"

"Image is mirrored"

arcdegrees

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

200

8. Apple-defined Characteristics
8.84 Accessory Flags

8.84 Accessory Flags
When set indicates accessory requires additional setup. Use of Accessory Flags requires written approval by
Apple in advance.

Property

Value

UUID

Type

000000A6-0000-1000-8000-0026BB765291

public.hap.characteristic.accessory-properties

Permissions

Paired Read, Notify

Format

Valid Values

0x0001 (bit0)

uint32

"Requires additional setup"

0x0002 - 0xFFFF

"Reserved"

8.85 Lock Physical Controls
This characteristic describes a way to lock a set of physical controls on an accessory (eg. child lock).

This characteristic requires iOS 10.

Property

Value

UUID

Type

000000A7-0000-1000-8000-0026BB765291

public.hap.characteristic.lock-physical-controls

Permissions

Paired Write,Paired Read, Notify

Format

uint8

Minimum Value

Maximum Value

Step Value

Valid Values

0

0

1

1

"Control lock disabled"

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

201

8. Apple-defined Characteristics
8.86 Current Air Purifier State

Property

1

Value

"Control lock enabled"

8.86 Current Air Purifier State
This characteristic describes the current state of the air purifier.

This characteristic requires iOS 10.3.

Property

Value

UUID

Type

000000A9-0000-1000-8000-0026BB765291

public.hap.characteristic.air-purifier.state.current

Permissions

Paired Read, Notify

Format

uint8

Minimum Value

Maximum Value

Step Value

Valid Values

0

2

1

0

1

2

"Inactive"

"Idle"

"Purifying Air"

8.87 Current Slat State
This characteristic describes the current state of the slats.

This characteristic requires iOS 10.3.

Property

UUID

Value

000000AA-0000-1000-8000-0026BB765291

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

202

8. Apple-defined Characteristics
8.88 Slat Type

Property

Type

Value

public.hap.characteristic.slat.state.current

Permissions

Paired Read, Notify

Format

uint8

Minimum Value

Maximum Value

Step Value

Valid Values

0

2

1

0

1

2

"Fixed"

"Jammed"

"Swinging"

8.88 Slat Type
This characteristic describes the type of the slats. If the slats can tilt on a horizontal axis, the value of this
characteristic must be set to Horizontal. If the slats can tilt on a vertical axis, the value of this characteristic
must be set to Vertical.

This characteristic requires iOS 10.3.

Property

Value

UUID

Type

000000C0-0000-1000-8000-0026BB765291

public.hap.characteristic.type.slat

Permissions

Paired Read

Format

uint8

Minimum Value

Maximum Value

Step Value

0

1

1

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

203

8. Apple-defined Characteristics
8.89 Filter Life Level

Property

Valid Values

0

1

Value

"Horizontal"

"Vertical"

8.89 Filter Life Level
This characteristic describes the current filter life level.

This characteristic requires iOS 10.3.

Property

Value

UUID

Type

000000AB-0000-1000-8000-0026BB765291

public.hap.characteristic.filter.life-level

Permissions

Paired Read, Notify

Format

Minimum Value

Maximum Value

Step Value

float

0

100

1

8.90 Filter Change Indication
This characteristic describes if a filter needs to be changed.

This characteristic requires iOS 10.3.

Property

Value

UUID

Type

000000AC-0000-1000-8000-0026BB765291

public.hap.characteristic.filter.change-indication

Permissions

Paired Read, Notify

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

204

8. Apple-defined Characteristics
8.91 Reset Filter Indication

Property

Format

Minimum Value

Maximum Value

Step Value

Valid Values

0

1

Value

uint8

0

1

1

"Filter does not need to be changed"

"Filter needs to be changed"

8.91 Reset Filter Indication
This characteristic allows a user to reset the filter indication. When the value of 1 is written to this characteristic
by the user, the accessory should reset it to 0 once the relevant action to reset the filter indication is executed.
If the accessory supports Filter Change Indication, the value of that characteristic should also reset back to 0.
This characteristic requires iOS 10.3.

Property

Value

UUID

Type

000000AD-0000-1000-8000-0026BB765291

public.hap.characteristic.filter.reset-indication

Permissions

Paired Write

Format

Minimum Value

Maximum Value

uint8

1

1

8.92 Target Air Purifier State
This characteristic describes the target state of the air purifier.

This characteristic requires iOS 10.3.

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

205

8. Apple-defined Characteristics
8.93 Target Fan State

Property

Value

UUID

Type

000000A8-0000-1000-8000-0026BB765291

public.hap.characteristic.air-purifier.state.target

Permissions

Paired Write,Paired Read, Notify

Format

uint8

Minimum Value

Maximum Value

Step Value

Valid Values

0

1

1

0

1

"Manual"

"Auto"

8.93 Target Fan State
This characteristic describes the target state of the fan.

This characteristic requires iOS 10.3.

Property

Value

UUID

Type

000000BF-0000-1000-8000-0026BB765291

public.hap.characteristic.fan.state.target

Permissions

Paired Write,Paired Read, Notify

Format

uint8

Minimum Value

Maximum Value

Step Value

Valid Values

0

1

1

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

206

8. Apple-defined Characteristics
8.94 Current Fan State

Property

0

1

Value

"Manual"

"Auto"

8.94 Current Fan State
This characteristic describes the current state of the fan.

This characteristic requires iOS 10.3.

Property

Value

UUID

Type

000000AF-0000-1000-8000-0026BB765291

public.hap.characteristic.fan.state.current

Permissions

Paired Read, Notify

Format

uint8

Minimum Value

Maximum Value

Step Value

Valid Values

0

2

1

0

1

2

"Inactive"

"Idle"

"Blowing Air"

8.95 Active
This characteristic describes if the service is currently active.

This characteristic requires iOS 10.3.

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

207

8. Apple-defined Characteristics
8.96 Swing Mode

Property

Value

UUID

Type

000000B0-0000-1000-8000-0026BB765291

public.hap.characteristic.active

Permissions

Paired Write, Paired Read, Notify

Format

uint8

Minimum Value

Maximum Value

Step Value

Valid Values

0

1

1

0

1

"Inactive"

"Active"

8.96 Swing Mode
This characteristic describes if swing mode is enabled. This characteristic requires iOS 10.3.

Property

Value

UUID

Type

000000B6-0000-1000-8000-0026BB765291

public.hap.characteristic.swing-mode

Permissions

Paired Read, Notify, Paired Write

Format

uint8

Minimum Value

Maximum Value

Step Value

Valid Values

0

0

1

1

"Swing disabled"

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

208

8. Apple-defined Characteristics
8.97 Current Tilt Angle

Property

1

Value

"Swing enabled"

8.97 Current Tilt Angle
This characteristic describes the current angle of slats for accessories such as windows, fans, portable
heater/coolers etc. This characteristic takes values between -90 and 90. A value of 0 indicates that the slats are
rotated to be fully open. At value 0 the user-facing edge and the window-facing edge are perpendicular to
the window.

For Horizontal slat (see Slat Type (page 203)):

A value of -90 indicates that the slats are rotated all the way in a direction where the user-facing edge is to the
left of the window-facing edge.

For Vertical slat (see Slat Type (page 203)):

A value of -90 indicates that the slats are rotated all the way in a direction where the user-facing edge is higher
than the window-facing edge.

This characteristic requires iOS 10.3.

Property

Value

UUID

Type

000000C1-0000-1000-8000-0026BB765291

public.hap.characteristic.tilt.current

Permissions

Paired Read, Notify

Format

Minimum Value

Maximum Value

Step Value

Unit

int

-90

90

1

arcdegrees

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

209

8. Apple-defined Characteristics
8.98 Target Tilt Angle

8.98 Target Tilt Angle
This characteristic describes the target angle of slats for accessories such as windows, fans, portable
heater/coolers etc.

This characteristic requires iOS 10.3.

Property

Value

UUID

Type

000000C2-0000-1000-8000-0026BB765291

public.hap.characteristic.tilt.target

Permissions

Paired Read, Paired Write, Notify

Format

Minimum Value

Maximum Value

Step Value

Unit

int

-90

90

1

arcdegrees

8.99 Ozone Density
This characteristic indicates the current ozone density in micrograms/m3.

This characteristic requires iOS 10.3.

Property

Value

UUID

Type

000000C3-0000-1000-8000-0026BB765291

public.hap.characteristic.density.ozone

Permissions

Paired Read, Notify

Format

Minimum Value

float

0

Maximum Value

1000

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

210

8. Apple-defined Characteristics
8.100 Nitrogen Dioxide Density

8.100 Nitrogen Dioxide Density
This characteristic indicates the current NO2 density in micrograms/m3.

This characteristic requires iOS 10.3.

Property

Value

UUID

Type

000000C4-0000-1000-8000-0026BB765291

public.hap.characteristic.density.no2

Permissions

Paired Read, Notify

Format

Minimum Value

float

0

Maximum Value

1000

8.101 Sulphur Dioxide Density
This characteristic indicates the current SO2 density in micrograms/m3.

This characteristic requires iOS 10.3.

Property

Value

UUID

Type

000000C5-0000-1000-8000-0026BB765291

public.hap.characteristic.density.so2

Permissions

Paired Read, Notify

Format

Minimum Value

float

0

Maximum Value

1000

8.102 PM2.5 Density
This characteristic indicates the current PM2.5 micrometer particulate density in micrograms/m3.

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

211

8. Apple-defined Characteristics
8.103 PM10 Density

This characteristic requires iOS 10.3.

Property

Value

UUID

Type

000000C6-0000-1000-8000-0026BB765291

public.hap.characteristic.density.pm25

Permissions

Paired Read, Notify

Format

Minimum Value

float

0

Maximum Value

1000

8.103 PM10 Density
This characteristic indicates the current PM10 micrometer particulate density in micrograms/m3.

This characteristic requires iOS 10.3.

Property

Value

UUID

Type

000000C7-0000-1000-8000-0026BB765291

public.hap.characteristic.density.pm10

Permissions

Paired Read, Notify

Format

Minimum Value

float

0

Maximum Value

1000

8.104 VOC Density
This characteristic indicates the current volatile organic compound density in micrograms/m3.

This characteristic requires iOS 10.3.

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

212

8. Apple-defined Characteristics
8.105 Service Label Index

Property

Value

UUID

Type

000000C8-0000-1000-8000-0026BB765291

public.hap.characteristic.density.voc

Permissions

Paired Read, Notify

Format

Minimum Value

float

0

Maximum Value

1000

8.105 Service Label Index
This characteristic should be used identify the index of the label that maps to Service Label Namespace (page
213) used by the accessory.

This characteristic requires iOS 10.3.

Property

Value

UUID

Type

000000CB-0000-1000-8000-0026BB765291

public.hap.characteristic.service-label-index

Permissions

Paired Read

Format

Minimum Value

Step Value

uint8

1

1

8.106 Service Label Namespace
This characteristic describes the naming schema for an accessory. For example, this characteristic can be used
to describe the type of labels used to identify individual services of an accessory.

This characteristic requires iOS 10.3.

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

213

8. Apple-defined Characteristics
8.107 Color Temperature

Property

Value

UUID

Type

000000CD-0000-1000-8000-0026BB765291

public.hap.characteristic.service-label-namespace

Permissions

Paired Read

Format

uint8

Minimum Value

Maximum Value

Step Value

Valid Values

0

1

1

0

1

2-255

"Dots. For example, "." ".." "..." "....""

"Arabic numerals. For example, "0,1,2,3"

"Reserved"

8.107 Color Temperature
This characteristic describes color temperature which is represented in the reciprocal megakelvin (MK-1) or
mirek scale. MK = 1,000,000 / K where MK is the desired mirek value and K is temperature in Kelvins.

If this characteristic is included in the Lightbulb (page 217), Hue (page 151) and Saturation (page 159) must not
be included as optional characteristics in Lightbulb (page 217). This characteristic must not be used for lamps
which support color.

This characteristic requires iOS 10.3.

Property

Value

UUID

Type

000000CE-0000-1000-8000-0026BB765291

public.hap.characteristic.color-temperature

Permissions

Paired Read, Paired Write, Notify

Format

uint32

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

214

8. Apple-defined Characteristics
8.107 Color Temperature

Property

Minimum Value

Maximum Value

Step Value

Value

50

400

1

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

215

9. Apple-defined Services

9.1 Accessory Information
Every accessory must expose a single instance of the Accessory Information service with the following definition.
The values of Manufacturer, Model, Name and Serial Number must be persistent through the lifetime of the
accessory.

Any other Apple-defined characteristics added to this service must only contain one or more of the following
permissions: Paired Read or Notify. Custom characteristics added to this service must only contain one or more
of the following permissions: Paired Read, Notify, or Broadcast. All other permissions are not permitted.

Property

UUID

Type

Value

0000003E-0000-1000-8000-0026BB765291

public.hap.service.accessory-information

Identify (page 152)

Manufacturer (page 156)

Model (page 156)

Name (page 157)

Serial Number (page 160)

Firmware Revision (page 149)

Hardware Revision (page 150)

Accessory Flags (page 201)

Required Characteristics

Optional Characteristics

9.2 Fan
This service describes a fan.

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

216

9. Apple-defined Services
9.3 Garage Door Opener

Property

UUID

Type

Value

00000040-0000-1000-8000-0026BB765291

public.hap.service.fan

Required Characteristics

On (page 157)

Rotation Direction (page 158)

Optional Characteristics

Rotation Speed (page 159)

Name (page 157)

9.3 Garage Door Opener
This service describes a garage door opener that controls a single door. If a garage has more than one door,
then each door should have its own Garage Door Opener Service.

Property

UUID

Type

Value

00000041-0000-1000-8000-0026BB765291

public.hap.service.garage-door-opener

Current Door State (page 146)

Required Characteristics

Target Door State (page 160)

Obstruction Detected (page 157)

Lock Current State (page 153)

Optional Characteristics

Lock Target State (page 155)

Name (page 157)

9.4 Lightbulb
This service describes a lightbulb.

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

217

9. Apple-defined Services
9.5 Lock Management

Property

UUID

Type

Value

00000043-0000-1000-8000-0026BB765291

public.hap.service.lightbulb

Required Characteristics

On (page 157)

Optional Characteristics

Brightness (page 145)

Hue (page 151)

Name (page 157)

Saturation (page 159)

Color Temperature (page 214)

9.5 Lock Management
The HomeKit Lock Management Service is designed to expose deeper interaction with a Lock device.

Property

UUID

Type

Required Characteristics

Value

00000044-0000-1000-8000-0026BB765291

public.hap.service.lock-management

Lock Control Point (page 152)

Version (page 164)

Logs (page 155)

Audio Feedback (page 145)

Lock Management Auto Security Timeout (page 154)

Optional Characteristics

Administrator Only Access (page 145)

Lock Last Known Action (page 153)

Current Door State (page 146)

Motion Detected (page 156)

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

218

9. Apple-defined Services
9.6 Lock Mechanism

9.6 Lock Mechanism
The HomeKit Lock Mechanism Service is designed to expose and control the physical lock mechanism on a
device.

Property

UUID

Type

Required Characteristics

Value

00000045-0000-1000-8000-0026BB765291

public.hap.service.lock-mechanism

Lock Current State (page 153)

Lock Target State (page 155)

Optional Characteristics

Name (page 157)

9.7 Outlet
This service describes a power outlet.

Property

UUID

Type

Required Characteristics

Value

00000047-0000-1000-8000-0026BB765291

public.hap.service.outlet

On (page 157)

Outlet In Use (page 158)

Optional Characteristics

Name (page 157)

9.8 Switch
This service describes a binary switch.

Property

UUID

Type

Value

00000049-0000-1000-8000-0026BB765291

public.hap.service.switch

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

219

9. Apple-defined Services
9.9 Thermostat

Property

Value

Required Characteristics

Optional Characteristics

On (page 157)

Name (page 157)

9.9 Thermostat
This service describes a thermostat.

Property

UUID

Type

Value

0000004A-0000-1000-8000-0026BB765291

public.hap.service.thermostat

Current Heating Cooling State (page 147)

Target Heating Cooling State (page 161)

Required Characteristics

Current Temperature (page 148)

Target Temperature (page 162)

Temperature Display Units (page 163)

Cooling Threshold Temperature (page 146)

Current Relative Humidity (page 148)

Optional Characteristics

Heating Threshold Temperature (page 151)

Name (page 157)

Target Relative Humidity (page 162)

9.10 Air Quality Sensor
This service describes an air quality sensor. Air Quality (page 184) refers to the cumulative air quality recorded
by the accessory which may be based on multiple sensors present.

This service requires iOS 9 and is updated in iOS 10.

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

220

9. Apple-defined Services
9.11 Security System

Property

UUID

Type

Value

0000008D-0000-1000-8000-0026BB765291

public.hap.service.sensor.air-quality

Required Characteristics

Air Quality (page 184)

Name (page 157)

Ozone Density (page 210)

Nitrogen Dioxide Density (page 211)

Sulphur Dioxide Density (page 211)

PM2.5 Density (page 211)

Optional Characteristics

PM10 Density (page 212)

VOC Density (page 212)

Status Active (page 174)

Status Fault (page 175)

Status Tampered (page 178)

Status Low Battery (page 177)

9.11 Security System
This service describes a security system service.

This service requires iOS 9.

Property

UUID

Type

Required Characteristics

Value

0000007E-0000-1000-8000-0026BB765291

public.hap.service.security-system

Security System Current State (page 165)

Security System Target State (page 166)

Optional Characteristics

Name (page 157)

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

221

9. Apple-defined Services
9.12 Carbon Monoxide Sensor

Property

Value

Security System Alarm Type (page 180)

Status Fault (page 175)

Status Tampered (page 178)

9.12 Carbon Monoxide Sensor
This service describes a Carbon Monoxide Sensor.

This service requires iOS 9.

Property

UUID

Type

Value

0000007F-0000-1000-8000-0026BB765291

public.hap.service.sensor.carbon-monoxide

Required Characteristics

Carbon Monoxide Detected (page 167)

Name (page 157)

Status Active (page 174)

Status Fault (page 175)

Optional Characteristics

Status Tampered (page 178)

Status Low Battery (page 177)

Carbon Monoxide Level (page 181)

Carbon Monoxide Peak Level (page 182)

9.13 Contact Sensor
This service describes a Contact Sensor.

This service requires iOS 9.

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

222

9. Apple-defined Services
9.14 Door

Property

UUID

Type

Value

00000080-0000-1000-8000-0026BB765291

public.hap.service.sensor.contact

Required Characteristics

Contact Sensor State (page 168)

Name (page 157)

Status Active (page 174)

Optional Characteristics

Status Fault (page 175)

Status Tampered (page 178)

Status Low Battery (page 177)

9.14 Door
This service describes a motorized door.

This service requires iOS 9.

Property

UUID

Type

Value

00000081-0000-1000-8000-0026BB765291

public.hap.service.door

Current Position (page 170)

Required Characteristics

Target Position (page 179)

Position State (page 173)

Name (page 157)

Optional Characteristics

Hold Position (page 171)

Obstruction Detected (page 157)

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

223

9. Apple-defined Services
9.15 Humidity Sensor

9.15 Humidity Sensor
This service describes a Humidity Sensor.

This service requires iOS 9.

Property

UUID

Type

Value

00000082-0000-1000-8000-0026BB765291

public.hap.service.sensor.humidity

Required Characteristics

Current Relative Humidity (page 148)

Name (page 157)

Status Active (page 174)

Optional Characteristics

Status Fault (page 175)

Status Tampered (page 178)

Status Low Battery (page 177)

9.16 Leak Sensor
This service describes a Leak Sensor.

This service requires iOS 9.

Property

UUID

Type

Value

00000083-0000-1000-8000-0026BB765291

public.hap.service.sensor.leak

Required Characteristics

Leak Detected (page 171)

Optional Characteristics

Name (page 157)

Status Active (page 174)

Status Fault (page 175)

Status Tampered (page 178)

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

224

9. Apple-defined Services
9.17 Light Sensor

Property

Value

Status Low Battery (page 177)

9.17 Light Sensor
This service describes a Light Sensor.

This service requires iOS 9.

Property

UUID

Type

Value

00000084-0000-1000-8000-0026BB765291

public.hap.service.sensor.light

Required Characteristics

Current Ambient Light Level (page 169)

Name (page 157)

Status Active (page 174)

Optional Characteristics

Status Fault (page 175)

Status Tampered (page 178)

Status Low Battery (page 177)

9.18 Motion Sensor
This service describes a Motion Sensor.

This service requires iOS 9.

Property

UUID

Type

Value

00000085-0000-1000-8000-0026BB765291

public.hap.service.sensor.motion

Required Characteristics

Motion Detected (page 156)

Optional Characteristics

Name (page 157)

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

225

9. Apple-defined Services
9.19 Occupancy Sensor

Property

Value

Status Active (page 174)

Status Fault (page 175)

Status Tampered (page 178)

Status Low Battery (page 177)

9.19 Occupancy Sensor
This service describes an Occupancy Sensor.

This service requires iOS 9.

Property

UUID

Type

Value

00000086-0000-1000-8000-0026BB765291

public.hap.service.sensor.occupancy

Required Characteristics

Occupancy Detected (page 172)

Name (page 157)

Status Active (page 174)

Optional Characteristics

Status Fault (page 175)

Status Tampered (page 178)

Status Low Battery (page 177)

9.20 Smoke Sensor
This service describes a Smoke detector Sensor.

This service requires iOS 9.

Property

UUID

Value

00000087-0000-1000-8000-0026BB765291

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

226

9. Apple-defined Services
9.21 Stateless Programmable Switch

Property

Type

Value

public.hap.service.sensor.smoke

Required Characteristics

Smoke Detected (page 175)

Name (page 157)

Status Active (page 174)

Optional Characteristics

Status Fault (page 175)

Status Tampered (page 178)

Status Low Battery (page 177)

9.21 Stateless Programmable Switch
This service describes a stateless programmable switch.

The following rules apply to a stateless programmable switch accessory:

●

●

●

●

●

●

Each physical switch on the accessory must be represented by a unique instance of this service.
If there are multiple instances of this service on the accessory, they must be linked to a Service Label (page
236).
If there are multiple instances of this service on the accessory, Service Label Index (page 213) is a required
characteristic.
Service Label Index (page 213) value for each instance of this service linked to the same Service Label (page
236) must be unique.
The User visible label on the physical accessory should match the Service Label Namespace (page 213)
described by the accessory.
If there is only one instance of this service on the accessory, Service Label (page 236) is not required and
consequently Service Label Index (page 213) must not be present.

This service requires iOS 10.3.

Property

UUID

Type

Value

00000089-0000-1000-8000-0026BB765291

public.hap.service.stateless-programmable-switch

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

227

9. Apple-defined Services
9.22 Temperature Sensor

Property

Value

Required Characteristics

Programmable Switch Event (page 174)

Optional Characteristics

Name (page 157)

Service Label Index (page 213)

9.22 Temperature Sensor
This service describes a Temperature Sensor.

This service requires iOS 9.

Property

UUID

Type

Value

0000008A-0000-1000-8000-0026BB765291

public.hap.service.sensor.temperature

Required Characteristics

Current Temperature (page 148)

Name (page 157)

Status Active (page 174)

Optional Characteristics

Status Fault (page 175)

Status Low Battery (page 177)

Status Tampered (page 178)

9.23 Window
This service describes a motorized window.

This service requires iOS 9.

Property

UUID

Type

Value

0000008B-0000-1000-8000-0026BB765291

public.hap.service.window

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

228

9. Apple-defined Services
9.24 Window Covering

Property

Value

Current Position (page 170)

Required Characteristics

Target Position (page 179)

Position State (page 173)

Name (page 157)

Optional Characteristics

Hold Position (page 171)

Obstruction Detected (page 157)

9.24 Window Covering
This service describes motorized window coverings or shades - examples include shutters, blinds, awnings etc.

This service requires iOS 9.

Property

UUID

Type

Value

0000008C-0000-1000-8000-0026BB765291

public.hap.service.window-covering

Target Position (page 179)

Required Characteristics

Current Position (page 170)

Position State (page 173)

Name (page 157)

Hold Position (page 171)

Current Horizontal Tilt Angle (page 169)

Optional Characteristics

Target Horizontal Tilt Angle (page 178)

Current Vertical Tilt Angle (page 170)

Target Vertical Tilt Angle (page 179)

Obstruction Detected (page 157)

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

229

9. Apple-defined Services
9.25 Battery Service

9.25 Battery Service
This service describes a battery service.

This service requires iOS 9.

Property

UUID

Type

Value

00000096-0000-1000-8000-0026BB765291

public.hap.service.battery

Battery Level (page 167)

Required Characteristics

Charging State (page 181)

Status Low Battery (page 177)

Optional Characteristics

Name (page 157)

9.26 Carbon Dioxide Sensor
This service describes a Carbon Dioxide Sensor.

This service requires iOS 9.

Property

UUID

Type

Value

00000097-0000-1000-8000-0026BB765291

public.hap.service.sensor.carbon-dioxide

Required Characteristics

Carbon Dioxide Detected (page 182)

Optional Characteristics

Name (page 157)

Status Active (page 174)

Status Fault (page 175)

Status Tampered (page 178)

Status Low Battery (page 177)

Carbon Dioxide Level (page 183)

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

230

9. Apple-defined Services
9.27 Camera RTP Stream Management

Property

Value

Carbon Dioxide Peak Level (page 183)

9.27 Camera RTP Stream Management
A Camera RTP Stream Management service allows description of the supported audio and video codecs and
parameters supported by the accessory as well as configuration and control of the RTP session to stream the
audio/video stream to a controller. The service has the following definition:

This service requires iOS 10.

Property

UUID

Type

Required Characteristics

Value

00000110-0000-1000-8000-0026BB765291

public.hap.service.camera-rtp-stream-management

Streaming Status (page 185)

Supported Video Stream Configuration (page 185)

Supported Audio Stream Configuration (page 188)

Supported RTP Configuration (page 190)

Setup Endpoints (page 191)

Selected RTP Stream Configuration (page 194)

The supported Video/Audio Input/Output Configuration characteristics allow an IP camera accessory to describe
the supported audio/video codec and source parameters.

The Selected Stream Configuration characteristic is a control point characteristic that a controller will use to
set up an RTP session for streaming audio/video. The value written to this characteristic selects the
audio/video/RTP configuration to be used for the streaming session.

9.28 Microphone
A Microphone service is used to control the sourcing of the input audio – primarily through a microphone.

This service requires iOS 10.

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

231

9. Apple-defined Services
9.29 Speaker

Property

UUID

Type

Value

00000112-0000-1000-8000-0026BB765291

public.hap.service.microphone

Required Characteristics

Optional Characteristics

Mute (page 197)

Name (page 157)

Volume (page 197)

9.29 Speaker
A Speaker service is to use to control the audio output settings on a speaker device.

This service requires iOS 10.

Property

UUID

Type

Value

00000113-0000-1000-8000-0026BB765291

public.hap.service.speaker

Required Characteristics

Optional Characteristics

Mute (page 197)

Name (page 157)

Volume (page 197)

9.30 Doorbell
The Doorbell Service describes a doorbell and is the primary service of the Video Doorbell Profile.

This service requires iOS 10.

Property

UUID

Type

Value

00000121-0000-1000-8000-0026BB765291

public.hap.service.doorbell

Required Characteristics

Programmable Switch Event (page 174)

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

232

9. Apple-defined Services
9.31 Fan v2

Property

Value

Optional Characteristics

Name (page 157)

Volume (page 197)

Brightness (page 145)

9.31 Fan v2
This service describes a fan.

If the fan service is included in air purifiers accessories, Current Fan State (page 207) and Target Fan State (page
206) are required characteristics.

This service requires iOS 10.3.

Property

UUID

Type

Required Characteristics

Value

000000B7-0000-1000-8000-0026BB765291

public.hap.service.fanv2

Active (page 207)

Name (page 157)

Current Fan State (page 207)

Target Fan State (page 206)

Optional Characteristics

Rotation Direction (page 158)

Rotation Speed (page 159)

Swing Mode (page 208)

Lock Physical Controls (page 201)

9.32 Slat
This service describes a slat which tilts on a vertical or a horizontal axis.

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

233

9. Apple-defined Services
9.33 Filter Maintenance

Current Tilt Angle (page 209) and Target Tilt Angle (page 210) may be included in this service if the user can set
the slats to a particular tilt angle.

Swing Mode (page 208) implies that the slats can swing automatically (e.g. vents on a fan).

This service requires iOS 10.3.

Property

UUID

Type

Required Characteristics

Optional Characteristics

Value

000000B9-0000-1000-8000-0026BB765291

public.hap.service.vertical-slat

Current Slat State (page 202)

Slat Type (page 203)

Name (page 157)

Swing Mode (page 208)

Current Tilt Angle (page 209)

Target Tilt Angle (page 210)

9.33 Filter Maintenance
This service can be used to describe maintenance operations for a filter.

This service requires iOS 10.3.

Property

UUID

Type

Value

000000BA-0000-1000-8000-0026BB765291

public.hap.service.filter-maintenance

Required Characteristics

Filter Change Indication (page 204)

Name (page 157)

Optional Characteristics

Filter Life Level (page 204)

Reset Filter Indication (page 205)

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

234

9. Apple-defined Services
9.34 Air Purifier

9.34 Air Purifier
This service describes an air purifier. An air purifier accessory can have additional linked services such as:

●

Filter Maintenance (page 234) service(s) to describe one or more air filters.

● Air Quality Sensor (page 220) services to describe air quality sensors.

●

●

Fan v2 (page 233) service to describe a fan which can be independently controlled
Slat (page 233) service to control vents

If Fan v2 (page 233) is included as a linked service in an air purifier accessory:
● Changing Active (page 207) characteristic on the Air Purifier (page 235) must result in corresponding change

to Active (page 207) characteristic on the Fan v2 (page 233).

● Changing Active (page 207) characteristic on the Fan v2 (page 233) from Inactive to Active does not
require the Active (page 207) on the Air Purifier (page 235) to change. This enables Fan Only mode on air
purifier.

● Changing Active (page 207) characteristic on the Fan v2 (page 233) from Active to Inactive must result

in the Active (page 207) on the Air Purifier (page 235) to change to Inactive.

An air purifier accessory service may include Rotation Speed (page 159) to control fan speed if the fan cannot
be independently controlled.

This service requires iOS 10.3.

Property

UUID

Type

Value

000000BB-0000-1000-8000-0026BB765291

public.hap.service.air-purifier

Active (page 207)

Required Characteristics

Current Air Purifier State (page 202)

Optional Characteristics

Target Air Purifier State (page 205)

Name (page 157)

Rotation Speed (page 159)

Swing Mode (page 208)

Lock Physical Controls (page 201)

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

235

9. Apple-defined Services
9.35 Service Label

9.35 Service Label
This service describes label scheme.

This service requires iOS 10.3.

Property

UUID for IP

Type

Value

000000CC-0000-1000-8000-0026BB765291

public.hap.service.service-label

Required Characteristics

Service Label Namespace (page 213)

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

236

10. Apple-defined Profiles

10.1 Overview
An Apple-defined profile is comprised of Apple-defined characteristics and Apple-defined services. A custom
profile may be comprised of custom characteristics, Apple-defined characteristics, and custom services.
Accessories must use Apple-defined characteristics to expose functionality of the accessory if they are available,
e.g. a temperature sensor must use the Apple-defined Current Temperature (page 148) characteristic rather
than defining its own custom characteristic to expose the same functionality.

10.2 Lock
The purpose of the HomeKit Accessory Lock Profile is to provide a set of standard services and characteristics
to describe and interact with locks, such as a door lock, or lock on an automobile. The physical equivalent of
the functionality this service provides is turning a key inside a lock after it has been inserted. Services and
characteristics contained herein only cover lock interaction. The services and characteristics defined in this
document are designed to be used on both IP and Bluetooth Low Energy devices, unless otherwise noted. All
transactions are secured with HAP session security, which is described in the HomeKit Accessory Protocol for
Bluetooth LE Accessories (page 94).

10.2.1 Lock Mechanism Service
The Lock Mechanism (page 219) service is a primary service, designed to expose and control the physical lock
mechanism on a device. Implementation of this service is mandatory.

An implementation should not add vendor-specific characteristics to the Lock Mechanism Service because
doing so will increase characteristic discovery time due to additional protocol transactions.

10.2.2 Lock Management Service
The Lock Management (page 218) service is a secondary service, designed to expose deeper interaction with
a Lock device. Implementation of this service is mandatory. However, portions of this service are optional.

An implementation may add vendor-specific characteristics to the Lock Management Service but doing so
may increase characteristic discovery time due to additional protocol transactions.

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

237

10. Apple-defined Profiles
10.2 Lock

10.2.2.1 Control Point Characteristic Commands
The Lock Control Point (page 152) characteristic accepts the following TLV8 commands:

Table 10-1

Lock Control Point Characteristic Commands TLV8 Definition

Type

0x00

0x02

0x03

Name

Format

Description

readLogsFromTime

int

clearLogs

setCurrentTime

int

int

Read the logs starting at the value, which is in seconds
since epoch time. A zero-length value will read all logs
since the last wipe.

Clear the Lock`s logs.

Set the Lock`s current time, defined as seconds since
epoch time.

10.2.2.2 Version Characteristic
The version of the Lock Profile that the device supports, as a string. For example, if the version of the supported
Apple Lock Profile is "2.3", that value should be returned when the characteristic is read. Inclusion of this
characteristic is mandatory.

The value of this characteristic must be the string "1.0".

10.2.2.3 Logs Characteristic Response Format
The Logs (page 155) characteristic returns a list of logs provided in the following TLV8 format, with a separator
in between each log entry.

Table 10-2

Logs Characteristic Response Format TLV8 Definition

Type

0x01

Name

accessor

0x02

time

Format

Description

string

int

The user name that accessed the lock (provided by the
HomeKit Accessory Pairing Profile).

The time the accessor accessed the Lock, defined as seconds
since epoch time.

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

238

10. Apple-defined Profiles
10.2 Lock

Type

0x03

Name

action

0x04

0x05

vendorSpecific

separator

data

none

Format

Description

int

The action the accessor took when accessing the Lock
Mechanism.
Bits:
1 = "Lock mechanism state read"
2 = "Lock Mechanism Action occurred"
3 = "All logs cleared"
6-8 = "Reserved"

Vendor-specific log elements. Limited to 255 bytes.

Empty element to separate groups of items within a single
payload.

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

239

11. IP Cameras

11.1 Overview
This document specifies the HAP based services, characteristics and communication protocol for IP camera
accessories that support RTP streaming of audio/video.

11.2 Requirements

11.2.1 Streaming Requirements
RTP for media transport
● RTP - A Transport Protocol for Real-Time Applications - RFC 3550
● RTP Profile for Audio and Video Conferences with Minimal Control - RFC 3551

●

Extended RTP Profile for Real-time Transport Control Protocol (RTCP)-Based Feedback (RTP/AVPF) - RFC
4585

● Codec Control Messages in the RTP Audio-Visual Profile with Feedback (AVPF) - RFC 5104
● Multiplexing RTP Data and Control Packets on a Single Port - RFC 5761
● RTP Payload Format for H.264 Video - RFC6184
● 3GPPTS 26.114 "Coordination of Video Orientation" Section 7.4.5
● RTP Payload Format for Opus Speech and Audio Codec RFC 7587 with an exception that Opus audio RTP

Timestamp shall be based on RFC 3550
The Secure Real-time Transport Protocol (SRTP) - RFC 3711
The Use of AES-192 and AES-256 in Secure RTP - RFS 6188

●

●

● RTCP Sender Report for both Audio and Video must adhere to Section 6.4.1 of RFC 3550. Both Audio and

Video NTP should be derived from the same "wall clock".

● Audio RTP timestamp reflects the sampling instant of the first octet in the RTP data packet and must

adhere to section 5.1 of RFC 3550 for all codecs including OPUS

● Video RTP timestamp is set to the sampling timestamp of the content and must adhere to section 5.1 of

RFC 6184

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

240

11. IP Cameras
11.3 Service Definitions

11.2.2 Optional Requirements
The following requirements may be supported by IP camera accessories
● Multiple audio/video sources need to be published as different accessories
Support for accessory to publish supported audio output decode formats:

●

●

The assumption for now is that this is the same as the audio codec used for sourcing input audio

11.3 Service Definitions

11.3.1 IP Camera
The following services are required to support IP camera using HomeKit Accessory Protocol:
● Camera RTP Stream Management (page 231) services describe and allow configuration/control of at least

two RTP session for streaming audio and video from the accessory

● Microphone (page 231) service provides control over audio sourcing

Optionally, an IP camera accessory can support additional services such as:

●

Speaker (page 232) service for two-way audio

11.3.2 Video Doorbell Profile
This service describes the features of a video doorbell.
● Doorbell (page 232)
● Video Doorbell Secondary Services:

The following secondary services are designed to expose the IP camera functionality of a video doorbell:

Table 11-1

Video Doorbell Secondary Services

Service

Required or Optional

Camera RTP Stream Management (page 231)

Speaker (page 232)

Microphone (page 231)

Required

Required

Required

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

241

11. IP Cameras
11.4 RTP configuration

11.4 RTP configuration

11.4.1 RTCP Based Feedback
The IP Camera must support the reception of following RTCP-FB messages defined in RFC 4585 and RFC 5104
in addition to the regular RTCP reports mentioned in RFC 3550

●

●

●

●

FIR - Upon receiving FIR, IP camera must send a decoder refresh point at the earliest opportunity. See
section 3.5.1 of RFC 5104 for more details
PLI - IP Camera must calculate Round trip time (RTT) using the incoming RTCP reports as detailed in RFC
3550. The IP Camera shall adhere to the following behavior when handling incoming PLI RFC 4585 requests,
If a PLI is received after 2 x RTT from when the last key frame was sent, the IP Camera must respond
with a key frame at the earliest opportunity. In doing so, the subsequent periodic keyframes should
be delayed by "Keyframe interval"
If a PLI is received after 2 x RTT along with TMMBR as part of compound RTCP packet, the IP Camera
shall adjust the bitrate first and then generate the key frame at the newly requested bitrate
If a PLI is received within 2 x RTT from when the last keyframe was sent, the IP Camera must ignore
the PLI request. The next periodic keyframe shall be sent as usual after the Keyframe interval elapses

●

●

IP Camera must implement the PLI Handling as described in the below figure IP Camera - PLI Handling
TMMBR/TMMBN - Upon receiving TMMBR, IP camera must cap its video bitrate to the bitrate requested
in the TMMBR. Upon receiving the TMMBR, IP camera must acknowledge the receipt for TMMBR by sending
a TMMBN immediately. See section 3.5.4 of RFC 5104 for more details.

●

TMMBR must be assigned a higher priority than PLI in case they are compounded in a single RTCP
packet

● When the IP camera sends TMMBN upon receiving a TMMBR, it must reset its RTCP send time and the

next RTCP regular report should be sent after one RTCP interval period.

The IP Camera should support the reception of following RTCP-FB messages defined in RFC 5104.

●

TSTR - Upon receiving TSTR, IP camera should adjust its temporal-spatial trade-off to what is requested in
TSTR

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

242

11. IP Cameras
11.4 RTP configuration

●

TSTN -Upon receiving the TSTR, IP camera should acknowledge the receipt for TSTR by sending a TSTN in
the next RTCP interval

Figure 11-1

IP Camera - PLI Handlin

1

Camera

Controller

2

Camera

Controller

3

Camera

Controller

KFI

KFI

KFI

Key frame

Key frame

Key frame

Key frame

2* RTT

Key frame

PLI

Key frame

KFI

Key frame

KFI

2* RTT

KFI

Key frame

Key frame

PLI

Key frame

Camera sends periodic Key frames 
based on KFI.

Camera sends Key frame in response to 
PLI.  Subsequent key frame is adjusted 
based on KFI.

Camera ignores a PLI as it came 
within 2 * RTT since the last key frame 
sent.

RTT - Round Trip Time calculated as per RFC 3550 using RTCP reports
KFI - Key Frame Interval
PLI - Picture Loss Indication (RTCP-FB)

4

Camera

Controller

5

Camera

Controller

6

Camera

Controller

Key frame

2* RTT

Key frame

PLI
PLI

KFI

KFI

Key frame

Key frame

Key frame

PLI

2* RTT

Key frame

PLI+
TMMBR

Key frame

KFI

Key frame

KFI

TMMBN
Key frame

Key frame

Camera ignores a subsequent PLI as it 
came within 2 * RTT since the last key 
frame sent.

Variable delay in network can cause two 
PLIs to come back to back.  Camera 
ignores second PLI that arrives before 
sending a key frame for the first PLI.

When PLI is sent along with a TMMBR 
as part of compound RTCP packet, 
Camera adjust the bitrate first and then 
a key frame is generated at the newly 
requested bitrate.

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

243

11. IP Cameras
11.4 RTP configuration

11.4.2 RTP Extension for Coordination of Video Orientation
If the IP Camera can support rotation while streaming, it must support RTP extension for Coordination of Video
Orientation [3GPP TS 26.114] for video RTP.

An IP Camera which supports the RTP extension for Co-ordination of Video Orientation, must:
● Add the payload bytes as defined in 3GPP TS 26.114 - Co-ordination of Video Orientation onto the last

RTP packet in each group of packets which make up a key frame

● Add the payload bytes onto the last RTP packet in each group of packets which make up another type of

frame (e.g. a P-Frame) only if the current value is different from the previous value sent.

11.4.3 Reconfiguring a Streaming Session
The controller may issue a 'Reconfigure Streaming Session' command to change the parameters of the video
stream. The controller will not issue this command to change the parameters of the audio stream.

When the controller issues this command, the IP camera must reconfigure the attributes of the stream without
affecting the RTP session.

●

●

●

The RTP stream must not be restarted

 ●

The RTP packet that is generated after the reconfigure command is executed at the IP camera (the
next RTP packet) will be an IDR packet at a different resolution

The sequence numbers must not be reset

 ●

The sequence number of the next RTP packet will increment by one

The time-stamp of the next RTP packet may account for the time it took for this next RTP packet to be
generated

Example of a Reconfigure Streaming Session Command:

Selected Stream Configuration:

{

{

SessionControl

controlCommand = Reconfigure
sessionID = 567FAAB5-BBB7-46FF-914A-E56B474FCDB4

}
videoParameters =

{

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

244

11. IP Cameras
11.5 Image Snapshot

attributes =
{

imageWidth = 320
imageHeight = 240

}
rtpParameters =
{

maximumBandwidth = 422

minimumRTCPInterval = 1
frameRate = 15
}

}

}

11.5 Image Snapshot
An Image snapshot feature allows a controller to request the IP Camera accessory to cap-ture and retrieve a
static image from the camera.

When a controller sends an HTTP POST request with the desired image-width and image-height in the body
the accessory must run the resource routine:

POST /resource HTTP/1.1

Example of a snapshot request in POST:

/resource
resource-type : image
image-width : <number>
image-height: <number>

The IP camera must set the MIMEType in the HTTP response to image and must provide the snapshot in JPEG
format.

The IP Camera must return a snapshot only in the resolution that the controller requests for.

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

245

11. IP Cameras
11.6 IP Camera Streaming Procedure

11.6 IP Camera Streaming Procedure
The sequence diagram below indicates the sequence of steps that a controller will perform to set up a streaming
session with the IP camera accessory. A secure (pair-verified) session must be established before a streaming
session can be established.

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

246

11. IP Cameras
11.6 IP Camera Streaming Procedure

Figure 11-2

IP Camera Streaming Procedure

Controller

Camera

Start stream and
open local sockets

Session ID
IP Address version
Controller IP Address
Video Port
Audio Port
Controller SRTP Configuration

Select parameters

Start Command
Selected Video Codec
Selected Audio Codec
Video SSRC
Audio SSRC
Audio Payload Type
Video Paylaod Type
Max Bit Rate

Reconfigure stream

Resolution
Framerate
Max Bit Rate
Min RTCP Interval

Suported video configuration
Suported audio configuration
Suported RTP configuration

 Write setup endpoint

Read setup endpoint

Selected stream configuration

AV stream in progress

Selected stream configuration

Reconfigured AV stream

Session ID
IP Address version
Controller IP Address
Video Port
Audio Port
Video SSRC
Audio SSRC
Camera SRTP Configuration

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

247

11. IP Cameras
11.7 Multiple Camera RTP Stream Management

11.7 Multiple Camera RTP Stream Management
The IP camera must advertise a unique instance of the Camera RTP Stream Management Service for each of
the Audio and Video stream configurations that it can simultaneously stream to iOS controllers.
● One stream must support a resolution of 1080p

●

●

●

The minimum advertised resolution for any stream must be 720p
The IP camera must support at least two simultaneous streams viewable at two different controllers. Each
stream configuration must include the video attributes TLVs for the highest supported resolution as well
as all the lower resolutions that the camera can support at any given instance
Instances of the Camera RTP Stream Management services must remain static through the lifetime of the
IP camera. Services can only be added or removed via a firmware update to the accessory

11.8 Media Codecs

11.8.1 Mandatory Video RTP Service Settings
An IP camera accessory must support the following settings for the video RTP service:
● Codec type: H.264

●

Profile ID: Main Profile, Level: 3.1

●

SPS PPS must use STAP-A fragmentation

● Video resolutions

Table 11-2

Video Resolutions

Aspect Ratio

Resolution

16:9

1920x1080 (1080p)
1280x720 (720p)
640x360
480x270
320x180

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

248

11. IP Cameras
11.8 Media Codecs

Aspect Ratio

Resolution

4:3

1280x960
1024x768 (XGA)
640x480 (VGA)
480x360 (HVGA)
320x240 (QVGA)

● Default MTU for Video RTP Stream

●

The IP camera must use the following values as default MTU's for Video RTP streams

●

●

IPv4 - 1378 bytes
IPv6 - 1228 bytes

●

The controller may request the camera to choose a different MTU in the Selected RTP Stream
Configuration characteristic

●

The minimum keyframe interval shall be 5 seconds

11.8.2 Mandatory Audio RTP service settings
● An IP camera must support AAC-ELD or Opus at 16K or 24K sample rates.
● AAC-ELD or Opus must be supported in Variable Bit Rate mode.

●

The block size for AAC-ELD must be 480 samples

● An IP camera must support the RTP Times listed in the table below

Table 11-3 Mandatory RTP Time Values

RTP Time

Audio Codecs

20ms, 40ms, 60ms

AMR, AMR-WB, AAC-ELD 24K, Opus 16K, Opus 24K

30ms, 60ms

AAC-ELD 16K

11.8.3 Mandatory RTP Profile
An IP camera must support SAVPF RFC 5124

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

249

11. IP Cameras
11.9 Media Transport

11.9 Media Transport
Audio and video packets are delivered using RFC 3550. The RTP payload format is dependent on the codecs,
and is described through the appropriate IETF documents (e.g. RFC 6184 for H.264, RFC 6716 for Opus and
RFC 3640 - Section.3.3.6 - High Bit-rate AAC for AAC-ELD).

RTP and RTCP packets are multiplexed over a single port RFC 5761. Separate ports are used to stream audio
and video.

SRTP RFC 3711 must be used to provide media security. The SRTP crypto-suite of the service is indicated by
the SRTP Crypto-Suite characteristic. The SRTP master key and master salt are exchanged when setting up a
stream through the Session Start characteristic.

11.10 Testing IP Cameras
This section outlines three kinds of certification tests that are needed for an IP camera accessory:
● HAP compliance: These tests validate that the accessory publishes it supported video and audio RTP

services as per this specification and behaves per spec for setting up and managing a streaming session.
These tests include validating the streaming session management and control services (such as volume
of microphone/speaker or tilt/zoom of the camera).
Encoder quality compliance: These tests validate that the audio video encoders supported by the accessory
generate valid encoded data with the codec and audio/video parameters configured by the controller.
This may involve well-defined source audio/video streams through the encoders with pre-defined
configurations.
Stream session behavior: These tests validate that the behavior of the streaming session when audio/video
encoding/streaming parameters are modified on the fly. For example, when the controller commands the
accessory to drop the bitrate of an audio/video bit stream, the accessory should do so in a manner not
affecting the user experience by much.

●

●

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

250

12. Appendix

12.1 TLVs
Pairing messages frame data into 1 or more items, each containing an 8-bit type followed by an 8-bit length
followed by a variable length value format (TLV8).

Table 12-1

TLV8 Structure

Name

Type

Length

Size in Bytes

Description

1

1

Type of value.

Number of value bytes, excluding type and length fields. 0 means there
is no value data.

Value

Variable

Contains <Length> bytes of data for the value. May be empty if length is
0.

Table 12-2

TLV8 Value Formats

Name

Bytes

Integer

UTF-8

Description

Raw binary data.

Little endian integer. This must use the minimum number of bytes to encode the integer.

UTF-8 encoded string. This must not contain a NUL terminator (size is specified by the TLV
length field).

12.1.1 TLV Rules
The following rules apply:

●

●

TLV items with unrecognized types must be silently ignored.
TLV item length describes the number of value bytes, excluding the type and length bytes. 0 is a valid
length.

● Values less than or equal to 255 bytes must be contained in a single TLV item and not fragmented.
● Values larger than 255 bytes must be fragmented into multiple, TLV fragment items.

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

251

12. Appendix
12.1 TLVs

●

●

●

●

●

Each TLV fragment item must begin with an 8-bit type followed by an 8-bit length.
Each TLV fragment item's type must be same.
Each TLV fragment item's length must describe only that fragment's portion of the value.
Each TLV fragment item must have a non-0 length.
TLV fragment items must be contiguous.

● Only the last TLV fragment item in series of contiguous TLV fragment items may have non-255 byte length.
There may be multiple, separate TLV items of the same type if separated by a TLV item of a different type.

●

12.1.2 TLV Examples
TLV Example 1 (2 small TLVs)

Byte 0: 0x06 (state)
Byte 1: 0x01 (1 byte value)
Byte 2: 0x03 (M3)
Byte 3: 0x01 (identifier)
Byte 4: 0x05 (5 byte value)
Byte 5: 0x68 (ASCII 'h')
Byte 6: 0x65 (ASCII 'e')
Byte 7: 0x6C (ASCII 'l')
Byte 8: 0x6C (ASCII 'l')
Byte 9: 0x6F (ASCII 'o')
Total:

10 bytes

Raw hex dump:
00000000
0000000a

07 01 03 01 05 68 65 6c

6c 6f

|.....hello|

TLV Example 2 (1 small TLV, 1 300-byte value split into 2 TLVs, 1 small TLV)

Byte
Byte
Byte
Byte
Byte

0: 0x06 (state)
1: 0x01 (1 byte value)
2: 0x03 (M3)
3: 0x09 (certificate)
4: 0xFF (255 byte value)

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

252

12. Appendix
12.1 TLVs

5: 0x61 (ASCII 'a')

Byte
... 254 more bytes containing 0x61 (ASCII 'a')
Byte 260: 0x09 (certificate...continuation of previous TLV)
Byte 261: 0x2D (45 byte value)
Byte 262: 0x61 (ASCII 'a')
... 44 more bytes containing 0x61 (ASCII 'a')
Byte 307: 0x01 (identifier...new TLV item)
Byte 308: 0x05 (5 byte value)
Byte 309: 0x68 (ASCII 'h')
Byte 310: 0x65 (ASCII 'e')
Byte 311: 0x6C (ASCII 'l')
Byte 312: 0x6C (ASCII 'l')
Byte 313: 0x6F (ASCII 'o')
Total: 314 bytes

Raw hex dump:
00000000
00000008
00000010
00000018
00000020
00000028
00000030
00000038
00000040
00000048
00000050
00000058
00000060
00000068
00000070
00000078
00000080
00000088
00000090

07 01 03 0a ff 61 61 61
61 61 61 61 61 61 61 61
61 61 61 61 61 61 61 61
61 61 61 61 61 61 61 61
61 61 61 61 61 61 61 61
61 61 61 61 61 61 61 61
61 61 61 61 61 61 61 61
61 61 61 61 61 61 61 61
61 61 61 61 61 61 61 61
61 61 61 61 61 61 61 61
61 61 61 61 61 61 61 61
61 61 61 61 61 61 61 61
61 61 61 61 61 61 61 61
61 61 61 61 61 61 61 61
61 61 61 61 61 61 61 61
61 61 61 61 61 61 61 61
61 61 61 61 61 61 61 61
61 61 61 61 61 61 61 61
61 61 61 61 61 61 61 61

|.....aaa|
|aaaaaaaa|
|aaaaaaaa|
|aaaaaaaa|
|aaaaaaaa|
|aaaaaaaa|
|aaaaaaaa|
|aaaaaaaa|
|aaaaaaaa|
|aaaaaaaa|
|aaaaaaaa|
|aaaaaaaa|
|aaaaaaaa|
|aaaaaaaa|
|aaaaaaaa|
|aaaaaaaa|
|aaaaaaaa|
|aaaaaaaa|
|aaaaaaaa|

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

253

12. Appendix
12.2 Accessory Categories

00000098
000000A0
000000A8
000000B0
000000B8
000000C0
000000C8
000000D0
000000D8
000000E0
000000E8
000000F0
000000F8
00000100
00000108
00000110
00000118
00000120
00000128
00000130
00000138

61 61 61 61 61 61 61 61
61 61 61 61 61 61 61 61
61 61 61 61 61 61 61 61
61 61 61 61 61 61 61 61
61 61 61 61 61 61 61 61
61 61 61 61 61 61 61 61
61 61 61 61 61 61 61 61
61 61 61 61 61 61 61 61
61 61 61 61 61 61 61 61
61 61 61 61 61 61 61 61
61 61 61 61 61 61 61 61
61 61 61 61 61 61 61 61
61 61 61 61 61 61 61 61
61 61 61 61 0a 2d 61 61
61 61 61 61 61 61 61 61
61 61 61 61 61 61 61 61
61 61 61 61 61 61 61 61
61 61 61 61 61 61 61 61
61 61 61 61 61 61 61 61
61 61 61 01 05 68 65 6c
6c 6f

|aaaaaaaa|
|aaaaaaaa|
|aaaaaaaa|
|aaaaaaaa|
|aaaaaaaa|
|aaaaaaaa|
|aaaaaaaa|
|aaaaaaaa|
|aaaaaaaa|
|aaaaaaaa|
|aaaaaaaa|
|aaaaaaaa|
|aaaaaaaa|
|aaaa.-aa|
|aaaaaaaa|
|aaaaaaaa|
|aaaaaaaa|
|aaaaaaaa|
|aaaaaaaa|
|aaa..hel|
|lo|

12.2 Accessory Categories

Table 12-3

Accessory Categories

Value

Accessory Category

1

2

3

4

5

Other

Bridge

Fan

Garage

Lightbulb

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

254

12. Appendix
12.2 Accessory Categories

Value

Accessory Category

6

7

8

9

10

11

12

13

14

15

16

17

18

19

Door Lock

Outlet

Switch

Thermostat

Sensor

Security System

Door

Window

Window Covering

Programmable Switch

Range Extender

IP Camera

Video Door Bell

Air Purifier

20+

Reserved

Note: An accessory with support for multiple categories should advertise the primary category. An accessory
for which a primary category cannot be determined or the primary category isn't among the well defined
categories (2-9) falls in the 'Other' category.

2017-06-07   |   Copyright © 2017 Apple Inc. All Rights Reserved.

255

Apple Inc.
Copyright © 2017 Apple Inc.
All rights reserved.

Access to and use of this document and the 
information contained herein is governed by the terms 
of the Limited License to HomeKit Accessory Protocol 
Specification (Non-Commercial Version) (the 
“Agreement”) between Apple and the receiving party. 
This document is intended to be used for informational 
purposes solely to create hardware accessories that 
communicate with Apple products using the HomeKit 
Accessory Protocol, for the receiving party’s own 
personal, non-commercial use and enjoyment, and not 
for distribution or sale. Any other use of this document 
is strictly prohibited. If you have not agreed to be 
bound by the terms of the Agreement, you may not 
access or use this document. 
No part of this document may be reproduced, stored in 
a retrieval system, or transmitted, in any form or by any 
means, mechanical, electronic, photocopying, 
recording, or otherwise, without prior written 
permission of Apple Inc., with the following exceptions: 
the receiving party is hereby authorized to store this 
document on a single computer for personal use only 
and to print copies of this document for personal use 
subject to the terms of the Agreement provided that 
the documentation contains Apple’s copyright notice.
Except as set forth in the Agreement, no licenses, 
express or implied, are granted with respect to any of 
the technology described in this document. Apple 
retains all intellectual property rights associated with 
the technology described in this document.
Apple, the Apple logo, AirPort, Bonjour, iPad, iPhone, 
iPod, Mac, OS X, and watchOS are trademarks of Apple 
Inc., registered in the U.S. and other countries.
IOS is a trademark or registered trademark of Cisco in 
the U.S. and other countries and is used under license.
JavaScript is a registered trademark of Oracle and/or its 
affiliates.
Even though Apple has reviewed this document, THIS 
DOCUMENT IS PROVIDED “AS IS” AND WITHOUT 
REPRESENTATION, WARRANTY, UPGRADES OR SUPPORT 
OF ANY KIND. APPLE AND APPLE’S DISTRIBUTORS, 
AFFILIATES, LICENSOR(S) AND SUPPLIER(S) (“APPLE 
PARTIES”) EXPRESSLY DISCLAIM ALL REPRESENTATIONS, 
WARRANTIES AND CONDITIONS, EXPRESS OR IMPLIED, 
INCLUDING THE IMPLIED WARRANTIES AND 
CONDITIONS OF MERCHANTABILITY, OF SATISFACTORY 
QUALITY, OF FITNESS FOR A PARTICULAR PURPOSE, OF 
NON-INFRINGEMENT AND OF ACCURACY. NONE OF THE 
APPLE PARTIES WARRANTS THAT THE SPECIFICATION 
OR ANY ACCESSORY WILL MEET YOUR REQUIREMENTS, 
THAT DEFECTS IN THEM WILL BE CORRECTED OR THAT 
THEY WILL BE COMPATIBLE WITH FUTURE APPLE 
PRODUCTS. NO ORAL OR WRITTEN INFORMATION OR 
ADVICE GIVEN BY ANY APPLE PARTY OR AN APPLE 
AUTHORIZED REPRESENTATIVE WILL CREATE A 
WARRANTY.
EXCEPT TO THE EXTENT SUCH A LIMITATION IS 
PROHIBITED BY LAW, IN NO EVENT WILL ANY APPLE 
PARTY BE LIABLE FOR ANY INCIDENTAL, SPECIAL, 
INDIRECT, CONSEQUENTIAL, EXEMPLARY OR PUNITIVE 
DAMAGES, INCLUDING LOST PROFITS, LOST REVENUES 
OR BUSINESS INTERRUPTIONS, ARISING OUT OF OR 
RELATING TO THIS DOCUMENT UNDER A THEORY OF 
CONTRACT, WARRANTY, TORT (INCLUDING 
NEGLIGENCE), PRODUCTS LIABILITY OR OTHERWISE, 
EVEN IF ANY APPLE PARTY HAS BEEN ADVISED OF THE 
POSSIBILITY OF SUCH DAMAGES, AND 
NOTWITHSTANDING THE FAILURE OF ESSENTIAL 
PURPOSE OF ANY REMEDY. IN NO EVENT WILL THE 
APPLE PARTIES’ TOTAL LIABILITY TO YOU FOR ALL 
DAMAGES AND CLAIMS UNDER OR RELATED TO THIS 
DOCUMENT EXCEED THE AMOUNT OF US$50.00.
THE WARRANTY AND REMEDIES SET FORTH ABOVE ARE 
EXCLUSIVE AND IN LIEU OF ALL OTHERS, ORAL OR 
WRITTEN, EXPRESS OR IMPLIED. No Apple dealer, agent, 
or employee is authorized to make any modification, 
extension, or addition to this warranty.
Some states do not allow the exclusion or limitation of 
implied warranties or liability for incidental or 
consequential damages, so the above limitation or 
exclusion may not apply to you.

